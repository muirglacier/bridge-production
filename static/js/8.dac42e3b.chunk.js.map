{"version":3,"sources":["components/layout/Paper.tsx","features/transactions/components/TransactionTypeTabs.tsx","services/database/firebase/firebaseUtils.ts","services/database/firebase/firebase.ts","components/utils/types.ts","services/database/database.ts","utils/strings.ts","services/wallets/bsc.ts","features/release/releaseAddressValidator.ts","features/wallet/walletHooks.ts","features/transactions/transactionsHooks.ts","components/inputs/InputHelpers.tsx","components/utils/Debug.tsx","features/fees/feesHooks.ts","utils/formatters.ts","components/formatting/NumberFormatText.tsx","components/modals/BridgeModal.tsx","utils/dates.ts","features/transactions/components/TransactionsHelpers.tsx","features/mint/components/MintHelpers.tsx","features/transactions/components/TransactionFees.tsx","features/ui/uiHooks.ts","services/bridge.ts","features/mint/steps/MintFeesStep.tsx","features/wallet/walletUtils.ts","components/dropdowns/AssetDropdown.tsx","features/mint/steps/MintInitialStep.tsx","components/wallet/WalletHelpers.tsx","features/notifications/notificationsUtils.ts","features/mint/components/MintStatuses.tsx","features/mint/components/MultipleDepositsHelpers.tsx","features/mint/mintHooks.ts","features/mint/steps/MintProcessStep.tsx","features/mint/MintFlow.tsx","features/release/components/ReleaseStatuses.tsx","features/release/components/ReleaseHelpers.tsx","features/release/steps/ReleaseFeesStep.tsx","components/inputs/OutlinedTextField.tsx","features/release/steps/ReleaseInitialStep.tsx","features/notifications/components/NotificationsHelpers.tsx","features/transactions/components/TransactionMenu.tsx","features/release/releaseHooks.ts","features/release/steps/ReleaseProcessStep.tsx","features/release/ReleaseFlow.tsx","features/network/networkUtils.ts","components/pagination/SimplePagination.tsx","components/transactions/TransactionsGrid.tsx","features/mint/components/MintHistoryHelpers.tsx","features/release/components/ReleaseHistoryHelpers.tsx","features/transactions/components/TransactionHistoryHelpers.tsx","features/transactions/TransactionHistory.tsx","constants/featureFlags.ts","providers/multiwallet/Multiwallet.tsx","pages/MainLayout.tsx","pages/MainPage.tsx"],"names":["useBridgePaperStyles","makeStyles","theme","root","maxWidth","margin","position","overflow","BridgePurePaper","shaking","className","props","classes","shakingStyles","useShakingStyles","resolvedClassName","classNames","Paper","BridgePaperWrapper","styled","marginTop","SMALL_PADDING","getPadding","variant","usePaperContentStyles","paddingLeft","paddingVariant","paddingRight","top","paddingTop","bottom","paddingBottom","darker","backgroundColor","customColors","whiteDarker","PaperContent","topPadding","bottomPadding","children","styles","PaperHeader","display","justifyContent","alignItems","PaperNav","justifySelf","minWidth","PaperActions","marginLeft","marginRight","PaperTitle","textAlign","width","useSpacedContentStyles","minHeight","rootSmaller","SpacedPaperContent","smaller","rest","TransactionTypeTabs","history","useHistory","path","useRouteMatch","onTabChange","useCallback","event","newPath","push","Tabs","value","onChange","indicatorColor","Tab","label","paths","MINT","RELEASE","require","createOrUpdateProfileData","db","uid","a","doc","collection","get","docData","exists","update","updated","firebase","firestore","Timestamp","fromDate","Date","now","set","signatures","console","error","signInOrRegister","id","signature","token","functions","httpsCallable","signed","account","res","data","Error","auth","signInWithCustomToken","user","getFirebaseUser","address","currentUser","signOut","rawSignature","env","FIREBASE_KEY","warn","initializeApp","apiKey","authDomain","window","location","hostname","projectId","FIREBASE_PROJECT_ID","WalletStatus","addTx","tx","localWeb3Address","fsSignature","timestamps","dbTx","created","toLowerCase","walletSignature","createdSeconds","seconds","JSON","stringify","catch","e","updateTx","deleteTx","deleted","getTx","then","parse","getTxs","where","fsDataSnapshot","fsTransactions","empty","forEach","getUser","this","trimAddress","chars","length","start","slice","end","vowels","split","Network","AddressType","useWallet","chain","useMultiwallet","enabledChains","targetNetwork","activateConnector","setTargetNetwork","status","provider","symbol","isMetaMask","BridgeWallet","METAMASKW","chainId","indexOf","BINANCESMARTW","isMewConnect","isMEWConnect","MEWCONNECTW","UNKNOWNW","resolveWallet","deactivateConnector","connector","deactivate","walletConnected","CONNECTED","useSelectedChainWallet","multiwalletChain","useSelector","$multiwalletChain","ABI","useWeb3","useMemo","Web3","sendRedeemTxHook","web3","targetAddress","txid","n","amount","bridge","r","s","v","Promise","resolve","reject","currentProvider","connection","eth","Contract","SS","ETH_CONTRACT_ADDRESS","BSC_CONTRACT_ADDRESS","methods","mintToken","send","from","on","addBinanceChainHook","request","method","params","chainName","nativeCurrency","name","decimals","rpcUrls","blockExplorerUrls","err","added","log","addEthereumChainHook","sendBurnTxHook","burnToken","toString","useToken","getToken","sendAsync","type","options","ETH_TOKEN_ADDRESS","BSC_TOKEN_ADDRESS","image","addTokenHook","useAddBsc","chainname","dispatch","useDispatch","updateBsc","result","code","message","useSignatures","getSignatures","debug","useAuthentication","$walletUser","isAuthenticating","$isAuthenticating","isAuthenticated","authenticate","useAuthRequired","authRequired","useEffect","setAuthRequired","useRenNetworkTracker","currency","renChain","renNetwork","$renNetwork","networkMapping","getCurrencyConfig","networkMappings","newNetwork","isTestnetNetwork","testnet","isMainnetNetwork","mainnet","setRenNetwork","useSetCurrentTxId","currentId","$currentTxId","setCurrentTxId","CheckboxWrapper","useStyles","background","wrapper","height","wrapperEnabled","off","DEV","DebugWrapper","enabled","useState","show","setShow","toggleShow","onClick","getCircularReplacer","seen","WeakSet","key","has","add","Debug","it","force","disable","target","noClick","stopPropagation","DebugComponentProps","useFetchFees","txType","mint","burn","lock","release","fees","pending","numberFormatOptions","thousandSeparator","allowLeadingZeros","allowNegative","allowedDecimalSeparators","NumberFormatText","spacedSuffix","suffix","resolvedSuffix","displayType","useBridgeModalTitleStyles","dialogTitle","borderBottom","palette","divider","titleWrapper","flexGrow","title","customContentWrapper","closeButtonWrapper","closeButton","color","grey","prevButtonWrapper","prevButton","BridgeModalTitle","onClose","onPrev","disableTypography","IconButton","aria-label","fontSize","Typography","BridgeModal","open","Dialog","useNestedDrawerStyles","backdrop","right","left","zIndex","positioner","paper","flexDirection","NestedDrawerWrapper","NestedDrawerContent","NestedDrawerActions","NestedDrawer","Backdrop","dateOptions","timeZone","timeOptions","hour12","timeZoneName","getFormattedDateTime","timestamp","dateObject","date","toLocaleDateString","navigator","language","time","toLocaleTimeString","ProgressStatus","marginBottom","reason","processing","useTheme","usePaperTitle","setTitle","primary","main","ErrorIconWrapper","lineHeight","textLight","ErrorDialog","actionText","onAction","align","gutterBottom","component","SubmitErrorDialog","GeneralErrorDialog","external","href","links","BUGS_LOG","underline","WarningDialog","mainActionText","onMainAction","mainActionDisabled","alternativeActionText","onAlternativeAction","alternativeActionDisabled","showMainAction","disabled","WrongAddressWarningDialog","addressExplorerLink","mintTooltips","DepositWrapper","MultipleDepositsMessage","TransactionFees","hideButton","targetChainConfig","getChainConfig","getTransactionFees","renVMFee","networkFee","renVMFeeAmount","sourceCurrency","TxType","toReleasedCurrency","sourceCurrencyConfig","sourceCurrencyChainConfig","sourceChain","tooltips","getFeeTooltips","mintFee","releaseFee","fromGwei","labelTooltip","renVmFee","decimalScale","full","sourceChainMinerFee","short","renCurrencyChainFee","hoverable","useSubNetworkName","flow","useLocation","pathname","useLocationFlow","$chain","mintCurrency","$mintCurrency","releaseCurrency","$releaseCurrency","BridgeChain","ETHC","renCurrency","toMintedCurrency","ethTestnet","EthTestnet","KOVAN","buildUrl","destChain","ETHEREUM_BACKEND_ENDPOINT","BSC_BACKEND_ENDPOINT","getDepositAddress","userAddress","url","settings","fetch","json","getDeposits","getKeySignatures","getLogs","MintFeesStep","chainNativeCurrencyConfig","mintingInitialized","setMintingInitialized","$mint","$wallet","network","currentSessionCount","$currentSessionCount","destinationChainConfig","GreyIcon","destinationChainNativeCurrencyConfig","mintDynamicTooltips","acknowledge","mintedCurrency","ackChecked","setAckChecked","touched","setTouched","showAckError","handleAckCheckboxChange","checked","shake","timeout","setPaperShaking","setTimeout","useShakePaper","createMintTransaction","destAddress","mintedCurrencyChain","dayIndex","txValid","preValidateMintTransaction","canInitializeMinting","handleConfirm","setWalletPickerOpened","onMintTxCreated","destination","jsonObj","gatewayAddress","addTransaction","MINT_TRANSACTION","search","createTxQueryString","state","txState","newTx","creatingMintTx","setCreatingMintTx","finally","strvalue","Divider","FormControl","FormControlLabel","control","Checkbox","FormLabel","htmlFor","TooltipWithIcon","useFetchBalances","currencySymbols","bridgeChain","bridgeChainConfig","Chain","mintChainClassMap","rentxName","resetBalances","fetchAssetBalance","currencyConfig","chainMapping","isSupportedByCurrentNetwork","getBalance","balance","toNumber","useDebounce","currencySymbol","sourceCurrencySymbol","addOrUpdateBalance","getAssetBalance","balances","balanceEntry","find","entry","getOptions","mode","Object","values","chainsConfig","currenciesConfig","iconStyles","useCondensedSelectStyles","select","useAssetDropdownStyles","borderRadius","shape","border","grayLight","inputRoot","supplementalText","iconWrapper","listIcon","assetName","assetFullName","listSubheader","pointerEvents","listSubheaderLabel","AssetDropdown","available","condensed","condensedSelectClasses","availabilityFilter","option","includes","createAvailabilityFilter","valueRenderer","selected","getOptionBySymbol","Icon","EmptyCircleIcon","MainIcon","getAssetData","Box","Select","undefined","renderValue","displayEmpty","MenuProps","anchorOrigin","vertical","horizontal","getContentAnchorEl","ListSubheader","filter","map","MenuItem","AssetDropdownWrapper","MintInitialStep","onNext","handleCurrencyChange","setMintCurrency","handleChainChange","setChain","handleNextStep","mintedCurrencySymbol","supportedLockCurrencies","supportedMintDestinationChains","useWalletPickerStyles","body","padding","header","headerTitle","headerCloseIcon","button","chainTitle","textTransform","useWalletEntryButtonStyles","alignContent","icon","WalletEntryButton","logo","iconClassName","walletConfig","getWalletConfigByRentxName","Button","size","fullWidth","WalletChainLabel","chainConfig","getChainConfigByRentxName","WalletConnectingInfo","walletSymbol","getWalletConfig","labels","initialTitle","actionTitle","initialMessage","actionMessage","getLabels","useTimeout","passed","isPassed","skyBlueLight","useWalletConnectionProgressStyles","WalletConnectionProgress","redLighter","WalletWrongNetworkInfo","subNetworkName","networkName","getNetworkConfigByRentxName","updateEth","AddBscMetamask","ret","createIndicatorClass","createPulseAnimation","pulsingStyles","pulsingKeyframes","useWalletConnectionIndicatorStyles","success","info","warning","WalletConnectionIndicator","classNameProp","connected","wrongNetwork","WRONG_NETWORK","disconnected","DISCONNECTED","connecting","CONNECTING","useWalletConnectionStatusButtonStyles","common","white","borderColor","boxShadow","defaultShadow","hoisted","tooltip","indicator","indicatorMobile","WalletConnectionStatusButton","wallet","mobile","indicatorClassName","indicatorMobileClassName","accountClassName","hoistedClassName","getWalletConnectionLabel","trimmedAddress","buttonProps","useBrowserNotifications","onEnabled","Notification","permission","handleEnable","requestPermission","showBrowserNotification","onclick","MintDepositToStatus","getLockAndMintParams","lockCurrencyConfig","lockChainConfig","suggestedAmount","mintAddressLink","useSetPaperTitle","orangeLight","Grow","in","getPaymentLink","content","MintDepositConfirmationStatus","depositHash","lockTxHash","lockTxLink","lockTxAmount","lockConfirmations","lockTargetConfirmations","dep","lockProcessingTime","transactions","confirmations","confirmed","targetConfirmations","link","MintDepositAcceptedStatus","onSubmit","onReload","submitting","submittingError","useSetActionRequired","mintChainConfig","notificationMessage","showNotification","useNotifications","useEffectOnce","skyBlue","DestinationPendingStatus","mintTxLink","mintTxHash","MintCompletedStatus","mintHash","mintCurrencyConfig","conversionTotal","handleReturn","resetMint","showNotifications","flexWrap","py","useBigNavButtonStyles","transition","cursor","dark","opacity","hidden","BigNavButton","direction","rootClassName","NavigatePrevIcon","NavigateNextIcon","ButtonBase","DepositPrevButton","DepositNextButton","useDepositPagination","depositSourceHash","updateHash","sortedDeposits","orderedHashes","keys","deposit","total","initial","currentHash","setCurrentHash","currentIndex","nextIndex","nextHash","prevIndex","prevHash","handleNext","handlePrev","MintProcessStep","useLocalStorage","rdtx","setRdtx","useTxParam","parsedTx","depositN","setDepositHash","setTx","usePageTitle","getTxPageTitle","paperTitle","setPaperTitle","handlePreviousStepClick","goBack","handleWalletPickerOpen","showTransactionStatus","replace","feeCurrency","getCurrencyConfigByRentxName","sourceAsset","interval","setInterval","txChange","changes","i","vout","clearInterval","hash","MintTransactionStatus","setState","closeNotification","setSignatures","timeOut","setTimeOut","timeoutTimer","timeoutFunc","clearTimeout","good","submitSignRequest","submitToBridge","siggy","parseInt","activeDeposit","value_satoshi","persist","rdCopy","sigs","sigCopy","wrongAddressDialogOpened","setWrongAddressDialogOpened","handleCloseWrongAddressDialog","toUpperCase","useRedeem","queryTx","parseTxQueryString","accountExplorerLink","getAddressExplorerLink","submitter","pagination","MintTransactionDepositStatus","MintConfiguration","TxConfigurationStep","INITIAL","step","setStep","onInitialNext","FEES","onFeesPrev","MintFlow","match","exact","ReleaseProgressStatus","generalError","getBurnAndReleaseParams","burnChainConfig","releaseCurrencyConfig","burnTxHash","burnTxLink","handleSubmit","buttonSubmitting","Boolean","ReleaseCompletedStatus","releaseChainConfig","releaseTxLink","releaseAddressLink","resetRelease","targetAmount","ReleaseShortcutCompletedStatus","sha256","payload","createHash","digest","addressTypes","p2pkh","p2sh","getAddressInfo","decoded","prefix","substr","bech32","decode","df","tb","bcrt","regtest","witnessVersion","words","fromWords","p2wpkh","p2tr","p2wsh","parseBech32","base58_to_binary","version","checksum","expectedChecksum","some","index","Number","addressType","validate","addressInfo","releaseTooltips","ReleaseFeesStep","releasingInitialized","setReleasingInitialized","releaseTxId","setReleaseTxId","ethconf","setEthconf","$release","BURN","getBurn","amount_bgint","BigInt","utils","toWei","useBurn","destinationCurrency","createReleaseTransaction","canInitializeReleasing","preValidateReleaseTransaction","targetCurrency","validateAddress","getter","Executed","Confirmations","input","OutlinedTextField","TextField","InputProps","notched","OutlinedTextFieldWrapper","BigOutlinedTextFieldWrapper","SmallOutlinedTextFieldWrapper","ReleaseInitialStep","supportedReleaseCurrencies","setReleaseCurrency","handleAddressChange","setReleaseAddress","handleAmountChange","setReleaseAmount","basicCondition","hasBalance","supportedBurnChains","placeholder","BrowserNotificationsDrawer","onEnable","BrowserNotificationButton","pressed","onTooltipClose","tooltipOpened","ClickAwayListener","onClickAway","Tooltip","disableFocusListener","disableHoverListener","disableTouchListener","useTransactionMenuItemStyles","TransactionMenuItem","dense","ListItemIcon","useTransactionMenuStyles","modalTitle","titleIconWrapper","menuItems","transferId","TransactionMenu","onDeleteTx","onUpdateTx","handleClose","confirmOpen","setConfirmOpen","handleConfirmClose","handleDeleteWithConfirm","updateOpen","setUpdateOpen","handleUpdateClose","handleUpdateOpen","TxSettingsIcon","AddIcon","DeleteIcon","externalLinkAttributes","ConfirmTransactionDeletionDrawer","deleting","setDeleting","handleDeleteTx","startIcon","isValidInteger","isInteger","UpdateTransactionDrawer","setAmount","setVout","setHash","updating","setUpdating","valid","newValue","handleVoutChange","handleHashChange","handleUpdateTx","useBurnMachine","burnTransaction","cloneTx","providers","entries","reduce","c","machineHook","useMachine","burnMachine","context","sdk","getRenJs","fromChainMap","burnChainMap","toChainMap","releaseChainMap","autoSubmit","devTools","XSTATE_DEVTOOLS","useReleaseTransactionPersistence","service","ReleaseProcessStep","reloading","setReloading","reloadTx","menuOpened","setMenuOpened","handleMenuClose","handleMenuOpen","removeTransaction","useTransactionDeletion","modalOpened","setModalOpened","setTooltipOpened","handleTooltipClose","handleModalOpen","handleModalClose","useBrowserNotificationsConfirmation","burnCurrencyConfig","valueEquivalent","fixedDecimalScale","ReleaseTransactionStatus","current","stop","setSubmitting","timeoutError","handleReload","RELEASE_TRANSACTION","ReleaseConfiguration","ReleaseFlow","supportedParamNetworks","RenNetwork","Mainnet","Testnet","TestnetVDot3","MainnetVDot3","useSimplePaginationActionsStyles","flexShrink","spacing","black","SimplePaginationActions","count","page","rowsPerPage","onChangePage","Math","ceil","max","useSimplestPaginationActionsStyles","SimplestPaginationActions","useSimplePaginationStyles","toolbar","spacer","caption","SimplePagination","TablePagination","rowsPerPageOptions","ActionsComponent","simplestDisplayedRows","useSimplestPaginationStyles","SimplestPagination","labelRowsPerPage","labelDisplayedRows","useShowEntryStyles","hide","ShowEntry","when","standardPaddings","useTransactionsHeaderStyles","greyHeaderBackground","actions","TransactionsContent","TransactionsHeader","useTransactionsStatusHeaderStyles","fontWeight","typography","fontWeightBold","TransactionsStatusHeader","TransactionsPaginationWrapper","useTransactionEntryStyles","details","alignSelf","datetime","multiple","multipleLabel","multiplePagination","description","expired","tooltipIcon","MintTransactionEntryResolver","isActive","handleContinue","setTxHistoryOpened","isMintTransactionCompleted","onContinue","MintTransactionEntryMachine","mintTransaction","mintMachine","lockChainMap","mintChainMap","useMintMachine","handleFinish","WarningChip","Chip","alertWarning","alertWarningBackground","MintTransactionEntry","string","meta","phase","createdTimestamp","transactionsCount","handleRestart","StatusIcon","EmptyIcon","TxEntryStatus","COMPLETED","CompletedIcon","TxPhase","LOCK","handlePageChange","newPage","completed","isTransactionCompleted","EXPIRED","ACTION_REQUIRED","PENDING","needsAction","showConfirmations","ReleaseTransactionEntryResolver","isReleaseTransactionCompleted","ReleaseTransactionEntryMachine","ReleaseTransactionEntry","useTransactionHistoryDialogStyles","container","TransactionHistoryDialog","TransactionHistory","allTransactions","$orderedTransactions","txsPending","$transactionsData","opened","$txHistoryOpened","activeTxId","setTxsPending","txsData","setTransactions","x","bridgeChainToRenChain","str","all","setPage","handleChangePage","itemsCount","showTransactions","pendingTxsCount","completedTxsCount","onBackdropClick","keepMounted","mr","charAt","startIndex","indexIsInCurrentPage","isFirstShown","isPreviousDifferent","showHeader","Header","featureFlags","BSC_MM_ENABLED","queryString","bscMetamaskEnabled","MEWCONNECT_ENABLED","MEWConnectEnabled","WALLETCONNECT_ENABLED","walletConnectEnabled","1","42","renNetworkToEthNetwork","ethNetworkToRenNetwork","walletPickerModalConfig","targetEthChainId","chains","RenChain","ethereum","EthereumInjectedConnector","networkIdMapper","EthereumMEWConnectConnector","rpc","INFURA_ID","EthereumWalletConnectConnector","qrcode","binanceSmartChain","BinanceSmartChainInjectedConnector","getProvider","MainLayout","useMobileLayoutStyles","parsed","useSetNetworkFromParam","useSyncMultiwalletNetwork","useWeb3Signatures","txHistoryOpened","txsNeedsAction","$transactionsNeedsAction","$authRequired","setAuthWarningOpened","mobileMenuOpen","setMobileMenuOpen","handleMobileMenuClose","handleMobileMenuOpen","useWindowSize","breakpoints","handleTxHistoryToggle","walletPickerOpen","$walletPickerOpened","pickerClasses","React","walletMenuAnchor","setWalletMenuAnchor","handleWalletPickerClose","handleWalletMenuClose","handleWalletButtonClick","currentTarget","handleDisconnectWallet","walletPickerOptions","ConnectingInfo","WrongNetworkInfo","config","debugWallet","debugMultiwallet","debugNetworkName","drawerId","showTxIndicator","ToolbarMenu","desktopMenu","mobileMenu","aria-controls","aria-haspopup","DrawerMenu","Drawer","anchor","PaperProps","drawerPaper","drawerHeader","drawerClose","ListItem","drawerListItem","mobileMenuButton","mobileTxHistory","drawerFooterListItem","Footer","WalletLogo","to","p","WalletMenu","Menu","anchorEl","transformOrigin","MobileLayout","Logo","ConnectedMainLayout","MainPage","localStorage","getItem","storageKeys","TERMS_AGREED","WELCOME","paperShaking","$ui"],"mappings":"yPAWMA,EAAuBC,aAAW,SAACC,GACvC,MAAO,CACLC,KAAM,CACJC,SAAU,IACVC,OAAQ,SACRC,SAAU,WACVC,SAAU,cASHC,EAA2D,SAAC,GAIlE,IAHLC,EAGI,EAHJA,QACAC,EAEI,EAFJA,UACGC,EACC,uCACEC,EAAUZ,IACVa,EAAgBC,cAChBC,EAAoBC,IAAWN,EAAD,eACjCG,EAAcJ,QAAUA,IAE3B,OAAO,cAACQ,EAAA,EAAD,aAAOP,UAAWK,EAAmBH,QAASA,GAAaD,KAqBvDO,EAAqBC,YAAO,MAAPA,CAAc,CAC9CC,UAAW,KAGPC,EAAgB,GAIhBC,EAAa,WAAsC,IAArCC,EAAoC,uDAAV,MAC5C,OAAQA,GACN,IAAK,QACH,OAAOF,EACT,IAAK,SACH,OARiB,GASnB,IAAK,MACL,QACE,OAVc,KAcdG,EAAwBvB,aAAqC,SAACC,GAAD,MAAY,CAC7EC,KAAM,CACJsB,YAAa,gBAAGC,EAAH,EAAGA,eAAH,OAAwBJ,EAAWI,IAChDC,aAAc,gBAAGD,EAAH,EAAGA,eAAH,OAAwBJ,EAAWI,KAEnDE,IAAK,CACHC,WAAY,gBAAGH,EAAH,EAAGA,eAAH,OAAwBJ,EAAWI,KAEjDI,OAAQ,CACNC,cAAe,gBAAGL,EAAH,EAAGA,eAAH,OAAwBJ,EAAWI,KAEpDM,OAAQ,CACNC,gBAAiB/B,EAAMgC,aAAaC,iBAc3BC,EAAqD,SAAC,GAO5D,IAAD,EANJC,EAMI,EANJA,WACAC,EAKI,EALJA,cACAN,EAII,EAJJA,OACAN,EAGI,EAHJA,eACAhB,EAEI,EAFJA,UACA6B,EACI,EADJA,SAEMC,EAAShB,EAAsB,CAAEE,eAAgBA,IACjDX,EAAoBC,IAAWwB,EAAOrC,KAAMO,GAAd,mBACjC8B,EAAOZ,IAAMS,GADoB,cAEjCG,EAAOV,OAASQ,GAFiB,cAGjCE,EAAOR,OAASA,GAHiB,IAKpC,OAAO,qBAAKtB,UAAWK,EAAhB,SAAoCwB,KAGhCE,EAActB,YAAO,SAAPA,CAAiB,CAC1CuB,QAAS,OACTC,eAAgB,gBAChBC,WAAY,SACZf,WAAYR,EACZU,cAAeV,EACfI,YAAaJ,EACbM,aAAcN,IAGHwB,EAAW1B,YAAO,MAAPA,CAAc,CACpC2B,YAAa,aACbC,SAAU,KAGCC,EAAe7B,YAAO,MAAPA,CAAc,CACxC2B,YAAa,WACbC,SAAU,GACV,QAAS,CACP1C,OAAQ,QACR,gBAAiB,CACf4C,WAAY,GAEd,eAAgB,CACdC,YAAa,MAKNC,EAAahC,YAAO,MAAPA,CAAc,CACtC2B,YAAa,SACbM,UAAW,SACXC,MAAO,SAGHC,EAAyBrD,YAAW,CACxCE,KAAM,CACJoD,UAAW,KAEbC,YAAa,CACXD,UAAW,OAQFE,EAAiE,SAAC,GAGxE,IAFLC,EAEI,EAFJA,QACGC,EACC,2BACEnB,EAASc,IACT5C,EAAYM,IAAWwB,EAAOrC,KAAR,eACzBqC,EAAOgB,YAAcE,IAExB,OAAO,cAAC,EAAD,aAAchD,UAAWA,GAAeiD,K,uDC3KpCC,EAAoD,WAC/D,IAAMC,EAAUC,cACRC,EAASC,cAATD,KACFE,EAAcC,uBAClB,SAACC,EAA8BC,GAC7BP,EAAQQ,KAAKD,KAEf,CAACP,IAGH,OACE,mCACE,eAACS,EAAA,EAAD,CACEC,MAAOR,EACPS,SAAUP,EACVQ,eAAe,UACflD,QAAQ,YAJV,UAME,cAACmD,EAAA,EAAD,CACEC,MAAO,sBACPJ,MAAOK,IAAMC,OAEf,cAACH,EAAA,EAAD,CACEC,MAAO,oBACPJ,MAAOK,IAAME,gB,2DC3BvBC,EAAQ,MACRA,EAAQ,MACRA,EAAQ,MAGR,IAAMC,EAAyB,uCAAG,WAChCC,EACAC,GAFgC,iBAAAC,EAAA,6DAK1BC,EAAMH,EAAGI,WAAW,SAASD,IAAIF,GALP,SAMVE,EAAIE,MANM,UAM1BC,EAN0B,iBAQ1BA,EAAQC,OARkB,iCAUtBJ,EAAIK,OAAO,CACfC,QAASC,IAASC,UAAUC,UAAUC,SAAS,IAAIC,KAAKA,KAAKC,UAXnC,gDAetBZ,EAAIa,IAAI,CACZf,MACAQ,QAASC,IAASC,UAAUC,UAAUC,SAAS,IAAIC,KAAKA,KAAKC,QAC7DE,WAAY,KAlBc,gEAsB9BC,QAAQC,MAAM,gCAAd,MAtB8B,+DAAH,wDA6BzBC,EAAgB,uCAAG,WACvBC,EACAC,GAFuB,mBAAApB,EAAA,6DAInBqB,EAAuB,KAJJ,kBAMHb,IAASc,YAAYC,cAAc,eAAnCf,CAAmD,CACnEgB,OAAQJ,EACRK,QAASN,IARU,UAMfO,EANe,OAWrBL,EAAQK,EAAIC,KAAKN,MAXI,sBAab,IAAIO,MAAM,iBAbG,+DAgBrBZ,QAAQC,MAAM,yBAAd,MAhBqB,+BAsBdI,GAtBc,uCAsBEb,IAASqB,OAAOC,sBAAsBT,GAtBxC,oBAsBgDU,KAtBhD,QAsBrBA,EAtBqB,8DA0BrBf,QAAQC,MAAM,oCAAd,MA1BqB,gBA6BlBc,EA7BkB,0CA6BL,MA7BK,yBA+BjBlC,EAA0BW,IAASC,YAAasB,EAAKhC,KA/BpC,iCAgChBgC,GAhCgB,kEAAH,wDAuCTC,EAAe,uCAAG,WAC7BC,EACAlB,GAF6B,iBAAAf,EAAA,2DAILQ,IAASqB,QAAzBK,EAJqB,EAIrBA,cACYA,EAAYnC,MAAQkC,EALX,oBAOZ,OAAXC,QAAW,IAAXA,OAAA,EAAAA,EAAanC,OAAQkC,EAPE,gCAQnBzB,IAASqB,OAAOM,UARG,gCAUpBjB,EAAiBe,EAASlB,EAAWqB,eAVjB,gCAYpBF,GAZoB,2CAAH,wDCpEvBG,IAAIC,cACPtB,QAAQuB,KAAR,wBAGF/B,IAASgC,cAAc,CACrBC,OAAQJ,IAAIC,aACZI,WAAYC,OAAOC,SAASC,SAC5BC,UAAWT,IAAIU,sBAGjBnD,EAAQ,MAiBD,IC/BKoD,ECqBClD,EAFX,IFgBA,aAAe,IAAD,gCAFNA,QAEM,OAIPmD,MAJO,uCAIC,WACbC,EACAC,EACAC,GAHa,iBAAApD,EAAA,6DAMPqD,EAAa7C,IAASC,UAAUC,UAAUC,SAC9C,IAAIC,KAAKA,KAAKC,QAGVyC,EAVO,2BAWRJ,GAXQ,IAYXK,QAASF,EACT9C,QAAS8C,IAbE,SAgBP,EAAKvD,GACRI,WAAW,gBACXD,IAAIiD,EAAG/B,IACPL,IAAI,CACHiB,KAAMoB,EAAiBK,cACvBC,gBAAiBL,EACjBjC,GAAI+B,EAAG/B,GACPZ,QAAS8C,EACTK,eAAgBL,EAAWM,QAC3BhC,KAAMiC,KAAKC,UAAUP,KAEtBQ,OAAM,SAACC,GAAD,OAAO/C,QAAQC,MAAM,qBAAsB8C,MA3BvC,2CAJD,+DAkCPC,SAlCO,uCAkCI,WAAOd,GAAP,iBAAAlD,EAAA,6DACVqD,EAAa7C,IAASC,UAAUC,UAAUC,SAC9C,IAAIC,KAAKA,KAAKC,QAEVyC,EAJU,2BAIEJ,GAJF,IAIM3C,QAAS8C,IAJf,kBAMR,EAAKvD,GACRI,WAAW,gBACXD,IAAIiD,EAAG/B,IACPb,OAAO,CACNqB,KAAMiC,KAAKC,UAAUP,GACrB/C,QAAS8C,IAXC,6DAcdrC,QAAQC,MAAM,mBAAd,MAdc,8DAlCJ,2DAqDPgD,SArDO,uCAqDI,WAAOf,GAAP,SAAAlD,EAAA,+EAER,EAAKF,GACRI,WAAW,gBACXD,IAAIiD,EAAG/B,IACPb,OAAO,CAAE4D,SAAS,IALP,4DAOdlD,QAAQC,MAAM,mBAAd,MAPc,6DArDJ,2DAiEPkD,MAjEO,uCAiEC,WAAOjB,GAAP,SAAAlD,EAAA,+EACN,EAAKF,GACTI,WAAW,gBACXD,IAAIiD,EAAG/B,IACPhB,MACAiE,MAAK,SAACnE,GACL,GAAIA,EAAII,OAAQ,CACd,IAAMsB,EAAO1B,EAAI0B,OACjB,GAAIA,IAASA,EAAKuC,QAChB,OAAON,KAAKS,MAAM1C,EAAKA,MAG3B,MAAM,IAAIC,MAAJ,cAAiBsB,EAAG/B,GAApB,kBAEP2C,OAAM,SAACC,GAEN,MADA/C,QAAQC,MAAM,mBAAoB8C,GAC5BA,MAhBG,2CAjED,2DAqFPO,OArFO,uCAqFE,WAAOvE,GAAP,iBAAAC,EAAA,+EAEiB,EAAKF,GAC/BI,WAAW,gBACXqE,MAAM,OAAQ,KAAMxE,EAAIyD,eACxBrD,MALS,cAENqE,EAFM,OAMNC,EAAgC,GACjCD,EAAeE,OAClBF,EAAeG,SAAQ,SAAC1E,GACtB,IAAM0B,EAAO1B,EAAI0B,OACjB,IAAIA,EAAKuC,QAAT,CACA,IAAMhB,EAAkBU,KAAKS,MAAM1C,EAAKA,MACxC8C,EAAevF,KAAKgE,OAZZ,kBAeLuB,GAfK,sCAiBZzD,QAAQC,MAAM,sBAAd,MAjBY,8DArFF,2DA2GP2D,QA3GO,uCA2GG,WACf3C,EACAlB,GAFe,eAAAf,EAAA,sEAIIgC,EAAgBC,EAASlB,GAJ7B,cAITgB,EAJS,yBAMbA,GAAQ,CACNhC,IAAKgC,EAAKhC,MAPC,2CA3GH,wDACZ8E,KAAK/E,GAAKU,IAASC,a,QGvCVqE,EAAc,SAAC7C,GAAiC,IAAf8C,EAAc,uDAAN,EACpD,IAAK9C,EACH,MAAO,GAET,GAAIA,EAAQ+C,QAAU,EAAID,EACxB,OAAO9C,EAET,IAAMgD,EAAQhD,EAAQiD,MAAM,EAAGH,GACzBI,EAAMlD,EAAQiD,OAAOH,GAC3B,MAAM,GAAN,OAAUE,EAAV,cAAqBE,IAGjBC,EAAS,QAAQC,MAAM,I,2DFTjBrC,K,4BAAAA,E,wBAAAA,E,sBAAAA,E,+BAAAA,M,KGHZ,ICMKsC,GAMAC,G,UC2CQC,GAAuB,SAACC,GAAW,IAAD,MAMzCC,4BAJFC,EAF2C,EAE3CA,cACAC,EAH2C,EAG3CA,cACAC,EAJ2C,EAI3CA,kBACAC,EAL2C,EAK3CA,iBAL2C,GAQ9B,OAAbH,QAAa,IAAbA,OAAA,EAAAA,EAAgBF,KAAU,GARiB,IAOrChE,eAPqC,MAO3B,GAP2B,MAOvBsE,cAPuB,MAOd,eAPc,EASvCC,EAAQ,OAAGL,QAAH,IAAGA,GAAH,UAAGA,EAAgBF,UAAnB,aAAG,EAAwBO,SACnCC,EA5Bc,SAACD,GAAmB,IAAD,EACvC,cAAIA,QAAJ,IAAIA,OAAJ,EAAIA,EAAUE,YACLC,IAAaC,UAGI,UAAd,OAARJ,QAAQ,IAARA,OAAA,EAAAA,EAAUK,WAAV,OAAgCL,QAAhC,IAAgCA,GAAhC,UAAgCA,EAAUK,eAA1C,aAAgC,EAAmBC,QAAQ,YACtDH,IAAaI,eAGV,OAARP,QAAQ,IAARA,OAAA,EAAAA,EAAUQ,gBAAV,OAA0BR,QAA1B,IAA0BA,OAA1B,EAA0BA,EAAUS,cAC/BN,IAAaO,YAGfP,IAAaQ,SAeLC,CAAcZ,GAEvBa,GACJ,UAAAlB,EAAcF,UAAd,eAAsBqB,UAAUC,aAFlB,aAIhB,MAAO,CACLtF,UACAsE,SACAiB,gBAAiBjB,IAAW/C,EAAaiE,UACzCjB,WACAC,SACAL,gBACAD,gBACAE,oBACAC,mBACAe,wBAISK,GAAyB,WACpC,IAAMC,EAAmBC,YAAYC,MACrC,OAAO7B,GAAU2B,IAsBbG,GAAM,CACV,CACE,WAAa,EACb,OAAU,CACR,CACE,SAAW,EACX,aAAgB,UAChB,KAAQ,QACR,KAAQ,WAEV,CACE,SAAW,EACX,aAAgB,SAChB,KAAQ,MACR,KAAQ,UAEV,CACE,SAAW,EACX,aAAgB,SAChB,KAAQ,SACR,KAAQ,UAEV,CACE,SAAW,EACX,aAAgB,UAChB,KAAQ,SACR,KAAQ,WAEV,CACE,SAAW,EACX,aAAgB,UAChB,KAAQ,YACR,KAAQ,YAGZ,KAAQ,qBACR,KAAQ,SAEV,CACE,OAAU,GACV,KAAQ,QACR,QAAW,CACT,CACE,aAAgB,UAChB,KAAQ,GACR,KAAQ,YAGZ,gBAAmB,OACnB,KAAQ,WACR,UAAY,GAEd,CACE,OAAU,CACR,CACE,aAAgB,QAChB,KAAQ,GACR,KAAQ,UAGZ,KAAQ,gBACR,QAAW,CACT,CACE,aAAgB,OAChB,KAAQ,GACR,KAAQ,SAGZ,gBAAmB,OACnB,KAAQ,WACR,UAAY,GAEd,CACE,OAAU,CACR,CACE,aAAgB,SAChB,KAAQ,GACR,KAAQ,WAGZ,KAAQ,oBACR,QAAW,CACT,CACE,aAAgB,UAChB,KAAQ,GACR,KAAQ,YAGZ,gBAAmB,OACnB,KAAQ,WACR,UAAY,GAEd,CACE,OAAU,CACR,CACE,aAAgB,UAChB,KAAQ,YACR,KAAQ,YAGZ,KAAQ,oBACR,QAAW,GACX,gBAAmB,aACnB,KAAQ,YAEV,CACE,OAAU,CACR,CACE,aAAgB,SAChB,KAAQ,OACR,KAAQ,UAEV,CACE,aAAgB,UAChB,KAAQ,eACR,KAAQ,YAGZ,KAAQ,cACR,QAAW,GACX,gBAAmB,aACnB,KAAQ,YAEV,CACE,OAAU,CACR,CACE,aAAgB,SAChB,KAAQ,OACR,KAAQ,WAGZ,KAAQ,cACR,QAAW,GACX,gBAAmB,aACnB,KAAQ,YAEV,CACE,OAAU,CACR,CACE,aAAgB,SAChB,KAAQ,SACR,KAAQ,WAGZ,KAAQ,aACR,QAAW,CACT,CACE,aAAgB,OAChB,KAAQ,GACR,KAAQ,SAGZ,gBAAmB,OACnB,KAAQ,WACR,UAAY,GAEd,CACE,OAAU,CACR,CACE,aAAgB,UAChB,KAAQ,gBACR,KAAQ,WAEV,CACE,aAAgB,SAChB,KAAQ,OACR,KAAQ,UAEV,CACE,aAAgB,UAChB,KAAQ,IACR,KAAQ,WAEV,CACE,aAAgB,UAChB,KAAQ,SACR,KAAQ,WAEV,CACE,aAAgB,SAChB,KAAQ,SACR,KAAQ,WAGZ,KAAQ,gBACR,QAAW,CACT,CACE,aAAgB,QAChB,KAAQ,GACR,KAAQ,UAGZ,gBAAmB,OACnB,KAAQ,WACR,UAAY,GAEd,CACE,OAAU,CACR,CACE,aAAgB,UAChB,KAAQ,gBACR,KAAQ,WAEV,CACE,aAAgB,SAChB,KAAQ,OACR,KAAQ,UAEV,CACE,aAAgB,UAChB,KAAQ,IACR,KAAQ,WAEV,CACE,aAAgB,UAChB,KAAQ,SACR,KAAQ,WAEV,CACE,aAAgB,SAChB,KAAQ,SACR,KAAQ,WAGZ,KAAQ,aACR,QAAW,CACT,CACE,aAAgB,UAChB,KAAQ,GACR,KAAQ,YAGZ,gBAAmB,OACnB,KAAQ,WACR,UAAY,GAEd,CACE,OAAU,CACR,CACE,aAAgB,SAChB,KAAQ,gBACR,KAAQ,UAEV,CACE,aAAgB,SAChB,KAAQ,SACR,KAAQ,UAEV,CACE,aAAgB,UAChB,KAAQ,SACR,KAAQ,YAGZ,KAAQ,YACR,QAAW,CACT,CACE,aAAgB,UAChB,KAAQ,GACR,KAAQ,YAGZ,gBAAmB,aACnB,KAAQ,YAEV,CACE,OAAU,CACR,CACE,aAAgB,UAChB,KAAQ,gBACR,KAAQ,WAEV,CACE,aAAgB,SAChB,KAAQ,OACR,KAAQ,UAEV,CACE,aAAgB,UAChB,KAAQ,IACR,KAAQ,WAEV,CACE,aAAgB,UAChB,KAAQ,SACR,KAAQ,WAEV,CACE,aAAgB,SAChB,KAAQ,SACR,KAAQ,UAEV,CACE,aAAgB,UAChB,KAAQ,cACR,KAAQ,WAEV,CACE,aAAgB,UAChB,KAAQ,cACR,KAAQ,WAEV,CACE,aAAgB,QAChB,KAAQ,cACR,KAAQ,UAGZ,KAAQ,gBACR,QAAW,CACT,CACE,aAAgB,UAChB,KAAQ,GACR,KAAQ,YAGZ,gBAAmB,OACnB,KAAQ,WACR,UAAY,GAEd,CACE,OAAU,CACR,CACE,aAAgB,UAChB,KAAQ,gBACR,KAAQ,WAEV,CACE,aAAgB,SAChB,KAAQ,OACR,KAAQ,UAEV,CACE,aAAgB,UAChB,KAAQ,IACR,KAAQ,WAEV,CACE,aAAgB,UAChB,KAAQ,SACR,KAAQ,WAEV,CACE,aAAgB,SAChB,KAAQ,SACR,KAAQ,UAEV,CACE,aAAgB,UAChB,KAAQ,cACR,KAAQ,WAEV,CACE,aAAgB,UAChB,KAAQ,cACR,KAAQ,WAEV,CACE,aAAgB,QAChB,KAAQ,cACR,KAAQ,UAGZ,KAAQ,YACR,QAAW,GACX,gBAAmB,aACnB,KAAQ,YAEV,CACE,OAAU,CACR,CACE,aAAgB,UAChB,KAAQ,YACR,KAAQ,YAGZ,KAAQ,qBACR,QAAW,GACX,gBAAmB,aACnB,KAAQ,YAEV,CACE,OAAU,CACR,CACE,aAAgB,UAChB,KAAQ,aACR,KAAQ,YAGZ,KAAQ,YACR,QAAW,GACX,gBAAmB,aACnB,KAAQ,YAEV,CACE,OAAU,CACR,CACE,aAAgB,UAChB,KAAQ,SACR,KAAQ,YAGZ,KAAQ,kBACR,QAAW,CACT,CACE,aAAgB,UAChB,KAAQ,GACR,KAAQ,YAGZ,gBAAmB,OACnB,KAAQ,WACR,UAAY,GAEd,CACE,OAAU,CACR,CACE,aAAgB,UAChB,KAAQ,SACR,KAAQ,YAGZ,KAAQ,kBACR,QAAW,CACT,CACE,aAAgB,UAChB,KAAQ,GACR,KAAQ,YAGZ,gBAAmB,OACnB,KAAQ,WACR,UAAY,IAKVC,GAAU,WAAO,IACbvB,EAAakB,KAAblB,SACR,OAAOwB,mBAAQ,kBAAM,IAAIC,KAAKzB,KAAW,CAACA,KAItC0B,GAAgB,uCAAG,WAAOzF,EAC9B0F,EACAlC,EAAiBmC,EAAuBC,EAAcC,EAAWC,EAAgBC,EAAgBC,EAAWC,EAAUC,GAF/F,SAAAnI,EAAA,+EAGd,IAAIoI,SAAQ,SAACC,EAASC,GAExBX,EAAKY,gBAAwBC,WAAWtC,YACxB,IAAIyB,EAAKc,IAAIC,SAASpB,GAAyB,YAAP7B,EAAoBkD,IAAGC,qBAAuBD,IAAGE,sBAC/FC,QAAQC,UAAUnB,EAAeC,EAAMC,EAAGC,EAAQC,EAAQC,EAAGC,EAAGC,GAAGa,KAAK,CAACC,KAAMhH,IAAUiH,GAAG,kBAAmBb,GACzHa,GAAG,QAASZ,OARI,2CAAH,0EAkChBa,GAAmB,uCAAG,WAAOxB,EAAYlC,GAAnB,SAAAzF,EAAA,+EAEnB,IAAIoI,SAAQ,SAACC,EAASC,GAetBX,EAAKY,gBAAwBC,WAAWtC,YAC1CyB,EAAKY,gBAAwBC,WAC7BY,QACA,CACCC,OAAQ,0BACRC,OAnBc,CAChB,CACEjD,QAAS,OACLkD,UAAW,sBACXC,eACI,CACIC,KAAM,MACNxD,OAAQ,MACRyD,SAAU,IAElBC,QAAS,CAAC,qCACVC,kBAAmB,CAAC,4BAUvB,SAACC,EAAUC,GACZ9I,QAAQ+I,IAAI,oBAAqBF,EAAKC,GAClCD,GAAO,UAAWC,EAClBxB,EAAO,SAEPD,EAAQ,eA7BQ,2CAAH,wDAoCnB2B,GAAoB,uCAAG,WAAOrC,EAAYlC,GAAnB,SAAAzF,EAAA,+EACpB,IAAIoI,SAAQ,SAACC,EAASC,GAMtBX,EAAKY,gBAAwBC,WAAWtC,YAC1CyB,EAAKY,gBAAwBC,WAC7BY,QACA,CACCC,OAAQ,6BACRC,OAVc,CAChB,CACEjD,QAAS,UAUR,SAACwD,EAAUC,GACZ9I,QAAQ+I,IAAI,oBAAqBF,EAAKC,GAClCD,GAAO,UAAWC,EAClBxB,EAAO,SAEPD,EAAQ,eAnBS,2CAAH,wDA0BpB4B,GAAc,uCAAG,WAAOhI,EAC5B0F,EACAlC,EAAiBmC,EAAuBG,EAAgBC,GAFnC,SAAAhI,EAAA,+EAId,IAAIoI,SAAQ,SAACC,EAASC,GAC3B,GAAKX,EAAKY,gBAAwBC,WAAWtC,WACxB,IAAIyB,EAAKc,IAAIC,SAASpB,GAAyB,YAAP7B,EAAoBkD,IAAGC,qBAAuBD,IAAGE,sBAChFC,QAAQoB,UAAUtC,EAAeI,EAAQ,KAAKD,EAAOoC,SAAS,KAAKnB,KAAK,CAACC,KAAMhH,IAAUiH,GAAG,kBAAmBb,GACxIa,GAAG,QAASZ,OARE,2CAAH,gEAmCP8B,GAAW,WACtB,IAAM3E,EAAQ2B,YAAYC,MACpBM,EAAOJ,KAOb,MAAO,CAAE8C,SANQtL,uBAAY,WACvB4I,GA1Ha,SAACA,EAAYlC,GAChCzE,QAAQ+I,IAAI,yBAA0BtE,GAC7BkC,EAAKY,gBAAwBC,WAAWtC,YAC1CyB,EAAKY,gBAAwBC,WAC7B8B,UAAU,CACTjB,OAAQ,oBACRC,OAAQ,CACNiB,KAAM,QACNC,QAAS,CACPvI,QAAgB,YAAPwD,EAAoBkD,IAAG8B,kBAAoB9B,IAAG+B,kBACvDzE,OAAQ,QACRyD,SAAU,GACViB,MAAO,gEAGV,SAACd,EAAUC,GACZ9I,QAAQ+I,IAAI,oBAAqBF,EAAKC,MA2G1Cc,CAAajD,EAAMlC,KAEpB,CAACkC,EAAMlC,MAKCoF,GAAY,SAACC,GACxB,IAAMrF,EAAQ2B,YAAYC,MADoB,EAElB7B,GAAUC,GAA9BhE,EAFsC,EAEtCA,QAASsE,EAF6B,EAE7BA,OACX4B,EAAOJ,KACPwD,EAAWC,cAkBjB,MAAO,CAAEC,UAjBSlM,sBAAW,sBAAC,8BAAAiB,EAAA,0DACxB2H,EADwB,6BAGV,YAAXmD,EAHqB,gCAIKd,GAAqBrC,EAAMlC,GAJhC,cAId1E,EAJc,yBAKb,CAAC8I,IAAI,KAAMqB,OAAOnK,IALL,wBAOKoI,GAAoBxB,EAAMlC,GAP/B,eAOd1E,EAPc,yBAQb,CAAC8I,IAAI,KAAMqB,OAAOnK,IARL,mFAWjB,CAAC8I,IAAI,EAAD,GAAQqB,OAAO,OAXF,iCAcrB,CAACrB,IAAI,CAACsB,MAAM,EAAGC,QAAQ,wBAAyBF,OAAO,OAdlC,0DAe3B,CAACzJ,EAASkG,EAAM5B,EAAQN,EAAOsF,MA6EvBM,GAAgB,WAC3B,IAAMN,EAAWC,cACXvF,EAAQ2B,YAAYC,MAFO,EAGL7B,GAAUC,GAA9BhE,EAHyB,EAGzBA,QAASsE,EAHgB,EAGhBA,OACX4B,EAAOJ,KAkBb,MAAO,CAAE+D,cAjBavM,sBAAW,sBAAC,sBAAAiB,EAAA,sDAChCgB,QAAQuK,MAAM,UADkB,2CAe/B,CAAC9J,EAASkG,EAAM5B,EAAQN,EAAOsF,MAcvBS,GAAoB,WAAO,IAC9B/J,EAAYyF,KAAZzF,QACFM,EAAOqF,YAAYqE,MACnBC,EAAmBtE,YAAYuE,MAC7BL,EAAkBD,KAAlBC,cAGR,MAAO,CAAEM,gBAFwB,OAAT7J,GAAiBN,EAAQ+B,gBAAkBzB,EAAKhC,IAE9C2L,mBAAkBG,aAAcP,IAG/CQ,GAAkB,SAACC,GAC9B,IAAMhB,EAAWC,cACjBgB,qBAAU,WAER,OADAjB,EAASkB,aAAgBF,IAClB,WACLhB,EAASkB,cAAgB,OAE1B,CAAClB,EAAUgB,K,mBCvxBHG,GAAuB,SAACC,GACnC,IAAMpB,EAAWC,cACXoB,EAAWhF,YAAYC,MACvBgF,EAAajF,YAAYkF,KAC/BN,qBAAU,WACR,IACMO,EADiBC,YAAkBL,GACHM,gBAAgBL,GAClDM,EAAgC,KAChCC,YAAiBN,GACnBK,EAAaH,EAAeK,QACnBC,YAAiBR,GAC1BK,EAAaH,EAAeO,QAE5B9L,QAAQC,MAAR,0BAAiCyL,IAE/BA,GAAcL,IAAeK,GAC/B3B,EAASgC,YAAcL,MAExB,CAAC3B,EAAUqB,EAAUD,EAAUE,KAGvBW,GAAoB,SAAC7L,GAChC,IAAM4J,EAAWC,cACXiC,EAAY7F,YAAY8F,MAC9BlB,qBAAU,WACJ7K,IAAO8L,GACTlC,EAASoC,aAAehM,MAEzB,CAAC4J,EAAU5J,EAAI8L,K,8FC7EPG,GAAkBpR,YAAO,MAAPA,CAAc,CAC3CC,UAAW,GACXgC,UAAW,W,oBCAPoP,GAAYvS,YAAW,CAC3BE,KAAM,CACJsS,WAAY,aAEdC,QAAS,CACPD,WAAY,OACZlS,SAAU,SACVoS,OAAQ,EACR,UAAW,CACTA,OAAQ,KAGZC,eAAgB,CACdD,OAAQ,OACR,UAAW,CACTA,OAAQ,WAKRE,GAAa,GAAPC,IAgBNC,GAAqD,SAAC,GAGrD,IAFLC,EAEI,EAFJA,QACAzQ,EACI,EADJA,SAEM3B,EAAU4R,KADZ,EAEoBS,oBAAS,GAF7B,mBAEGC,EAFH,KAESC,EAFT,KAGEC,EAAalP,uBAAY,WAC7BiP,GAASD,KACR,CAACA,IACJ,IAAKF,EACH,OAAO,mCAAGzQ,IAEZ,IAAM7B,EAAYM,IAAWJ,EAAQ8R,QAAT,eACzB9R,EAAQgS,eAAiBM,IAE5B,OACE,qBAAKxS,UAAWA,EAAW2S,QAASD,EAApC,SACG7Q,KAKD+Q,GAAsB,WAC1B,IAAMC,EAAO,IAAIC,QACjB,OAAO,SAACC,EAAWlP,GACjB,GAAIA,GAAwB,WAAfA,EAAMmL,KACjB,MAAO,SAET,GAAqB,kBAAVnL,GAAgC,OAAVA,EAAgB,CAC/C,GAAIgP,EAAKG,IAAInP,GACX,OAEFgP,EAAKI,IAAIpP,GAEX,OAAOA,IAIEqP,GAAuC,SAAC,GAM9C,IALLC,EAKI,EALJA,GACAC,EAII,EAJJA,MACAC,EAGI,EAHJA,QACArB,EAEI,EAFJA,QACAnQ,EACI,EADJA,SAEM3B,EAAU4R,KACVwB,EAASH,GAAMtR,EACf2Q,GAAQL,IAAOiB,EACfG,EAAU/P,uBAAY,SAACC,GAC3BA,EAAM+P,oBACL,IACH,OAAOhB,IAASa,EACd,cAAC,GAAD,CAAcf,UAAWN,EAAzB,SACE,qBAAKhS,UAAWE,EAAQT,KAAMkT,QAASY,EAAvC,SACGlL,KAAKC,UAAUgL,EAAQV,KAAuB,OAGjD,MAGOa,GAA8C,SAACxT,GAAD,OACzD,cAAC,GAAD,CAAOkT,GAAIlT,KCrFAyT,GAAe,SAAC9C,EAA0B+C,GACrD,IAAM/H,EAAmBC,YAAYC,MADmC,EAElC7B,GAAU2B,GAFwB,KAEhEnB,SAFgE,EAEtDgB,gBACCI,YAAYkF,KAOPwB,mBANO,CAC7BqB,KAAM,GACNC,KAAM,GACNC,KAAM,IACNC,QAAS,OAR6D,mBAUjEC,EAViE,aAW1CzB,oBAAS,IAXiC,mBAWjE0B,EAXiE,UAcxE,MAAO,CAAED,OAAMC,Y,WCxBJC,I,QAAsB,CACjCC,mBAAmB,EACnBC,mBAAmB,EACnBC,eAAe,EACfC,yBAA0B,CAAC,IAAK,OCHrBC,GAA6D,SAAC,GAIpE,IAHLC,EAGI,EAHJA,aACAC,EAEI,EAFJA,OACGxU,EACC,yCACEyU,EAAiBF,EAAY,WAAOA,GAAiBC,EAC3D,OACE,cAAC,KAAD,2BACMP,IADN,IAEES,YAAY,OACZF,OAAQC,GACJzU,K,6HCJG2U,GAA4BrV,aAAW,SAACC,GAAD,MAAY,CAC9DqV,YAAa,CACX7S,QAAS,OACTC,eAAgB,gBAChBC,WAAY,UACZ4S,aAAa,aAAD,OAAetV,EAAMuV,QAAQC,UAE3CC,aAAc,CACZC,SAAU,EACVnU,YAAa,GACbE,aAAc,GACdyB,UAAW,UAEbyS,MAAO,GACPC,qBAAsB,CACpBF,SAAU,EACVlT,QAAS,OACTE,WAAY,SACZD,eAAgB,UAElBoT,mBAAoB,CAClBhT,SAAU,IAEZiT,YAAa,CACXC,MAAO/V,EAAMuV,QAAQS,KAAK,MAE5BC,kBAAmB,CACjBpT,SAAU,IAEZqT,WAAY,CACVH,MAAO/V,EAAMuV,QAAQS,KAAK,UASjBG,GAA6D,SAAC,GAMpE,IALLR,EAKI,EALJA,MACAS,EAII,EAJJA,QACAC,EAGI,EAHJA,OACA7V,EAEI,EAFJA,UACA6B,EACI,EADJA,SAEMC,EAAS8S,KAYf,OACE,eAAC,KAAD,CACEkB,mBAAiB,EACjB9V,UAAWM,IAAWN,EAAW8B,EAAO+S,aAF1C,UAIE,qBAAK7U,UAAW8B,EAAO2T,kBAAvB,SACGI,EACC,cAACE,GAAA,EAAD,CACEC,aAAW,OACXhW,UAAW8B,EAAO4T,WAClB/C,QAhBS,WACbkD,GACFA,KAWI,SAKE,cAAC,KAAD,CAAeI,SAAS,cAExB,OAELd,GACC,qBAAKnV,UAAW8B,EAAOmT,aAAvB,SACE,cAACiB,GAAA,EAAD,CAAYrV,QAAQ,QAAQb,UAAW8B,EAAOqT,MAA9C,SACGA,MAINtT,GACC,qBAAK7B,UAAW8B,EAAOsT,qBAAvB,SAA8CvT,IAEhD,qBAAK7B,UAAW8B,EAAOuT,mBAAvB,SACGO,EACC,cAACG,GAAA,EAAD,CACEC,aAAW,QACXhW,UAAW8B,EAAOwT,YAClB3C,QA1CU,WACdiD,GACFA,EAAQ,GAAI,kBAqCR,SAKE,cAAC,KAAD,CAAWK,SAAS,cAEpB,WAMCE,GAA8C,SAAC,GAMrD,IALLhB,EAKI,EALJA,MACAiB,EAII,EAJJA,KACAR,EAGI,EAHJA,QACA/T,EAEI,EAFJA,SACAnC,EACI,EADJA,SAEA,OACE,eAAC2W,GAAA,EAAD,CAAQT,QAASA,EAASQ,KAAMA,EAAM1W,SAAUA,EAAhD,UACE,cAAC,GAAD,CAAkBkW,QAASA,EAAST,MAAOA,IAC1CtT,MAKDyU,GAAwB/W,aAAW,SAACC,GAAD,MAAY,CACnD+W,SAAU,CACR3W,SAAU,WACVsB,IAAK,EACLsV,MAAO,EACPpV,OAAQ,EACRqV,KAAM,EACNC,OAAQ,QAEVC,WAAY,CACV/W,SAAU,WACVsB,IAAK,EACLsV,MAAO,EACPpV,OAAQ,EACRqV,KAAM,GAERG,MAAO,CACLhX,SAAU,WACVsB,IAAK,IACLE,OAAQ,EACRuB,MAAO,OACPX,QAAS,OACT6U,cAAe,cAQbrD,GAAkB,SAAC/P,GACvBA,EAAM+P,mBAGKsD,GAAsBrW,YAAO,MAAPA,CAAc,CAC/CuB,QAAS,OACT6U,cAAe,SACf3B,SAAU,EACVjT,eAAgB,kBAGL8U,GAAsBtW,YAAO,MAAPA,CAAc,IACpCuW,GAAsBvW,YAAO,MAAPA,CAAc,IAEpCwW,GAAqD,SAAC,GAM5D,IALLb,EAKI,EALJA,KACAR,EAII,EAJJA,QACAT,EAGI,EAHJA,MACAnV,EAEI,EAFJA,UACA6B,EACI,EADJA,SAEMC,EAASwU,KACTjW,EAAoBC,IAAWN,EAAW8B,EAAO8U,OAEvD,OACE,cAACM,GAAA,EAAD,CAAUlX,UAAW8B,EAAOyU,SAAUH,KAAMA,EAAMzD,QAASiD,EAA3D,SACE,eAAC,EAAD,CAAiB5V,UAAWK,EAAmBsS,QAASa,GAAxD,UACG2B,GAAS,cAAC,GAAD,CAAkBS,QAASA,EAAST,MAAOA,IACpDtT,QCtLIsV,GAA0C,CACrDC,SAHe,OAMJC,GAA0C,CACrDC,QAAQ,EACRF,SARe,MASfG,aAAc,SAGHC,GAAuB,SAACC,GACnC,IAAMC,EAAa,IAAIrS,KAAKoS,GAG5B,MAAO,CAAEE,KAFID,EAAWE,mBAAmBC,UAAUC,SAAUX,IAEhDY,KADFL,EAAWM,mBAjBD,QAiBsCX,MCiFlDY,IAlDwBxX,YAAO,MAAPA,CAAc,CACjDC,UAAW,EACXwX,aAAc,IAgDsD,SAAC,GAGhE,IAAD,IAFJC,cAEI,MAFK,GAEL,MADJC,kBACI,SACE5Y,EAAQ6Y,eADV,EAEiBC,cAAZC,EAFL,oBAMJ,OAHA9H,qBAAU,WACR8H,EAASJ,KACR,CAACI,EAAUJ,IAEZ,mCACE,cAAC,KAAD,UACE,cAAC,KAAD,CACEC,WAAYA,EACZ7C,MAAO/V,EAAMuV,QAAQyD,QAAQC,KAF/B,SAIE,cAAC,KAAD,CAAuBjO,OAAQ2N,YA2BnCO,GAAmBjY,YAAO,MAAPA,EAAc,kBAAgB,CACrDwV,SAAU,GACV0C,WAAY,EACZjY,UAAW,EACXgC,UAAW,SACX6S,MALqC,EAAG/V,MAK3BgC,aAAaoX,cAUfC,GAAuD,SAAC,GAO9D,IAAD,IANJ1D,aAMI,MANI,QAMJ,EALJiB,EAKI,EALJA,KAKI,IAJJ+B,cAII,MAJK,GAIL,MAHJW,kBAGI,MAHS,GAGT,EAFJC,EAEI,EAFJA,SACAlX,EACI,EADJA,SAEA,OACE,eAAC,GAAD,CAAauU,KAAMA,EAAMjB,MAAOA,EAAOzV,SAAS,KAAhD,UACE,eAAC,EAAD,WACE,cAACgZ,GAAD,UACE,cAAC,KAAD,CAAazC,SAAS,UAAUV,MAAM,cAExC,cAACW,GAAA,EAAD,CAAYrV,QAAQ,KAAKmY,MAAM,SAASC,cAAY,EAApD,SACGd,IAEH,cAACjC,GAAA,EAAD,CACEX,MAAM,gBACNyD,MAAM,SACNC,cAAY,EACZC,UAAU,MAJZ,SAMGrX,OAGL,cAAC,EAAD,CAAcD,eAAa,EAA3B,SACE,cAAC,KAAD,UACE,cAAC,KAAD,CAAc+Q,QAASoG,EAAvB,SAAkCD,YAO/BK,GAA6D,SACxElZ,GADwE,OAGxE,cAAC,GAAD,yBACEkY,OAAO,mBACPW,WAAW,+BACP7Y,GAHN,aAKE,6EAISmZ,GAA8D,SACzEnZ,GADyE,OAGzE,cAAC,GAAD,yBACEkY,OAAO,wBACPW,WAAW,gBACP7Y,GAHN,aAKE,iIAEyB,IACvB,cAAC,KAAD,CAAMoZ,UAAQ,EAACC,KAAMC,IAAMC,SAAUjE,MAAM,UAAUkE,UAAU,QAA/D,+BAHF,WAkDSC,GAA4D,SAAC,GAWnE,IAAD,IAVJvE,aAUI,MAVI,UAUJ,EATJiB,EASI,EATJA,KASI,IARJ+B,cAQI,MARK,GAQL,MAPJwB,sBAOI,MAPa,GAOb,EANJC,EAMI,EANJA,aACAC,EAKI,EALJA,mBAKI,IAJJC,6BAII,MAJoB,GAIpB,EAHJC,EAGI,EAHJA,oBACAC,EAEI,EAFJA,0BACAnY,EACI,EADJA,SAEMoY,EAAiBL,GAAgBD,EACvC,OACE,eAAC,GAAD,CAAavD,KAAMA,EAAMjB,MAAOA,EAAOzV,SAAS,KAAhD,UACE,eAAC,EAAD,WACE,cAACgZ,GAAD,UACE,cAAC,KAAD,CAAkBzC,SAAS,UAAUV,MAAM,cAE7C,cAACW,GAAA,EAAD,CAAYrV,QAAQ,KAAKmY,MAAM,SAASC,cAAY,EAApD,SACGd,IAEH,cAACjC,GAAA,EAAD,CACEX,MAAM,gBACNyD,MAAM,SACNC,cAAY,EACZC,UAAU,MAJZ,SAMGrX,OAGL,eAAC,EAAD,CAAcD,eAAa,EAA3B,UACE,cAAC,KAAD,UACE,cAAC,KAAD,CACEf,QAAQ,OACR0U,MAAM,UACN5C,QAASoH,EACTG,SAAUF,EAJZ,SAMGF,MAGJG,GACC,cAAC,KAAD,UACE,cAAC,KAAD,CAActH,QAASiH,EAAcM,SAAUL,EAA/C,SACGF,aAeFQ,GAA0E,SAAC,GAKjF,IAJLzT,EAII,EAJJA,QACA0T,EAGI,EAHJA,oBACAxJ,EAEI,EAFJA,SACG3Q,EACC,4DACJ,OACE,cAAC,GAAD,yBACEkY,OAAO,6BACP2B,sBAAsB,mBAClB7Z,GAHN,aAKE,kHAGE,cAAC,KAAD,CACEoZ,UAAQ,EACRC,KAAMc,EACN7E,MAAM,UACNkE,UAAU,QAJZ,SAMGlQ,EAAY7C,EAAS,KAT1B,gHAYmDkK,EAZnD,iDCvUOyJ,GACF,oEADEA,GAEP,mDAFOA,GAGO,kDAUPC,GAAiB7Z,YAAO,MAAPA,CAAc,CAC1Cb,SAAU,aA2BC2a,GAA6C,WACxD,OACE,0MCbSC,GAA2D,SAAC,GAMlE,IALL5J,EAKI,EALJA,SACA5B,EAII,EAJJA,KACA9E,EAGI,EAHJA,MACAxD,EAEI,EAFJA,QACA+T,EACI,EADJA,WAEQjQ,EAAWmB,KAAXnB,OAEFkQ,GADiBzJ,YAAkBL,GACf+J,YAAezQ,IAHrC,EAMsBwJ,KAAlBM,EANJ,EAMIA,KAAMC,EANV,EAMUA,QANV,EAO6C2G,aAAmB,CAClE5G,OACAhF,SAFM6L,EAPJ,EAOIA,SAA0BC,GAP9B,EAOcC,eAPd,EAO8BD,YAK3BhM,EAAYD,KAAZC,SAGDkM,EACJhM,IAASiM,KAAO9W,KAAOyM,EAAWsK,YAAmBtK,GACjDuK,EAAuBlK,YAAkB+J,GACzCI,EAA4BT,YAChCQ,EAAqBE,aAGjBC,EAAWC,aAAe,CAC9BC,QAASxH,EAAKJ,KAAO,IACrB6H,WAAYzH,EAAKH,KAAO,IACxBmH,iBACA9Q,UAI2BwR,aADX,MAEUzK,YAC1ByJ,EAAkBzM,gBAGpB,OAAIzD,IAAW/C,EAAaiE,UACnB,KAGLuI,EACK,cAAC,KAAD,IAIP,qCACE,cAAC,GAAD,CAAOd,GAAI,CAAEvC,WAAUoD,UACvB,cAAC,KAAD,CACE/P,MAAM,kBACN0X,aAAcL,EAASM,SACvB/X,MACE,cAAC,GAAD,CACEA,MAAOgX,EACPrG,aAAc,IACdqH,aAAc,MAIpB,cAAC,KAAD,CACE5X,MAAK,UAAKmX,EAA0BU,KAA/B,cACLH,aAAcL,EAASS,oBACvBlY,MACE,cAAC,GAAD,CACEA,MAAOiX,EACPtG,aAAc4G,EAA0BY,UAI9C,cAAC,KAAD,CACE/X,MAAK,gBAAWyW,EAAkBsB,MAA7B,QACLL,aAAcL,EAASW,oBACvBpY,MAAO,iBAER6C,GACC,cAAC,KAAD,CACEzC,MAAM,oBACN0X,aAActB,GACdxW,MAAO,cAAC,KAAD,CAAoBqY,WAAS,EAA7B,SAA+BxV,OAGxC+T,GACF,cAAC,KAAD,UACI,cAAC,KAAD,CACE5Z,QAAQ,YACR0U,MAAM,YACN5C,QAAS7D,EAHX,6C,8BCjFGqN,GAAoB,WAC/B,IAAMC,EAXuB,WAC7B,IAAM/U,EAAWgV,cACjB,OAAIhV,EAASiV,SAASvR,QAAQ7G,IAAMC,OAAS,EACpC,OACEkD,EAASiV,SAASvR,QAAQ7G,IAAME,UAAY,EAC9C,OAEF,KAIMmY,GACPrS,EAAQ2B,YAAY2Q,MACpB1L,EAAajF,YAAYkF,KACzB0L,EAAe5Q,YAAY6Q,MAC3BC,EAAkB9Q,YAAY+Q,MACpC,GACE1S,IAAU2S,IAAYC,MACd,MAARV,GACA9K,YAAiBR,GAEjB,MAAO,GAET,IAAMiM,EACK,SAATX,EAAkBY,YAAiBP,GAAgBE,EAErD,OADuB1L,YAAkB8L,GACnBE,YAAcC,IAAWC,O,gCCUpCC,GAAW,SAACC,GACvB,MAAiB,YAAbA,EACKvW,IAAIwW,0BACDxW,IAAIyW,sBAELC,GAAiB,uCAAG,WAAOC,EAAqBJ,GAA5B,iBAAA5Y,EAAA,6DAC3BiZ,EAAMN,GAASC,GAAa,YAAcI,EAC1CE,EAAW,CAAE7P,OAAQ,OAFM,kBAIxB8P,KAAMF,EAAKC,GAAU9U,MAAK,SAAA1C,GAAG,OAAIA,EAAI0X,WAJb,2CAAH,wDAOjBC,GAAW,uCAAG,WAAOL,EAAqBJ,GAA5B,iBAAA5Y,EAAA,6DACrBiZ,EAAMN,GAASC,GAAa,aAAeI,EAC3CE,EAAW,CAAE7P,OAAQ,OAFA,kBAGlB8P,KAAMF,EAAKC,GAAU9U,MAAK,SAAA1C,GAAG,OAAIA,EAAI0X,WAHnB,2CAAH,wDAMXE,GAAgB,uCAAG,WAAON,EAAqBnR,EAAcC,EAAW8Q,GAArD,iBAAA5Y,EAAA,6DAC1BiZ,EAAMN,GAASC,GAAa,SAAWI,EAAc,IAAMnR,EAAO,IAAMC,EAC5E9G,QAAQ+I,IAAIkP,GACRC,EAAW,CAAE7P,OAAQ,OAHK,kBAIvB8P,KAAMF,EAAKC,GAAU9U,MAAK,SAAA1C,GAAG,OAAIA,EAAI0X,WAJd,2CAAH,4DAOhBG,GAAO,uCAAG,WAAO1R,EAAc+Q,GAArB,iBAAA5Y,EAAA,6DACjBiZ,EAAMN,GAASC,GAAa,SAAW/Q,EACvCqR,EAAW,CAAE7P,OAAQ,OAFJ,kBAGd8P,KAAMF,EAAKC,GAAU9U,MAAK,SAAA1C,GAAG,OAAIA,EAAI0X,WAHvB,2CAAH,wDCPPI,GAA4D,SAAC,GAEnE,IADLpI,EACI,EADJA,OAEAtF,IAAgB,GAChB,IJ5EA2N,EI4EM1O,EAAWC,cACXtM,EAAUC,cAHZ,EAIyCuI,KAArCnB,EAJJ,EAIIA,OAAQiB,EAJZ,EAIYA,gBAAiBvF,EAJ7B,EAI6BA,QAJ7B,EAKgDqM,oBAAS,GALzD,mBAKG4L,EALH,KAKuBC,EALvB,KAMIxN,EAAa/E,YAAYwS,MAAzBzN,SANJ,EAUA/E,YAAYyS,MAFdpU,EARE,EAQFA,MACcrE,EATZ,EASFL,WAAcK,UAEV0Y,EAAU1S,YAAYkF,KACtByN,EAAsB3S,YAAY4S,MAZpC,EAasB/K,GAAa9C,EAAUqK,KAAO9W,MAMlDua,GAnBF,EAaI1K,KAbJ,EAaUC,QAGahD,YAAkBL,GACrC+N,SAEuBhE,YAAezQ,IACxC0U,EAAuC3N,YAC3CyN,EAAuBzQ,gBAEnB4Q,GJjGNX,EImGEU,EJlGE,CACJE,YAAY,uBAAD,OIgGTJ,EJhG8C5C,KAArC,qFAAsHoC,EAA0BlC,MAAhJ,OImGL+C,EAAiB/B,YAAiBpM,GA3BpC,GA6ByBK,YAAkB8N,GAEXxM,oBAAS,IA/BzC,mBA+BGyM,EA/BH,KA+BeC,EA/Bf,OAgC0B1M,oBAAS,GAhCnC,mBAgCG2M,EAhCH,KAgCYC,EAhCZ,KAiCEC,GAAgBJ,GAAcE,EAC9BG,EAA0B7b,uBAAY,SAACC,GAC3C0b,GAAW,GACXF,EAAcxb,EAAM6P,OAAOgM,WAC1B,KF5GwB,SAACC,GAAmC,IAAnBC,EAAkB,uDAAR,IAChDhQ,EAAWC,cACjBgB,qBAAU,WAOR,OANI8O,IACF/P,EAASiQ,cAAgB,IACzBC,YAAW,WACTlQ,EAASiQ,cAAgB,MACxBD,IAEE,WACLhQ,EAASiQ,cAAgB,OAE1B,CAACjQ,EAAU+P,EAAOC,IEiGrBG,CAAcP,GAEd,IAAMzX,EAAKsE,mBACT,kBACE2T,aAAsB,CACpBhP,SAAUA,EACViP,YAAa3Z,EACb6Y,eAAgB/B,YAAiBpM,GACjCkP,oBAAqB5V,EACrBuT,YAAavX,EACbqY,QAASA,EACTwB,SAAUvB,MAEd,CAAC5N,EAAU1K,EAASgE,EAAOqU,EAASC,IAEhCwB,EAAUC,aAA2BtY,GACrCuY,EAAuBlB,GAAcgB,EAErCG,EAAgB3c,uBAAY,WAC5BgH,IAAW/C,EAAaiE,WAC1ByT,GAAW,GAETf,IADE8B,KAMJf,GAAW,GACXf,GAAsB,GACtB5O,EAAS4Q,cAAsB,OAEhC,CAAC5Q,EAAUhF,EAAQ0V,IAEhBG,GAAkB7c,sBAAW,uCACjC,WAAOmE,GAAP,eAAAlD,EAAA,sEAEwB+Y,GAAkB7V,EAAG8V,YAAa9V,EAAG2Y,aAF7D,OAGuB,IADfC,EAFR,QAGa/V,SACT7C,EAAG6Y,eAAiBD,EAAQ5Q,OAE5BH,EAASoC,aAAejK,EAAG/B,KAC3B4J,EAASiR,aAAe9Y,IACxBxE,EAAQQ,KAAK,CACX2Y,SAAUpY,IAAMwc,iBAChBC,OAAQ,IAAMC,aAAoBjZ,GAClCkZ,MAAO,CACLC,QAAS,CAAEC,OAAO,OAZ1B,2CADiC,sDAoBjC,CAACvR,EAAUrM,EAAS+C,EAASL,IA3F3B,GAmGwC0M,oBAAS,GAnGjD,qBAmGGyO,GAnGH,MAmGmBC,GAnGnB,MA4GJ,OAPAxQ,qBAAU,WACJ0N,IAAuB6C,KACzBC,IAAkB,GAClBZ,GAAgB1Y,GAAIuZ,aAErB,CAACb,GAAiBlC,EAAoBxW,EAAIqZ,KAG3C,qCACE,eAACjf,EAAD,WACE,cAACI,EAAD,UACE,cAAC4T,GAAA,EAAD,CAAYpD,QAASkD,EAArB,SACE,cAAC,KAAD,QAGJ,cAACpT,EAAD,6BACA,cAACH,EAAD,OAEF,eAAC,EAAD,CAAcV,eAAa,EAA3B,UACE,cAACsU,GAAA,EAAD,CAAYrV,QAAQ,QAAQoY,cAAY,EAAxC,qBAGA,cAAC,KAAD,CACEhV,MAAM,UACN0X,aAActB,GACd8G,SAAUvQ,EAAW,OAASK,YAAkBL,GAAUkL,OAC5D,cAAC,KAAD,CACE7X,MAAM,KACN0X,aAActB,GACdxW,MAAO6a,EAAuB5C,OAEhC,cAAC,KAAD,CACE7X,MAAM,oBACN0X,aAActB,GACdxW,MACE,cAAC,KAAD,CAAoBqY,WAAS,EAA7B,SAA+BvU,EAAG8V,gBAGtC,cAAC,KAAD,IACA,cAACvH,GAAA,EAAD,CAAYrV,QAAQ,QAAQoY,cAAY,EAAxC,kBAGA,cAAC,GAAD,CACE/O,MAAOA,EACP0G,SAAUA,EACV5B,KAAMiM,KAAO9W,KACbsW,YAAY,OAGhB,cAAC2G,GAAA,EAAD,IACA,eAAC,EAAD,CAAc9f,QAAM,EAACK,YAAU,EAACC,eAAa,EAA7C,UACE,cAACiQ,GAAD,UACE,cAACwP,GAAA,EAAD,CAAa3b,MAAO0Z,EAApB,SACE,cAACkC,GAAA,EAAD,CACEC,QACE,cAACC,GAAA,EAAD,CACElC,QAASN,EACTlb,SAAUub,EACVnR,KAAK,MACLqH,MAAM,YAGVtR,MACE,cAACwd,GAAA,EAAD,CAAWC,QAAQ,MAAMxI,UAAWhD,KAApC,SACE,eAACA,GAAA,EAAD,CACErV,QAAQ,UACR0U,MAAO6J,EAAe,UAAY,cAFpC,oDAI0C,IACvCR,EAAqC5C,MAAO,IAC7C,cAAC2F,GAAA,EAAD,CAAiBxM,MAAO0J,EAAoBC,yBAOxD,cAAC,KAAD,UACE,cAAC,KAAD,CACEnM,QAASwN,EACTjG,UAAW8E,GAAcb,IAAuB1S,EAFlD,SAIIA,EAEE0S,EACA,gBACA,UAHA,wBAOV,cAAC,GAAD,CAAOhL,GAAI,CAAExL,Y,0ECnPNia,GAAmB,SAACC,GAC/B,IAAMrS,EAAWC,cACXqS,EAAcjW,YAAY2Q,MAF0C,EAG3B7Q,KAAvCF,EAHkE,EAGlEA,gBAAiBhB,EAHiD,EAGjDA,SAAUvE,EAHuC,EAGvCA,QAC7B4K,EAAajF,YAAYkF,KACzBgR,EAAoBpH,YAAemH,GACnCE,EAASC,KAA0BF,EAAkBG,WAE3DzR,qBAAU,WACHhF,GACH+D,EAAS2S,kBAEV,CAAC3S,EAAU/D,IAEd,IAAM2W,EAAoB5e,uBACxB,SAACoN,GACC,OACEnG,GACAvE,GACAuF,GAlCmC,SACzCmF,EACAE,EACA5G,GAEA,IAAMmY,EAAiBpR,YAAkBL,GACzC,GAAIyR,EAAenR,gBAAiB,CAClC,IAAMoR,EAAeD,EAAenR,gBAAgBhH,GACpD,OACEoY,EAAajR,UAAYP,GAAcwR,EAAa/Q,UAAYT,EAGpE,OAAO,EAuBDyR,CACE3R,EACAE,EACAiR,EAAkBG,WAGNF,EAAMvX,EAAUqG,GAE3B0R,WAAW5R,EAAU1K,GACrB2C,MAAK,SAAC4Z,GACL,OAAOA,EAAQC,WAAa,OAE7Bna,MAAM9C,QAAQC,OAEVmH,QAAQC,QAAQ,QAG3B,CACEkV,EACA9b,EACA4K,EACArG,EACAgB,EACAsW,EAAkBG,YAItBS,cACE,WACE,GAAKlX,EAAL,CADI,qBAIyBoW,GAJzB,yBAIOe,EAJP,QAKIC,EAAuB3H,YAAmB0H,GAChDR,EAAkBS,GAAsBha,MAAK,SAAC4Z,GAC5B,OAAZA,GAGJjT,EACEsT,aAAmB,CACjBpY,OAAQkY,EACRH,iBATR,2BAA+C,IAJ3C,kCAmBN,IACA,CAACjT,EAAU4S,EAAmB3W,KAIrBsX,GAAkB,SAC7BC,EACAtY,GAEA,IAAMuY,EAAeD,EAASE,MAAK,SAACC,GAAD,OAAWA,EAAMzY,SAAWA,KAC/D,cAAOuY,QAAP,IAAOA,OAAP,EAAOA,EAAcR,SCzFjBW,GAAa,SAACC,GAKlB,MAHW,UAATA,EACIC,OAAOC,OAAOC,KACdF,OAAOC,OAAOE,MAgBhBC,GAAa,CACjB/gB,MAAO,GACPsP,OAAQ,IAGJ0R,GAA2BpkB,aAAW,iBAAO,CACjDqkB,OAAQ,CACNziB,WAAY,EACZE,cAAe,OAIbwiB,GAAyBtkB,aAAW,SAACC,GAAD,MAAY,CACpDC,KAAM,CACJkD,MAAO,OACPmhB,aAActkB,EAAMukB,MAAMD,aAC1BE,OAAO,aAAD,OAAexkB,EAAMgC,aAAayiB,YAE1CC,UAAW,CACTvhB,MAAO,QAETwhB,iBAAkB,CAChBlO,SAAU,IAEZmO,YAAa,CACXpiB,QAAS,cACTC,eAAgB,SAChBC,WAAY,UAEdmiB,SAAUX,GACVY,UAAW,CACTrO,SAAU,IAEZsO,cAAe,CACbtO,SAAU,IAEZwM,QAAS,CACPxM,SAAU,IAEZuO,cAAe,CACbC,cAAe,OACfxO,SAAU,GACV0C,WAAY,GAEd+L,mBAAoB,CAClBzO,SAAU,QAgCD0O,GAAuD,SAAC,GAO9D,IANLtB,EAMI,EANJA,KACAuB,EAKI,EALJA,UAKI,IAJJC,iBAII,SAHJ5gB,EAGI,EAHJA,MACA+e,EAEI,EAFJA,SACG/f,EACC,mEACEnB,EAAS+hB,KACTiB,EAAyBnB,KACzBoB,EAAqB9Y,mBACzB,kBAjG6B,SAAC2Y,GAAD,OAA0C,SACzEI,GAEA,OAAKJ,GAGEA,EAAUK,SAASD,EAAOta,SA2FzBwa,CAAyBN,KAC/B,CAACA,IAEGO,EAAgBlZ,mBACpB,kBAAM,SAACpI,GACL,IAAMuhB,EAzGc,SAAC1a,EAAgB2Y,GAAjB,OACxBD,GAAWC,GAAMH,MAAK,SAAC8B,GAAD,OAAYA,EAAOta,SAAWA,KAwG/B2a,CAAkBxhB,EAAOwf,GADtB,EAjCL,SACnB+B,GAEA,IAAItJ,EAAO,SACPE,EAAQ,SACRsJ,EAAOC,KAMX,OALIH,IACFtJ,EAAOsJ,EAAStJ,KAChBE,EAAQoJ,EAASpJ,MACjBsJ,EAAOF,EAASI,UAEX,CACL1J,OACAE,QACAsJ,QAqBgCG,CAAaL,GAAnCE,EAFY,EAEZA,KAAMxJ,EAFM,EAENA,KAFM,EAEAE,MACpB,OACE,eAAC0J,GAAA,EAAD,CAAK1jB,QAAQ,OAAOE,WAAW,SAASS,MAAM,OAA9C,WACIkiB,GACA,cAACa,GAAA,EAAD,CAAK/iB,MAAM,MAAX,SACE,cAACuT,GAAA,EAAD,CAAYrV,QAAQ,QAAQb,UAAW8B,EAAOqiB,iBAA9C,SACGlgB,MAIP,cAACyhB,GAAA,EAAD,CAAK/iB,MAAM,OAAOX,QAAQ,OAAOE,WAAW,SAA5C,SACE,cAACojB,EAAD,CAAMtlB,UAAW8B,EAAOuiB,aAE1B,cAACqB,GAAA,EAAD,CAAKxQ,SAAU,EAAf,SACE,cAACgB,GAAA,EAAD,CAAYrV,QAAQ,QAApB,SACkCib,YAM1C,CAACuH,EAAMvhB,EAAQmC,EAAO4gB,IAExB,OACE,8BACE,eAACc,GAAA,EAAD,yBACE9kB,QAAQ,WACRb,UAAW6kB,OAAYe,EAAY9jB,EAAOoiB,UAC1ChkB,QAAS2kB,EAAYC,OAAyBc,EAC9CC,YAAaV,EACbW,cAAY,EACZC,UAAW,CACTC,aAAc,CACZC,SAAU,SACVC,WAAY,QAEdC,mBAAoB,OAElBljB,GAbN,cAeE,cAACmjB,GAAA,EAAD,CAAepmB,UAAW8B,EAAO0iB,cAAjC,SACE,eAACkB,GAAA,EAAD,CAAK1jB,QAAQ,OAAOE,WAAW,SAASS,MAAM,OAA9C,UACE,cAAC+iB,GAAA,EAAD,CAAK/iB,MAAM,SACX,cAAC+iB,GAAA,EAAD,CAAKxQ,SAAU,EAAf,SACE,cAACgB,GAAA,EAAD,CACErV,QAAQ,WACRb,UAAW8B,EAAO4iB,mBAFpB,SAIY,UAATrB,EAAmB,aAAe,YAGtCL,GAAYA,EAASvZ,OAAS,GAC7B,cAACic,GAAA,EAAD,CAAKxQ,SAAU,EAAGxS,UAAU,QAA5B,SACE,cAACwT,GAAA,EAAD,CACErV,QAAQ,WACRb,UAAW8B,EAAO4iB,mBAFpB,iCAUPtB,GAAWC,GACTgD,OAAOtB,GACPuB,KAAI,YAAkD,IAA/C5b,EAA8C,EAA9CA,OAAQ8a,EAAsC,EAAtCA,SAAoB1J,GAAkB,EAA5B6C,SAA4B,EAAlB7C,MAAME,EAAY,EAAZA,MACxC,OACE,cAACuK,GAAA,EAAD,CAAuB1iB,MAAO6G,EAA9B,SACE,eAACgb,GAAA,EAAD,CAAK1jB,QAAQ,OAAOE,WAAW,SAASS,MAAM,OAA9C,UACE,cAAC+iB,GAAA,EAAD,CAAK/iB,MAAM,OAAO3C,UAAW8B,EAAOsiB,YAApC,SACE,cAACoB,EAAD,CAAUxlB,UAAW8B,EAAOuiB,aAE9B,eAACqB,GAAA,EAAD,CAAKxQ,SAAU,EAAf,UACE,cAACgB,GAAA,EAAD,CAAYrV,QAAQ,QAAQb,UAAW8B,EAAOwiB,UAA9C,SACY,UAATjB,EAAmBvH,EAAOE,IAEnB,UAATqH,GACC,cAACnN,GAAA,EAAD,CACEX,MAAM,gBACNvV,UAAW8B,EAAOyiB,cAFpB,SAIGzI,OAINkH,GACC,cAAC0C,GAAA,EAAD,CACExQ,SAAU,EACVxS,UAAU,QACV1C,UAAW8B,EAAO2gB,QAHpB,SAKE,cAAC,GAAD,CACE5e,MAAOkf,GACLC,EACAtY,WA3BGA,aAyChB8b,GAAuB/lB,YAAO,MAAPA,CAAc,CAChDC,UAAW,KC1MA+lB,GAA+D,SAAC,GAEtE,IADLC,EACI,EADJA,OAEMlX,EAAWC,cAETmB,EAAa/E,YAAYwS,MAAzBzN,SACA1G,EAAU2B,YAAYyS,MAAtBpU,MACAuB,EAAoBE,KAApBF,gBAGFkb,EAAuBnjB,uBAC3B,SAACC,GACC+L,EAASoX,aAAgBnjB,EAAM6P,OAAOzP,UAExC,CAAC2L,IAEGqX,EAAoBrjB,uBACxB,SAACC,GACC+L,EAASsX,aAASrjB,EAAM6P,OAAOzP,UAEjC,CAAC2L,IAGGuN,EAAcC,YAAiBpM,GACrCD,GAAqBoM,GAErB,IAAMzK,GAAU,EAEVyU,EAAiBvjB,uBAAY,WAC5BiI,EAGCib,GACFA,IAHFlX,EAAS4Q,cAAsB,MAMhC,CAAC5Q,EAAUkX,EAAQjb,EAAiB6G,IAEjC0U,EAAuBhK,YAAiBpM,GACjBK,YAAkB+V,GACvCrI,SAER,OACE,qCACE,eAAC,EAAD,CAAc/c,eAAa,EAA3B,UACE,cAAC4kB,GAAD,UACE,cAAC,GAAD,CACEviB,MAAM,OACNof,KAAK,OACLuB,UAAWqC,IACXpjB,MAAO+M,EACP9M,SAAU6iB,MAGd,cAACH,GAAD,UACE,cAAC,GAAD,CACEviB,MAAM,cACNof,KAAK,QACLuB,UAAWsC,IACXrjB,MAAOqG,EACPpG,SAAU+iB,SAIhB,cAACzF,GAAA,EAAD,IACA,cAAC,EAAD,CAAc9f,QAAM,EAACK,YAAU,EAACC,eAAa,EAA7C,SACE,cAAC,KAAD,UACE,cAAC,KAAD,CACE+Q,QAASoU,EACT7M,UAA4B,EAF9B,SAIGzO,EAAkB,OAAS,2B,gEC1E3B0b,GAAwB5nB,aAAW,SAACC,GAAD,MAAY,CAC1DC,KAAM,CACJkD,MAAO,KAETykB,KAAM,CACJC,QAAS,IAEXC,OAAQ,CACNtlB,QAAS,OACTC,eAAgB,gBAChBC,WAAY,UACZ4S,aAAa,aAAD,OAAetV,EAAMuV,QAAQC,SACzCqS,QAAQ,kBAEVE,YAAa,CACXrS,SAAU,EACVnU,YAAa,GACb2B,UAAW,SACXiW,WAAY,GAEd6O,gBAAiB,CACfvR,SAAU,IAEZwR,OAAQ,CACNzD,OAAO,aAAD,OAAexkB,EAAMuV,QAAQC,UAErC0S,WAAY,CACVC,cAAe,aACf1R,SAAU,QAIR2R,GAA6BroB,YAAW,CAC5CE,KAAM,CACJiB,UAAW,GACXuV,SAAU,GACVoR,QAAS,uBAEXpjB,MAAO,CACLjC,QAAS,OACTC,eAAgB,gBAChB4lB,aAAc,UAEhBC,KAAM,CACJ7R,SAAU,GACVjU,QAAS,iBAIA+lB,GAGY,SAAC,GAA6B,IAA3BpV,EAA0B,EAA1BA,QAASzE,EAAiB,EAAjBA,KAAiB,KAAX8Z,KACGJ,MAA9BK,EADsC,EAC5CH,KAAwB5nB,EADoB,wBAE9CgoB,EAAeC,YAA2Bja,GACxCsX,EAAa0C,EAAb1C,SACR,OACE,eAAC4C,GAAA,EAAD,CACEloB,QAASA,EACTW,QAAQ,WACRwnB,KAAK,QACLC,WAAS,EACT3V,QAASA,EALX,UAOE,+BAAOuV,EAAapM,OAAa,IACjC,sBAAM9b,UAAWioB,EAAjB,SACE,cAACzC,EAAD,CAAUvP,SAAS,kBAMdsS,GAGW,SAAC,GAAe,IAAbre,EAAY,EAAZA,MACnBse,EAAcC,YAA0Bve,GAC9C,OAAO,+BAAOse,EAAY1M,QAef4M,GAGS,SAAC,GAAwB,IAAtBxe,EAAqB,EAArBA,MAAO0L,EAAc,EAAdA,QACxBpW,EAAQ6Y,eACRmQ,EAAcC,YAA0Bve,GAGxCye,EACM,aAAVze,EAAuBU,IAAaC,UAAYD,IAAaI,cACzDkd,EAAeU,YAAgBD,GAE/BE,EAxBU,SAChBL,EACAN,GAEA,MAAO,CACLY,aAAc,aACdC,YAAY,GAAD,OAAKb,EAAalM,MAAlB,oBACXgN,eAAe,iBAAD,OAAmBR,EAAY1M,MAC7CmN,cAAc,2CAAD,OAA6Cf,EAAapM,KAA1D,wBAgBAoN,CAAUV,EAAaN,GAC9B1C,EAAa0C,EAAb1C,SAVoC,EAWzB2D,aAAW,KACxBC,GAASC,EAZ6B,uBAa5C,OACE,qCACE,cAAC,GAAD,CAAOlW,GAAI,CAAEqV,iBACb,cAAC,GAAD,CACErT,MAAOiU,EAASP,EAAOE,YAAcF,EAAOC,aAC5ClT,QAASA,IAEX,eAAC,EAAD,CAAchU,eAAa,EAA3B,UACE,cAAC,KAAD,UACE,cAAC,KAAD,CACEymB,KAAM,IACN9S,MAAO/V,EAAMgC,aAAa8nB,aAC1BrT,SAAS,MACTmC,YAAU,EAJZ,SAME,cAACoN,EAAD,CAAUvP,SAAS,gBAGvB,cAACC,GAAA,EAAD,CAAYrV,QAAQ,KAAKmY,MAAM,SAA/B,SACGoQ,EAASP,EAAOI,cAAgBJ,EAAOG,wBAO5CO,GAAoChqB,aAAW,SAACC,GAAD,MAAY,CAC/D4kB,YAAa,CACXiD,QAAS,GACT9lB,gBAAiB/B,EAAMuV,QAAQC,QAC/BhT,QAAS,OACTC,eAAgB,SAChBC,WAAY,SACZ+T,SAAU,QAIDuT,GAA8C,WACzD,IAAMhqB,EAAQ6Y,eACRvW,EAASynB,KACf,OACE,cAAC,KAAD,CAAqBhU,MAAO/V,EAAMgC,aAAaioB,WAAYpB,KAAM,IAAjE,SACE,qBAAKroB,UAAW8B,EAAOsiB,YAAvB,SACE,cAAC,KAAD,CAAYnO,SAAS,UAAUV,MAAM,mBAMhCmU,GAGW,SAACzpB,GAAW,IAC1BiK,EAAkCjK,EAAlCiK,MAAOG,EAA2BpK,EAA3BoK,cAAeuL,EAAY3V,EAAZ2V,QACxBpW,EAAQ6Y,eACRsR,EAAiBxN,KACjBnO,EAAYya,YAA0Bve,GAAO4R,KAC7C8N,EAAcC,YAA4Bxf,GAAeyR,KACxDpM,EAAaJ,GAAU,iBAAvBI,UACYoa,EAAaxa,GAAU,YAAnCI,UACDqa,EAAc,uCAAG,8BAAAtlB,EAAA,yDACN,YAAXuJ,EADiB,gCAED8b,IAFC,OAEbE,EAFa,OAGnBvkB,QAAQ+I,IAAIwb,GAHO,uCAKDta,IALC,OAKbsa,EALa,OAMnBvkB,QAAQ+I,IAAIwb,GANO,kCAQd,GARc,4CAAH,qDAUpB,OACE,qCACE,cAAC,GAAD,eAAyB/pB,IACzB,cAAC,GAAD,CAAkBkV,MAAM,gBAAgBS,QAASA,IACjD,eAAC,EAAD,CAAchU,eAAa,EAA3B,UACE,cAAC,KAAD,UACE,cAAC,KAAD,CACEymB,KAAM,IACN9S,MAAO/V,EAAMgC,aAAaioB,WAC1BxT,SAAS,MAHX,SAKE,cAAC,KAAD,CAA0BA,SAAS,UAAUV,MAAM,kBAGvD,eAACW,GAAA,EAAD,CAAYrV,QAAQ,KAAKmY,MAAM,SAASC,cAAY,EAApD,uBACajL,EADb,IACyB4b,EACtBD,GAAkB,sCAASA,EAAT,UAErB,eAACzT,GAAA,EAAD,CAAYrV,QAAQ,QAAQmY,MAAM,SAASzD,MAAM,gBAAjD,6DACmDvH,EADnD,IAC+D4b,EAAa,IACzED,KAEH,cAAC,KAAD,UACE,eAAC,KAAD,CAAchX,QAASoX,EAAvB,gCACsB/b,cAQ1Bic,GAAuB,SAACjqB,EAAmBuV,GAAmB,IAAD,EACrB2U,YAC1C3U,EACA,EACAvV,GAHMmqB,EADyD,EACzDA,cAAeC,EAD0C,EAC1CA,iBAMvB,OAAO,2BACFA,GADL,kBAEGpqB,EAFH,2BAGOmqB,GAHP,IAII5oB,gBAAiBgU,OASjB8U,GAAqC9qB,aAAW,SAACC,GACrD,OAAO,iDACLC,KAAM,CACJkD,MAAO,EACPsP,OAAQ,EACR6R,aAAc,EACdviB,gBAAiB/B,EAAMuV,QAAQC,UAE9BiV,GAAqB,YAAazqB,EAAMuV,QAAQuV,QAAQ7R,OACxDwR,GAAqB,eAAgBzqB,EAAMuV,QAAQrP,MAAM+S,OACzDwR,GAAqB,aAAczqB,EAAMuV,QAAQwV,KAAK9R,OACtDwR,GAAqB,eAAgBzqB,EAAMuV,QAAQyV,QAAQ/R,UASrDgS,GAA+E,SAAC,GAGtF,IAAD,EAFJjgB,EAEI,EAFJA,OACWkgB,EACP,EADJ1qB,UAEM8B,EAASuoB,KACTrqB,EAAYM,IAAWwB,EAAOrC,KAAMirB,GAAd,mBACzB5oB,EAAO6oB,UAAYngB,IAAW/C,EAAaiE,WADlB,cAEzB5J,EAAO8oB,aAAepgB,IAAW/C,EAAaojB,eAFrB,cAGzB/oB,EAAOgpB,aAAetgB,IAAW/C,EAAasjB,cAHrB,cAIzBjpB,EAAOkpB,WAAaxgB,IAAW/C,EAAawjB,YAJnB,IAM5B,OAAO,qBAAKjrB,UAAWA,KAgBnBkrB,GAAwC3rB,aAAkB,SAACC,GAAD,MAAY,CAC1EC,KAAM,CACJ8B,gBAAiB/B,EAAMuV,QAAQoW,OAAOC,MACtCC,YAAa7rB,EAAMuV,QAAQC,QAC3BsW,UAAWC,KACX,UAAW,CACTF,YAAa7rB,EAAMuV,QAAQC,QAC3BzT,gBAAiB/B,EAAMuV,QAAQC,UAGnCwW,QAAS,CACP9U,OAAQlX,EAAMkX,OAAO+U,SAEvBC,UAAW,CACTlpB,YAAa,IAEfmpB,gBAAiB,CACfppB,WAAY,GACZC,YAAa,IAEf0D,QAAS,CAAE3D,WAAY,QAWZqpB,GAAqF,SAAC,GAQ5F,IAPLphB,EAOI,EAPJA,OACAtE,EAMI,EANJA,QACA2lB,EAKI,EALJA,OACAL,EAII,EAJJA,QACAxrB,EAGI,EAHJA,UACA8rB,EAEI,EAFJA,OACG7oB,EACC,8EAOAioB,KALSa,EAFT,EAEFL,UACiBM,EAHf,EAGFL,gBACSM,EAJP,EAIF/lB,QACSgmB,EALP,EAKFV,QACGtrB,EAND,mEASE+D,EACJuG,IAAW/C,EAAaiE,UACpBkd,YAAgBiD,GAAQ7P,MA/DC,SAACxR,GAChC,OAAQA,GACN,IAAK,eACH,MAAO,mBACT,IAAK,aACH,MAAO,gBACT,IAAK,YACH,MAAO,YACT,IAAK,gBACH,MAAO,kBAuDL2hB,CAAyB3hB,GACzB4hB,EAAiB7iB,EAAYrD,GAC7B7F,EAAoBC,IAAWN,EAAD,eACjCksB,EAAmBV,IAEhBa,EAAmBP,EACrB,GACA,CACEjrB,QAAS,WACT0U,MAAO,YACPrV,WAEN,OACE,eAACkoB,GAAA,EAAD,qCAAQpoB,UAAWK,GAAuBgsB,GAAiBppB,GAA3D,cACE,cAAC,GAAD,CACEuH,OAAQA,EACRxK,UAAW8rB,EAASE,EAA2BD,IAEjD,+BAAO9nB,IACNmoB,GACC,sBAAMpsB,UAAWisB,EAAjB,SAAoCG,S,qDCpY/BE,GAA0B,WAA2B,IAA1BC,EAAyB,uDAAb,aAC9Cja,GAAU,EACTlL,OAAeolB,eAClBla,EAAsC,YAA5Bka,aAAaC,YAGzB,IAAMC,EAAelpB,uBAAY,WAC3B8O,EACEia,GACFA,IAGFC,aAAaG,oBAAoB9jB,MAAK,WAChC0jB,GACFA,SAIL,CAACja,EAASia,IAEPK,EAA0BppB,uBAAY,SAACqM,GACtCzI,OAAeolB,eACG,IAAIA,aAAa3c,GACzBgd,QAAU,gBAIxB,IAEH,MAAO,CACLva,UACAoa,eACAF,0BACAI,4BC4BSE,GAA6D,SAAC,GAEpE,IADLnlB,EACI,EADJA,GACI,EAMAolB,aAAqBplB,GAJvBqlB,EAFE,EAEFA,mBACAC,EAHE,EAGFA,gBACAC,EAJE,EAIFA,gBAGM3X,GAPJ,EAKF4X,gBAEgBH,EAAVzX,OACAiQ,EAAayH,EAAbzH,SAIR,OAFA4H,YAAiB,QAAD,OAASH,EAAgBjR,QAGvC,qCACE,cAAC,KAAD,UACE,cAAC,KAAD,CAAqBzG,MAAOA,GAAS8X,eAAahF,KAAM,GAAxD,SACE,cAAC7C,EAAD,CAAUvP,SAAS,UAAUV,MAAM,gBAGvC,cAAC,KAAD,UACE,cAAC,KAAD,CACE1R,MACE,yCACQmpB,EAAmBhR,MAD3B,aAMLrU,EAAG6Y,gBACF,qCACI,cAAC,KAAD,UACE,cAAC8M,GAAA,EAAD,CAAMC,IAAI,EAAV,SACE,cAAC,KAAD,UACE,cAAC,KAAD,CACE1pB,MAAO2pB,aACLP,EAAgBviB,OAChB/C,EAAG6Y,eACH0M,WAMZ,cAAC,KAAD,CAAmBO,QAAS9lB,EAAG6Y,wBAY5BkN,GAAuF,SAAC,GAG9F,IAFL/lB,EAEI,EAFJA,GACAgmB,EACI,EADJA,YACI,EACiBrV,cAAZC,EADL,sBAWAwU,aAAqBplB,EAAIgmB,GAR3BX,EAHE,EAGFA,mBACAC,EAJE,EAIFA,gBACAW,EALE,EAKFA,WACAC,EANE,EAMFA,WACAC,EAPE,EAOFA,aACAC,EARE,EAQFA,kBACAC,EATE,EASFA,wBAKIC,GAdF,EAUFC,mBAIwBvmB,EAAGwmB,aAAaR,IAC1CC,EAAaD,EACbE,EAAa,sCAAwCF,EAAY7jB,MAAM,KAAK,GAC5EikB,GAAuB,OAAHE,QAAG,IAAHA,OAAA,EAAAA,EAAKG,gBAAiB,EAjBtC,IAmBI5I,EAAayH,EAAbzH,SAGF6I,EAAYN,IAFlBC,GAAyC,OAAff,QAAe,IAAfA,OAAA,EAAAA,EAAiBqB,sBAAuB,GAOlE,OAJA7d,qBAAU,WACR8H,EAAS8V,EAAY,YAAc,gBAClC,CAAC9V,EAAU8V,IAGZ,qCACE,cAAC,KAAD,UACE,cAAC,KAAD,CACE9Y,MAAOyX,EAAmBzX,OAAS8X,eACnCe,cAAeL,EACfO,oBAAqBN,EAHvB,SAKE,cAACxI,EAAD,CAAUvP,SAAS,UAAUV,MAAM,gBAGvC,cAAC,KAAD,UACE,eAACW,GAAA,EAAD,CAAYrV,QAAQ,QAAQmY,MAAM,SAAlC,UACG+U,EADH,OAC0BC,EAD1B,sBAIF,cAAC,KAAD,UACE,cAAC,KAAD,CACEnqB,MACE,cAAC,GAAD,CACEA,MAAOiqB,EACPtZ,aAAcwY,EAAmBhR,YAKzC,cAAC,KAAD,CACE/X,MAAOgpB,EAAgBjR,MACvBtV,QAASknB,EACTW,KAAMV,QAuBDW,GAA+E,SAAC,GAOtF,IANL7mB,EAMI,EANJA,GACA8mB,EAKI,EALJA,SACAC,EAII,EAJJA,SACAC,EAGI,EAHJA,WACAC,EAEI,EAFJA,gBACAjB,EACI,EADJA,YAEAP,YAAiB,UACjByB,aAAqB,GACrB,IAAMrvB,EAAQ6Y,eAHV,EAaA0U,aAAqBplB,EAAIgmB,GAR3BX,EALE,EAKFA,mBACAC,EANE,EAMFA,gBACAW,EAPE,EAOFA,WACAE,EARE,EAQFA,aACAD,EATE,EASFA,WACAE,EAVE,EAUFA,kBACAC,EAXE,EAWFA,wBACAc,EAZE,EAYFA,gBAEIb,EAAoBtmB,EAAGwmB,aAAaR,GAC1CC,EAAaD,EACbE,EAAa,sCAAwCF,EAAY7jB,MAAM,KAAK,GAC5EikB,GAAuB,OAAHE,QAAG,IAAHA,OAAA,EAAAA,EAAKG,gBAAiB,EAE1CJ,GAAyC,OAAff,QAAe,IAAfA,OAAA,EAAAA,EAAiBqB,sBAAuB,EAElE,IAAMS,EAAmB,UAAMhB,EAAkBC,EAAwBA,EAAwBD,EAAxE,YAA6FC,EAA7F,2CACvBhB,EAAmBhR,MADI,eAElB8S,EAAgBhT,KAFE,KAGjBkT,EAAqBC,cAArBD,iBACApC,EAA4BN,KAA5BM,wBACRsC,cAAc,WACZF,EAAiBD,GACjBnC,EAAwBmC,MA5BtB,IA+BIvJ,EAAayH,EAAbzH,SAER,OACE,qCACE,cAAC,KAAD,UACGmJ,EACC,cAAC,KAAD,CAAqBpZ,MAAO/V,EAAMgC,aAAa2tB,QAAS/W,YAAU,EAAlE,SACE,cAACoN,EAAD,CAAUvP,SAAS,UAAUV,MAAM,cAGrC,cAAC,KAAD,CACEA,MAAOyX,EAAmBzX,OAAS/V,EAAMgC,aAAa2tB,QACtDf,cAAeL,EACfO,oBAAqBN,EAHvB,SAKE,cAACxI,EAAD,CAAUvP,SAAS,UAAUV,MAAM,gBAIzC,eAACW,GAAA,EAAD,CAAYrV,QAAQ,QAAQmY,MAAM,SAASC,cAAY,EAAvD,UACE,cAAC,GAAD,CACEpV,MAAOiqB,EACPtZ,aAAcwY,EAAmBlR,OAChC,IAJL,YAKYiS,EAAkBC,EAAwBA,EAAwBD,EAL9E,IAKkGC,EALlG,oBAOA,cAAC,KAAD,UACE,eAAC,KAAD,CAAcrb,QAAS8b,EAAUvU,SAAUyU,EAA3C,UACGA,EAAa,aAAe,SAD/B,OAC6CG,EAAgBhT,KAC1D6S,GAAc,WAGnB,cAAC,KAAD,UACE,cAAC,KAAD,CACE1qB,MAAOgpB,EAAgBjR,MACvBtV,QAASknB,EACTW,KAAMV,MAGV,cAAC,GAAD,CAAmBzX,KAAMwY,EAAiB7V,SAAU2V,QAY7CU,GAA6E,SAAC,GAKpF,IAJLznB,EAII,EAJJA,GAII,IAHJ8mB,gBAGI,MAHO,aAGP,EAFJE,EAEI,EAFJA,WACAhB,EACI,EADJA,YAEMnuB,EAAQ6Y,eADV,EAWA0U,aAAqBplB,EAAIgmB,GAR3BX,EAHE,EAGFA,mBACAC,EAJE,EAIFA,gBACAW,EALE,EAKFA,WACAE,EANE,EAMFA,aACAD,EAPE,EAOFA,WACAwB,EARE,EAQFA,WACAC,EATE,EASFA,WACAR,EAVE,EAUFA,gBAGwBnnB,EAAGwmB,aAAaR,GAI1C,OAHAC,EAAaD,EACbE,EAAa,sCAAwCF,EAAY7jB,MAAM,KAAK,GAG1E,qCACE,cAAC,KAAD,UACE,cAAC,KAAD,CAAqByL,MAAO/V,EAAMgC,aAAa2tB,QAAS/W,YAAU,EAAlE,SACE,cAAC,KAAD,CACE5N,OAAO,UACPN,MAAO4kB,EAAgBhT,KACvBpV,QACE,cAAC,KAAD,CACE6O,MAAM,UACNkE,UAAU,QACVH,KAAM+V,EACN/b,OAAO,SAJT,SAMGgc,UAMX,cAACpZ,GAAA,EAAD,CAAYrV,QAAQ,QAAQmY,MAAM,SAASC,cAAY,EAAvD,SACE,cAAC,GAAD,CACEpV,MAAOiqB,EACPtZ,aAAcwY,EAAmBlR,SAGrC,cAAC,KAAD,UACE,eAAC,KAAD,CAAcnJ,QAAS8b,EAAUvU,SAAUyU,EAA3C,UACGA,EAAa,aAAe,SAD/B,OAC6CG,EAAgBhT,KAC1D6S,GAAc,WAGnB,cAAC,KAAD,UACE,cAAC,KAAD,CACE1qB,MAAOgpB,EAAgBjR,MACvBtV,QAASknB,EACTW,KAAMV,UAcH0B,GAAmE,SAAC,GAK1E,IAJL5nB,EAII,EAJJA,GACAgmB,EAGI,EAHJA,YACA6B,EAEI,EAFJA,SACAtlB,EACI,EADJA,MAEAkjB,YAAiB,YACjB,IAAM5d,EAAWC,cACXtM,EAAUC,cAHZ,EAYA2pB,aAAqBplB,EAAIgmB,GAP3BX,EALE,EAKFA,mBACAyC,EANE,EAMFA,mBACAxC,EAPE,EAOFA,gBACAY,EARE,EAQFA,WAEAwB,GAVE,EASFvB,aATE,EAUFuB,YACAP,EAXE,EAWFA,gBAGFjB,EAAa,sCAAwCF,EAAY7jB,MAAM,KAAK,GAE1EulB,EADU,YAATnlB,EACU,2BAA6BslB,EAE7B,0BAA4BA,EAlBrC,MAqBsB9b,GACxBsZ,EAAmBtiB,OACnBuQ,KAAO9W,MAFD6P,EArBJ,EAqBIA,KAAMC,EArBV,EAqBUA,QAINyb,EAAoB9U,aAAmB,CAC7C5G,OACAhF,KAAMiM,KAAO9W,OAFPurB,gBAIFC,EAAensB,uBAAY,WAC/BL,EAAQQ,KAAKO,IAAMC,MACnBqL,EAASogB,kBACR,CAACpgB,EAAUrM,IAEN6rB,EAAqBC,cAArBD,iBACApC,EAA4BN,KAA5BM,wBAEFiD,EAAoBrsB,uBAAY,WACpC,IAAKyQ,EAAS,CACZ,IAAM8a,EAAmB,8BAA0BU,EAAmBzT,MAA7C,eAAyD8S,EAAgBhT,KAAzE,KACzBkT,EACE,iCACGD,EAAqB,IACtB,eAAC,KAAD,CAAM1V,UAAQ,EAACC,KAAM+V,EAArB,kBACQP,EAAgBhT,KADxB,sBAKJ8Q,EAAwBmC,MAEzB,CACDC,EACApC,EACA3Y,EACAyb,EACAZ,EACAW,EACAJ,IAKF,OAFA5e,oBAAUof,EAAmB,CAAC5b,IAG5B,qCACE,cAAC,KAAD,UACE,cAAC,KAAD,UACE,cAAC,KAAD,QAGJ,cAAC,KAAD,UACE,cAAC,KAAD,CAActB,QAASgd,EAAvB,6BAEF,eAACjK,GAAA,EAAD,CAAK1jB,QAAQ,OAAOC,eAAe,gBAAgB6tB,SAAS,OAAOC,GAAI,EAAvE,UACE,eAAC,KAAD,CACE1W,UAAQ,EACR9D,MAAM,UACN1U,QAAQ,SACR4Y,UAAU,QACVH,KAAMuU,EALR,UAOGZ,EAAgBnR,KAPnB,kBASA,eAAC,KAAD,CACEzC,UAAQ,EACR9D,MAAM,UACN1U,QAAQ,SACR4Y,UAAU,QACVH,KAAM+V,EALR,UAOGP,EAAgBhT,KAPnB,yB,UC1bFkU,GAAwBzwB,aAAW,SAACC,GAAD,MAAY,CACnDC,KAAM,CACJ8V,MAAO/V,EAAMuV,QAAQyD,QAAQC,KAC7BxC,SAAU,GACVga,WAAY,SACZjuB,QAAS,cACTkuB,OAAQ,UACR,UAAW,CACT3a,MAAO/V,EAAMuV,QAAQyD,QAAQ2X,OAGjCjW,SAAU,CACRkW,QAAS,GACTF,OAAQ,WAEVG,OAAQ,CACNruB,QAAS,OACTouB,QAAS,OAOAE,GAAqD,SAAC,GAM5D,IAAD,EALJC,EAKI,EALJA,UACArW,EAII,EAJJA,SACAmW,EAGI,EAHJA,OACArwB,EAEI,EAFJA,UACA2S,EACI,EADJA,QAEM7Q,EAASkuB,KACTQ,EAAgBlwB,IAAWwB,EAAOrC,KAAMO,GAAd,mBAC7B8B,EAAOoY,SAAWA,GADW,cAE7BpY,EAAOuuB,OAASA,GAFa,IAI1B/K,EAAqB,SAAdiL,EAAuBE,KAAmBC,KACvD,OACE,cAACC,GAAA,EAAD,CAAY3wB,UAAWwwB,EAAetW,SAAUA,EAAUvH,QAASA,EAAnE,SACE,cAAC2S,EAAD,CAAMrP,SAAS,eAeR2a,GAAoBnwB,aAV4B,SAACR,GAAD,OAC3D,cAAC,GAAD,aAAcswB,UAAU,QAAWtwB,MASJQ,CAAsB,CACrDb,SAAU,WACVsB,IAJgB,GAKhBuV,MAJuB,KAOZoa,GAAoBpwB,aAZ4B,SAACR,GAAD,OAC3D,cAAC,GAAD,aAAcswB,UAAU,QAAWtwB,MAWJQ,CAAsB,CACrDb,SAAU,WACVsB,IAVgB,GAWhBsV,OAVuB,K,gCCXZsa,GAAuB,SAClCnpB,GAGI,IAFJopB,EAEG,uDAFiB,GACpBC,EACG,uCACGC,EAAiBtpB,EAAGwmB,aACpB+C,EAAgB5N,OAAO6N,KAAKF,GAAgB3K,KAAI,SAAC8K,GAAD,OAAaA,KAE7DC,EAAQH,EAAcznB,OACtB6nB,EAAUP,GAAqBM,EAAQ,EAAIH,EAAc,GAAK,GALjE,EAMmC3e,mBAAS+e,GAN5C,mBAMIC,EANJ,KAMiBC,EANjB,KAOH/gB,qBAAU,WACR+gB,EAAeF,KACd,CAACA,IAEJ,IAAMG,EAAeP,EAAcnmB,QAAQwmB,GACrCG,EACJL,EAAQ,GAAKI,EAAe,EAAIJ,EAAQI,EAAe,EAAI,EACvDE,EAAWT,EAAcQ,GACzBE,EAAYP,EAAQ,GAAKI,EAAe,GAAK,EAAIA,EAAe,EAAI,EACpEI,EAAWX,EAAcU,GAEzBE,EAAatuB,uBAAY,WAC7BiC,QAAQ+I,IAAI0iB,GACZzrB,QAAQ+I,IAAI,QAAQmjB,GACpBH,EAAeG,GACfX,EAAWW,KACV,CAACA,IAEEI,EAAavuB,uBAAY,WAC7BiC,QAAQ+I,IAAI,QAAQqjB,GACpBL,EAAeK,GACfb,EAAWa,KACV,CAACA,IAGJ,MAAO,CACLN,cACAE,eACAK,aACAC,aACAV,U,UCiBSW,GAA0D,SAAC,GAGjE,IAFL7uB,EAEI,EAFJA,QACAkE,EACI,EADJA,SAEAkJ,IAAgB,GAChB,IAAMf,EAAWC,cACXvF,EAAQ2B,YAAY2Q,MAHtB,EAQoByV,aAAgB,SAJA,CACtC,qEAAsE,SALpE,mBAQGC,EARH,KAQSC,EART,KAWI1mB,EAAoBE,KAApBF,gBAXJ,EAY8B2mB,eAAtBC,EAZR,EAYI1qB,GAAcmZ,EAZlB,EAYkBA,QAZlB,EAakCvO,wBAA2CqT,KAAlB,OAARyM,QAAQ,IAARA,OAAA,EAAAA,EAAU1E,aAA4B0E,EAAS1E,YAAc,IAAM0E,EAASC,SAAW,IAb1I,mBAaG3E,EAbH,KAagB4E,EAbhB,OAc8BhgB,oBAAS,GAdvC,gCAegBA,mBAAyB8f,IAfzC,mBAeG1qB,EAfH,KAeO6qB,EAfP,KAiBJ/gB,GAAkB9J,EAAG/B,IAErB6sB,YAAaC,aAAe/qB,IAnBxB,MAoBgC2Q,cApBhC,mBAoBGqa,EApBH,KAoBeC,EApBf,KAqBJniB,qBAAU,WACHhF,GACHmnB,EAAc,wBAEf,CAACnnB,EAAiBmnB,IAErB,IAAMC,EAA0BrvB,uBAAY,WAC1CL,EAAQ2vB,WACP,CAAC3vB,IAGEka,EAAS,OAAGgV,QAAH,IAAGA,OAAH,EAAGA,EAAUhV,UAC5B5M,qBAAU,WACR,GAAI4M,EAAW,CACb,IAAM0E,EAAoB0G,YAA0BpL,GACpD7N,EAASsX,aAAS/E,EAAkBrX,YAErC,CAAC8E,EAAU6N,IAEd,IAAM0V,EAAyBvvB,uBAAY,WACzCgM,EAAS4Q,cAAsB,MAC9B,CAAC5Q,IAMEwjB,GAJ0BxvB,uBAAY,WAC1CL,EAAQ8vB,QAAR,2BAAqB5rB,GAArB,IAA+BwZ,WAAO+E,OACrC,CAACziB,EAASkE,MAEmBM,GAAM8D,GAChCynB,EAAcC,YAA6BxrB,EAAGyrB,aAAa1oB,OAjD7D,EAmD6B6H,mBAAS,GAnDtC,6BA4FH,OATD9B,qBAAU,WACR,IAAM4iB,EAAWC,aAAY,WA9BzB3rB,GACJmW,GAAYnW,EAAG8V,YAAa9V,EAAG0V,WAAWxU,MAAK,SAAC0X,GAChD,IAAIgT,EAA2BlrB,KAAKS,MAAMT,KAAKC,UAAUX,IACzD,GAAqB,GAAlB4Y,EAAQ/V,OAAa,CACpB,IAAIgpB,GAAU,EACd,QAAsB5N,IAAnBrF,EAAQ5Q,aAAgDiW,IAAxBrF,EAAQ5Q,OAAOvJ,MAAsBma,EAAQ5Q,OAAOvJ,KAAKqD,OAAS,EAAG,CACpG,IAAI,IAAIgqB,EAAI,EAAGA,EAAElT,EAAQ5Q,OAAOvJ,KAAKqD,SAAUgqB,EAAG,CAAC,IAAD,IAC1C1gB,GAAM,UAAAwN,EAAQ5Q,OAAOvJ,KAAKqtB,GAAGC,YAAvB,eAA6BpnB,MAAO,KAApC,UAA0CiU,EAAQ5Q,OAAOvJ,KAAKqtB,GAAGC,YAAjE,aAA0C,EAA6BnnB,GAChFwG,KAAOmf,GACMnf,KAAOwgB,EAASpF,cAClB9lB,KAAKC,UAAUirB,EAASpF,aAAapb,KAAO1K,KAAKC,UAAUiY,EAAQ5Q,OAAOvJ,KAAKqtB,MAC1FF,EAAiBpF,aAAapb,GAAOwN,EAAQ5Q,OAAOvJ,KAAKqtB,GAC1DD,GAAU,GAGK,KAAhB7F,GAAsBrK,OAAO6N,KAAKoC,EAASpF,cAAc1kB,OAAS,GACnE8oB,EAAejP,OAAO6N,KAAKoC,EAASpF,cAAc,IAEjDqF,GACDhB,EAAMe,UAab,KACH,OAAO,kBAAMI,cAAcN,MAC1B,CAAC1F,IAKF,qCACE,eAAC5rB,EAAD,WACE,cAACI,EAAD,UACI,cAAC4T,GAAA,EAAD,CAAYpD,QAASkgB,EAArB,SACE,cAAC,KAAD,QAGN,cAACpwB,EAAD,UAAakwB,IACb,cAACrwB,EAAD,OAIF,eAAC,EAAD,CAAcV,eAAa,EAA3B,UACGoxB,GACC,cAAC,GAAD,CACErrB,GAAIA,EACJgmB,YAAaA,EACbqD,WA/BU,SAAC4C,GACnBrB,EAAeqB,IA+BP1B,KAAMA,EACNC,QAASA,KAGX1mB,GACA,qCACE,cAAC,KAAD,UACE,cAAC,KAAD,UACE,cAAC,GAAD,QAGJ,cAAC,KAAD,CAAckH,QAASogB,EAAvB,kCAMLtnB,GACC,qCACE,cAAC2V,GAAA,EAAD,IACA,cAAC,EAAD,CAAc9f,QAAM,EAACK,YAAU,EAACC,eAAa,EAA7C,SACE,cAAC,GAAD,CACEsI,MAAOA,EACP0G,SAAUsiB,EACVlkB,KAAMiM,KAAO9W,KACbuC,QAASiB,EAAG8V,mBAOpB,cAAC,GAAD,CAAOtK,GAAI,CAAExL,KAAImZ,QAASA,SAiB1B+S,GAAuE,SAAC,GAMvE,IALLlsB,EAKI,EALJA,GAKI,IAJJgmB,mBAII,MAJU,GAIV,EAHJqD,EAGI,EAHJA,WACAkB,EAEI,EAFJA,KACAC,EACI,EADJA,QAEMjoB,EAAQ2B,YAAY2Q,MACpB1L,EAAajF,YAAYkF,KACvB7K,EAAYyF,KAAZzF,QAHJ,EAKsBqM,mBAAS,oBAL/B,mBAKGsO,EALH,KAKUiT,EALV,OAYAhD,GAAqBnpB,EAAIgmB,EAAaqD,GALxCS,EAPE,EAOFA,aACAF,EARE,EAQFA,YACAF,EATE,EASFA,MACAU,EAVE,EAUFA,WACAD,EAXE,EAWFA,WAXE,EAkB4C7C,cAAxCD,EAlBJ,EAkBIA,iBAAkB+E,EAlBtB,EAkBsBA,kBAlBtB,EAmBgCxhB,mBAHe,IAhB/C,mBAmBG/M,EAnBH,KAmBewuB,EAnBf,OAoB0BzhB,mBAAS,GApBnC,mBAoBG0hB,EApBH,KAoBYC,EApBZ,KAqBAC,OAAoBvO,EAElBwO,EAAc,WAElBF,EAAWD,EAAQ,IAGrBxjB,qBAAU,WAER,IAAMwd,EAAoBtmB,EAAGwmB,aAAaR,IAC1CloB,QAAQ+I,IAAIyf,QACMrI,IAAfuO,IACDE,wBAAaF,GACbA,OAAevO,GAGdqI,MACgB,OAAHA,QAAG,IAAHA,OAAA,EAAAA,EAAKqG,QAAQ,EAItB3G,KAAenoB,GAChBC,QAAQ+I,IAAI0jB,GACZzsB,QAAQ+I,IAAImf,GAEVmG,EADCnG,KAAeuE,EACP,YAEA,cAGT4B,EAAS,gBACTS,IACAJ,EAAezU,WAAW0U,EAAa,OAb3CN,EAAS,kBAkBb,CAACnsB,EAAIgmB,EAAanoB,EAAY0sB,EAAM+B,IAItC,IAAMO,EAAc,uCAAG,gDAAA/vB,EAAA,yDACnBgB,QAAQ+I,IAAI,uCAEcoX,IADpB6O,EAAQjvB,EAAWmoB,IACjB,WAHW,wDAIbjhB,EAAI,KAAO+nB,EAAK,WAAe,GAApB,IAA+B,EAC1C9nB,EAAI,KAAO8nB,EAAK,WAAe,GAApB,IAA+B,EAC1C7nB,EAA2C,MAAvC6nB,EAAK,WAAe,GAApB,YAA8C,EAAI,EAC5DhvB,QAAQ+I,IAAI7G,EAAGkY,YAAa8N,EAAY7jB,MAAM,KAAK,GAAI4qB,SAAS/G,EAAY7jB,MAAM,KAAK,KAAkB,OAAb6qB,QAAa,IAAbA,GAAA,UAAAA,EAAejB,YAAf,eAAqBkB,gBAAiB,EAAGjtB,EAAGyrB,YAAa1mB,EAAGC,EAAGC,EAAI,IAP5I,UAQEmD,EAAcpI,EAAGkY,YAAa8N,EAAY7jB,MAAM,KAAK,GAAI4qB,SAAS/G,EAAY7jB,MAAM,KAAK,KAAkB,OAAb6qB,QAAa,IAAbA,GAAA,UAAAA,EAAejB,YAAf,eAAqBkB,gBAAiB,EAAGjtB,EAAGyrB,YAAa1mB,EAAGC,EAAGC,EAAI,IARnK,QASN,QADTzG,EARe,QASZmI,KAA+B,IAAjB,UAAAnI,EAAImI,WAAJ,eAASsB,OAC5BnK,QAAQ+I,IAAR,UAAYrI,EAAImI,WAAhB,aAAY,EAASuB,SACrBmf,GAAiB,UAAA7oB,EAAImI,WAAJ,eAASuB,UAAqB,GAAI,CACjDhP,QAAS,QACTg0B,SAAS,MAGXpvB,QAAQ+I,IAAIrI,IACR2uB,EAASzsB,KAAKS,MAAMT,KAAKC,UAAU4pB,KAChCvE,GAAexnB,EAAIwJ,OAC1BwiB,EAAQ2C,IAnBS,4CAAH,qDAuBdP,EAAiB,uCAAG,8BAAA9vB,EAAA,sDACxBgB,QAAQ+I,IAAI,8BACZuP,GAAiBpW,EAAGkY,cAA2B,OAAb8U,QAAa,IAAbA,GAAA,UAAAA,EAAejB,YAAf,eAAqBpnB,OAAQ,IAAI2mB,QAAQ,KAAK,KAAkB,OAAb0B,QAAa,IAAbA,GAAA,UAAAA,EAAejB,YAAf,eAAqBnnB,IAAK,EAAG5E,EAAG0V,WAAWxU,MAAK,SAACksB,GACpI,GAAGA,GAAwB,IAAZ,OAAJA,QAAI,IAAJA,OAAA,EAAAA,EAAMvqB,QAAY,CAC3B,IAAIwqB,EAAU3sB,KAAKS,MAAMT,KAAKC,UAAU9C,IACxCwvB,EAAQrH,GAAeoH,EACvBf,EAAcgB,OAEfzsB,OAAM,SAAC+F,OARc,2CAAH,qDAWvBmC,qBAAU,WACR,IAAIsC,EAAM,EAOV,OANIse,EAAQ,IACVte,EAAMic,EAAiB,cAAC,GAAD,IAA6B,CAClDnuB,QAAS,UACTg0B,SAAS,KAGN,WACD9hB,GACFghB,EAAkBhhB,MAGrB,CAACic,EAAkB+E,EAAmB1C,IA7GrC,MA+G4D9e,oBAC9D,GAhHE,mBA+GG0iB,EA/GH,KA+G6BC,EA/G7B,KAkHEC,EAAgC3xB,uBAAY,WAChD0xB,GAA4B,KAC3B,IAEHzkB,qBAAU,WAENvK,GACAyB,EAAG8V,aACHvX,EAAQ+B,gBAAkBN,EAAG8V,YAAYxV,cAEzCitB,GAA4B,GAE5BA,GAA4B,KAE7B,CAAChvB,EAASyB,EAAG8V,YAAa9V,IAE7B,IAAMgtB,EAAgB1oB,mBAEb,WACP,QAA0B2Z,KAAnB,OAAFje,QAAE,IAAFA,OAAA,EAAAA,EAAIwmB,cACP,OAAO,KAET,IAAMiD,EAAUzpB,EAAGwmB,aAAaoD,GAAe5D,GAC/C,OAAKyD,GACI,OAGR,CAACG,EAAa5pB,EAAIgmB,IAEd5d,EvBgPgB,WACvB,IAAM7F,EAAQ2B,YAAYC,MADG,EAED7B,GAAUC,GAA9BhE,EAFqB,EAErBA,QAASsE,EAFY,EAEZA,OACX4B,EAAOJ,KACPwD,EAAWC,cAejB,MAAO,CAAEM,cAdavM,sBAAW,uCAAC,WAAO6I,EAAuBC,EAAcC,EAAWC,EAAgBC,EAAgBC,EAAWC,EAAUC,GAA5G,eAAAnI,EAAA,yDAChC+H,GAAkB,KACdtG,IAAWkG,GAAmB,cAAX5B,EAFS,iCAI5B/E,QAAQ+I,IAAInC,EAAeC,EAAMC,EAAGC,EAAQC,EAAO2oB,cAAe1oB,EAAGC,EAAGC,GAJ5C,SAKHT,GAAiBjG,EAASkG,EAAMlC,EAAOmC,EAAeC,EAAMC,EAAGC,EAAQC,EAAO2oB,cAAe1oB,EAAGC,EAAGC,GALhG,cAKtBpH,EALsB,yBAMrB,CAAC8I,IAAI,KAAMqB,OAAOnK,IANG,2DAQrB,CAAC8I,IAAI,EAAD,GAAQqB,OAAO,OARE,iCAWzB,CAACrB,IAAI,CAACsB,MAAM,EAAGC,QAAQ,wBAAyBF,OAAO,OAX9B,0DAAD,oEAY9B,CAACzJ,EAASkG,EAAM5B,EAAQN,EAAOsF,KuBjQV6lB,GAAjBtlB,cAMD1I,EAAWgV,cACXlZ,EAAUC,cAEhBqN,qBAAU,WACR,GAAKpJ,EAASsZ,OAAd,CACA,IAAM2U,EAAUC,aAAmBluB,EAASsZ,QACtCyQ,IAAkB,OAAPkE,QAAO,IAAPA,OAAA,EAAAA,EAASnH,eAAgB,IAAIoD,GAI1CoD,IAAkBvD,GACpBjuB,EAAQ8vB,QAAQ,CACd3W,SAAUpY,IAAMwc,iBAChBC,OAAQ,IAAMC,aAAoBjZ,QAGrC,CAAC4pB,EAAa5D,EAAatmB,EAAUstB,EAAehtB,EAAIxE,IArKvD,IAuKIssB,GAAuB1C,aAC7BplB,EACA4pB,GAFM9B,mBAIF+F,GAAsBC,aAC1BvrB,EACA4G,EACA5K,GAGF,OACE,qCACGyuB,EACC,eAACra,GAAD,WACE,cAAC,GAAD,CACE3S,GAAIA,EACJypB,QAASuD,EACThH,YAAaA,EACb9M,MAAOA,EACP6U,UAAWlB,EACXhF,SAAU0C,EAAKvE,KAEhB0D,EAAQ,GACP,qCACE,cAACT,GAAD,CACEje,QAASof,EACT7X,SAA2B,IAAjBuX,IAEZ,cAACZ,GAAD,CACEle,QAASmf,EACT5X,SAAUuX,IAAiBJ,EAAQ,UAM3C,cAAC,GAAD,CAAqB1pB,GAAIA,IAI3B,cAAC,GAAD,CACEyO,KAAM6e,EACNvuB,QAASR,EACTkU,oBAAqBob,GACrB5kB,SAAU6e,GAAmBzT,MAC7BjC,oBAAqBob,IAEvB,cAAC,GAAD,CACEhiB,GAAI,CACFwa,cACAgI,WAAY,CAAElE,eAAcF,cAAaF,SACzCsD,gBACAtD,QACAI,eACAF,qBAiBGqE,GAAqF,SAAC,GAO5F,IANLjuB,EAMI,EANJA,GAEAgmB,GAII,EALJyD,QAKI,EAJJzD,aACA9M,EAGI,EAHJA,MACA6U,EAEI,EAFJA,UACAlG,EACI,EADJA,SAEgBpsB,cACCiZ,cAIjB,OADA5W,QAAQuK,MAAMrI,EAAG/B,GAAI+nB,EAAa9M,GAC1BA,GACN,IAAK,cACH,OACE,cAAC,GAAD,CAA+BlZ,GAAIA,EAAIgmB,YAAaA,IAExD,IAAK,eACH,OAAO,cAAC,GAAD,CAAgBxV,OAAO,0BAChC,IAAK,iBACL,IAAK,kBACL,IAAK,WACL,IAAK,WACH,OACE,cAAC,GAAD,CACExQ,GAAIA,EACJgmB,YAAaA,EACbgB,WAAsB,aAAV9N,EACZ+N,gBACY,oBAAV/N,GAAyC,mBAAVA,EAEjC4N,SAAUiH,IAGhB,IAAK,gBACH,OACE,cAAC,GAAD,CACE/tB,GAAIA,EACJgmB,YAAaA,EACbgB,YAAY,IAGlB,IAAK,YACH,OAAO,cAAC,GAAD,CAAqBhnB,GAAIA,EAAIgmB,YAAaA,EAAa6B,SAAUA,EAAUtlB,MAAOvC,EAAG0V,YAC9F,IAAK,mBACH,OAAO,cAAC,GAAD,CAAgBlF,OAAO,sBAChC,QACE,OAAO,cAAC,GAAD,CAAgBA,OAAO,yBCviB9B0d,GAA4D,WAAO,IAAD,EAC9CtjB,mBAASujB,KAAoBC,SADiB,mBAC/DC,EAD+D,KACzDC,EADyD,KAItExkB,GAAkB,IAElB,IAAMykB,EAAgB1yB,uBAAY,WAChCyyB,EAAQH,KAAoBK,QAC3B,IACGC,EAAa5yB,uBAAY,WAC7ByyB,EAAQH,KAAoBC,WAC3B,IAEH,OACE,qCACGC,IAASF,KAAoBC,SAC5B,qCACE,cAAC,EAAD,IACA,cAAC,GAAD,CAAiBrP,OAAQwP,OAG5BF,IAASF,KAAoBK,MAC5B,cAAC,GAAD,CAActgB,OAAQugB,QAMjBC,GAAmD,SAAC,GAAc,EAAZC,MAEjE,OADA7D,YAAa,WAEX,qCACE,cAAC,IAAD,CAAO8D,OAAK,EAAClzB,KAAMa,IAAMC,KAAM+U,UAAW2c,KAC1C,cAAC,IAAD,CAAOU,OAAK,EAAClzB,KAAMa,IAAMwc,iBAAkBxH,UAAW8Y,S,UCJ/CwE,GAAuE,SAAC,GAQ9E,IAPL7uB,EAOI,EAPJA,GACA8mB,EAMI,EANJA,SACAC,EAKI,EALJA,SAKI,IAJJC,kBAII,SAHJC,EAGI,EAHJA,gBACA6H,EAEI,EAFJA,aAEI,IADJxiB,eACI,SACJmZ,YAAiB,UACjB,IAAM5tB,EAAQ6Y,eAFV,EAQAqe,aAAwB/uB,GAJ1BgvB,EAJE,EAIFA,gBACAC,EALE,EAKFA,sBACAC,EANE,EAMFA,WACAC,EAPE,EAOFA,WAEMtR,EAAamR,EAAbnR,SAEFuR,EAAevzB,uBAAY,WAC3BirB,GACFA,MAED,CAACA,IAEEuI,EAAmB/iB,GAAW0a,EAEpC,OACE,qCACE,cAAC,KAAD,UACE,cAAC,KAAD,CACEpZ,MAAO/V,EAAMgC,aAAa2tB,QAC1B/W,WAAY4e,EAFd,SAIG/iB,EACC,cAAC,KAAD,CACEzJ,OAAO,UACPN,MAAOysB,EAAgB7a,KACvBpV,QACE,cAAC,KAAD,CACE6O,MAAM,UACNkE,UAAU,QACVH,KAAMwd,EACNxjB,OAAO,SAJT,SAMGujB,MAKP,cAACrR,EAAD,CAAUvP,SAAS,UAAUV,MAAM,iBAIvCtB,GACA,eAACiC,GAAA,EAAD,CAAYrV,QAAQ,QAAQmY,MAAM,SAASC,cAAY,EAAvD,6BACmB2d,EAAsB5a,MADzC,qCAEkB2a,EAAgB7a,KAFlC,4BAKF,cAAC,KAAD,UACE,eAAC,KAAD,CAAcnJ,QAASokB,EAAc7c,SAAU8c,EAA/C,UACGA,EAAmB,aAAe,SADrC,OACmDL,EAAgB7a,KAChEkb,GAAoB,WAGzB,cAAC,GAAD,CAAmB5gB,KAAM6gB,QAAQrI,GAAkB7V,SAAU2V,IAC7D,cAAC,GAAD,CAAoBtY,KAAM6gB,QAAQR,GAAe1d,SAAU2V,QAkBpDwI,GAAyE,SAAC,GAEhF,IADLvvB,EACI,EADJA,GAEAylB,YAAiB,aACjB,IAAM5d,EAAWC,cACXtM,EAAUC,cAHZ,EAWAszB,aAAwB/uB,GAN1BwvB,EALE,EAKFA,mBACAP,EANE,EAMFA,sBACAD,EAPE,EAOFA,gBACAG,EARE,EAQFA,WACAM,EATE,EASFA,cACAC,EAVE,EAUFA,mBAEI1H,EAAensB,uBAAY,WAC/BL,EAAQQ,KAAKO,IAAME,SACnBoL,EAAS8nB,kBACR,CAAC9nB,EAAUrM,IAER4rB,EAAmB,gCAA4BpnB,EAAG4vB,aAA/B,YAA+CX,EAAsB5a,OACtFgT,EAAqBC,cAArBD,iBACApC,EAA4BN,KAA5BM,wBAcR,OAbAsC,cAAc,WACZF,EACE,iCACGD,EAAqB,IACtB,eAAC,KAAD,CAAM1V,UAAQ,EAACC,KAAM8d,GAAiBC,EAAtC,kBACQF,EAAmBrb,KAAM,IAC9Bsb,EAAgB,cAAgB,iBAIvCxK,EAAwBmC,MAIxB,qCACE,cAAC,KAAD,UACE,cAAC,KAAD,UACE,cAAC,KAAD,QAGJ,cAAC,KAAD,UACE,cAAC,KAAD,CAAcpc,QAASgd,EAAvB,6BAEF,eAACjK,GAAA,EAAD,CAAK1jB,QAAQ,OAAOC,eAAe,gBAAgB6tB,SAAS,OAAOC,GAAI,EAAvE,UACE,eAAC,KAAD,CACE1W,UAAQ,EACR9D,MAAM,UACN1U,QAAQ,SACR4Y,UAAU,QACVH,KAAM8d,GAAiBC,EALzB,UAOGF,EAAmBrb,KAPtB,IAO6Bsb,EAAgB,cAAgB,aAE7D,eAAC,KAAD,CACE/d,UAAQ,EACR9D,MAAM,UACN1U,QAAQ,SACR4Y,UAAU,QACVH,KAAMwd,EALR,UAOGH,EAAgB7a,KAPnB,qBAUF,cAAC,GAAD,CAAO3I,GAAI,CAAExL,YAMN6vB,GAAyF,SAAC,GAKhG,IAJLlrB,EAII,EAJJA,KAEApC,GAEI,EAHJsC,OAGI,EAFJtC,OACA2L,EACI,EADJA,OAEAuX,YAAiB,aACjB,IAUIgK,EAVE5nB,EAAWC,cACXtM,EAAUC,cACVusB,EAAensB,uBAAY,WAC5BqS,GACFA,IACDrG,EAAS8nB,kBACR,CAAC9nB,EAAUrM,IACR4rB,EAAmB,wBACjBC,EAAqBC,cAArBD,iBACApC,EAA4BN,KAA5BM,wBAmBR,OAhBEwK,EADU,YAATltB,EACa,2BAA6BoC,EAE7B,0BAA4BA,EAE5C4iB,cAAc,WACZF,EACE,iCACGD,EAAqB,IACtB,cAAC,KAAD,CAAM1V,UAAQ,EAACC,KAAM8d,EAArB,kCAKJxK,EAAwBmC,MAIxB,qCACE,cAAC,KAAD,UACE,cAAC,KAAD,UACE,cAAC,KAAD,QAGJ,cAAC,KAAD,UACE,cAAC,KAAD,CAAcpc,QAASgd,EAAvB,6BAEF,cAACjK,GAAA,EAAD,CAAK1jB,QAAQ,OAAOC,eAAe,gBAAgB6tB,SAAS,OAAOC,GAAI,EAAvE,SACE,cAAC,KAAD,CACE1W,UAAQ,EACR9D,MAAM,UACN1U,QAAQ,SACR4Y,UAAU,QACVH,KAAM8d,EALR,sD,gC1B/OFK,GAAS,SAACC,GAAD,OAAyBC,wBAAa5yB,OAAO2yB,GAASE,W,SAEhE7tB,K,kBAAAA,E,kBAAAA,E,mBAAAA,Q,cAMAC,K,cAAAA,E,YAAAA,E,gBAAAA,E,cAAAA,E,aAAAA,Q,KAeL,IAAM6tB,GAA2E,CAC/E,GAAM,CACJ7oB,KAAMhF,GAAY8tB,MAClBvZ,QAASxU,GAAQwH,SAInB,GAAM,CACJvC,KAAMhF,GAAY+tB,KAClBxZ,QAASxU,GAAQwH,UAuDfymB,GAAiB,SAACtxB,GACtB,IAAIuxB,EACEC,EAASxxB,EAAQyxB,OAAO,EAAG,GAAGlwB,cAEpC,GAAe,OAAXiwB,GAA8B,OAAXA,EACrB,OAvDgB,SAACxxB,GACnB,IAAIuxB,EAEJ,IAIIA,EAAUG,UAAOC,OAAO3xB,GAE1B,MAAOhB,GACP,MAAM,IAAIW,MAAM,mBAGlB,IAMMkY,EANiD,CACrD+Z,GAAIvuB,GAAQwH,QACZgnB,GAAIxuB,GAAQsH,QACZmnB,KAAMzuB,GAAQ0uB,SAG4BR,EAAQC,QAEpD,QAAgBtS,IAAZrH,EACF,MAAM,IAAIlY,MAAM,mBAGlB,IAAMqyB,EAAiBT,EAAQU,MAAM,GAErC,GAAID,EAAiB,GAAKA,EAAiB,GACzC,MAAM,IAAIryB,MAAM,mBAclB,MAAO,CACL+xB,QAAQ,EACR7Z,UACA7X,UACAsI,KAZkB,KAJPopB,UAAOQ,UAAUX,EAAQU,MAAMhvB,MAAM,IAIzCF,OACAO,GAAY6uB,OACS,IAAnBH,EACF1uB,GAAY8uB,KAEZ9uB,GAAY+uB,OAgBZC,CAAYtyB,GAGrB,IACEuxB,EAAUgB,4BAAiBvyB,GAC3B,MAAOhB,GACP,MAAM,IAAIW,MAAM,mBAXqC,IAc/CoD,EAAWwuB,EAAXxuB,OAER,GAAe,KAAXA,EACF,MAAM,IAAIpD,MAAM,mBAGlB,IAAM6yB,EAAUjB,EAAQ,GAElBkB,EAAWlB,EAAQtuB,MAAMF,EAAS,EAAGA,GACrC2d,EAAO6Q,EAAQtuB,MAAM,EAAGF,EAAS,GAEjC2vB,EAAmB3B,GAAOA,GAAOrQ,IAAOzd,MAAM,EAAG,GAEvD,GAAIwvB,EAASE,MAAK,SAACx1B,EAAey1B,GAAhB,OAAkCz1B,IAAUu1B,EAAiBE,MAC7E,MAAM,IAAIjzB,MAAM,mBAKlB,IAFsBid,OAAO6N,KAAK0G,IAAcvR,IAAIiT,QAEjCtU,SAASiU,GAC1B,MAAM,IAAI7yB,MAAM,mBAGlB,IAAMmzB,EAAc3B,GAAaqB,GAEjC,OAAO,2BACFM,GADL,IAEE9yB,UACA0xB,QAAQ,KAINqB,GAAW,SAAC/yB,EAAiB6X,GACjC,IACE,IAAMmb,EAAc1B,GAAetxB,GAEnC,OADAjB,QAAQ+I,IAAIkrB,IACRnb,GACKA,IAAYmb,EAAYnb,QAIjC,MAAO7Y,GACP,OAAO,IAKI+zB,M2BxJFE,GACA,iEADAA,GAEL,mDAFKA,GAGP,qDCgFOC,GAA+D,SAAC,GAEtE,IADL/jB,EACI,EADJA,OAEAtF,IAAgB,GAChB,IAAMf,EAAWC,cAFb,GAGYrM,cACqBuI,MAA7BzF,EAJJ,EAIIA,QAASuF,EAJb,EAIaA,gBAJb,EAKoD8G,oBAAS,GAL7D,mBAKGsnB,EALH,KAKyBC,EALzB,OAMkCvnB,mBAAS,IAN3C,mBAMGwnB,EANH,KAMgBC,EANhB,OAO0BznB,mBAAS,IAPnC,mBAOG0nB,EAPH,KAOYC,EAPZ,OAQkCruB,YAAYsuB,MAA1CvpB,EARJ,EAQIA,SAAUlK,EARd,EAQcA,QAAS8F,EARvB,EAQuBA,OACrB+R,EAAU1S,YAAYkF,KATxB,EAaAlF,YAAYyS,MAFdpU,EAXE,EAWFA,MAGI2G,GAdF,EAYFrL,WAAcK,UAECgG,YAAYC,OAdzB,EAesB4H,GAAa9C,EAAUqK,KAAOmf,MACjDC,GAhBH,EAeIrmB,KAfJ,EAeUC,Q3B4mBO,WACrB,IAAM/J,EAAQ2B,YAAYC,MADC,EAEC7B,GAAUC,GAA9BhE,EAFmB,EAEnBA,QAASsE,EAFU,EAEVA,OACX4B,EAAOJ,KACPwD,EAAWC,cAgBjB,MAAO,CAAE4qB,QAfO72B,sBAAW,uCAAC,WAAO6I,EAAuBG,EAAgBC,GAA9C,iBAAAhI,EAAA,yDAEtB61B,EAAeC,OAAOnuB,EAAKouB,MAAMC,MAAMjuB,EAAOoC,WAAY,WAE1D1I,IAAWkG,GAAmB,cAAX5B,EAJG,0CAMGkE,GAAexI,EAASkG,EAAMlC,EAAOmC,EAAeiuB,EAAc7tB,EAAO2oB,eAN5E,cAMhB5vB,EANgB,yBAOf,CAAC8I,IAAI,KAAMqB,OAAOnK,IAPH,yDASf,CAAC8I,IAAI,EAAD,GAAQqB,OAAO,OATJ,iCAYnB,CAACrB,IAAI,CAACsB,MAAM,EAAGC,QAAQ,wBAAyBF,OAAO,OAZpC,yDAAD,0DAaxB,CAACzJ,EAASkG,EAAM5B,EAAQN,EAAOsF,K2B7nBhBkrB,GAAXL,SAEDhY,EAAiBpR,YAAkBL,GACnC4X,EAAc7N,YAAezQ,GAC7BywB,EAAsBzf,YAAmBtK,GAGvC4U,EAD0BvU,YAAkB0pB,GAC5CnV,SACF7d,EAAKsE,mBACT,kBACE2uB,aAAyB,CACvBhqB,SAAUA,EACViP,YAAanZ,EACb+W,YAAavX,EACbmV,YAAaxK,EACb0N,QAASA,MAEb,CAAC3N,EAAUlK,EAASR,EAAS2K,EAAU0N,IAEnCsc,EAAyBC,aAA8BnzB,GAnCzD,EAoC4CsnB,cAAxCD,EApCJ,EAoCIA,iBAEF7O,GAtCF,EAoCsB4T,kBAEJvwB,sBAAW,sBAAC,gCAAAiB,EAAA,yDAChCq1B,GAAwB,IACpBruB,EAF4B,gCAGT4uB,EAAQ3zB,EAAS8F,EAAQ7E,EAAGyrB,aAHnB,OAG1BjtB,EAH0B,OAI9BV,QAAQ+I,IAAIrI,GACC,OAAVA,EAAImI,KAA+B,IAAjB,UAAAnI,EAAImI,WAAJ,eAASsB,OAC5BkqB,GAAwB,GACxB9K,GAAiB,UAAA7oB,EAAImI,WAAJ,eAASuB,UAAqB,GAAI,CACjDhP,QAAS,QACTg0B,SAAS,MAGXiF,GAAwB,GACxBE,EAAe7zB,EAAIwJ,SAbS,uBAgB9BmqB,GAAwB,GACxBtqB,EAAS4Q,cAAsB,IAjBD,4CAmB/B,CAAC5Q,EAAUqrB,EAAwBpvB,KAChCsvB,EAAiB7f,YAAmBtK,GACpCgmB,EAAwB3lB,YAAkB8pB,GAC1C5D,GAAqBxc,YAAeic,EAAsBvb,aAC1D2f,GAAkB/uB,mBAAQ,WAE7B,OAAOwtB,GAAS/yB,EAASqD,GAAQwH,WAEjC,CAAC4lB,GAAmBjV,UAAW3D,EAAS7X,IAEvCu0B,GAAS,SAATA,IACe,IAAblB,GAA4D,KAAxC,OAACE,QAAD,IAACA,OAAD,EAACA,EAAiBiB,YAAY,IACpDld,GAAQ+b,EAAoB,QAAP7vB,EAAc,UAAU,YAAYrB,MAAK,SAAC0X,GAC7D2Z,EAAW3Z,GACSb,YAAW,kBAAMub,MAAU,QAC9C1yB,OAAM,WACamX,YAAW,kBAAMub,MAAU,SAWtD,OANCxqB,qBAAU,WACS,IAAbspB,GACFkB,OAED,CAAClB,IAEY,IAAbA,EAC0C,KAAxC,OAACE,QAAD,IAACA,OAAD,EAACA,EAAiBiB,YAAY,GAEjC,qCACA,eAACn5B,EAAD,WACI,cAACI,EAAD,UACE,cAAC4T,GAAA,EAAD,CAAYpD,QAASkD,EAArB,SACE,cAAC,KAAD,QAGJ,cAACpT,EAAD,uBACA,cAACH,EAAD,OAEF,cAAC,EAAD,CAAcV,eAAa,EAA3B,SACA,cAAC,GAAD,CAAgC0K,KAAMytB,EAAavtB,OAAQA,EAAQtC,MAAOvC,EAAG0T,YAAaxF,OAAQA,SAKlG,qCACA,cAAC9T,EAAD,IAGE,eAAC,EAAD,CAAcH,eAAa,EAA3B,UAEF,cAAC,KAAD,UACE,cAAC,KAAD,CACE2T,MAAO8X,eACPe,eAAe,OAAC6L,QAAD,IAACA,OAAD,EAACA,EAAiBkB,gBAAiB,EAClD7M,oBAAqB,EAHvB,SAKE,cAAC9I,EAAD,CAAUvP,SAAS,UAAUV,MAAM,gBAGvC,cAAC,KAAD,UACE,eAACW,GAAA,EAAD,CAAYrV,QAAQ,QAAQmY,MAAM,SAAlC,WACG,OAACihB,QAAD,IAACA,OAAD,EAACA,EAAiBkB,gBAAiB,EADtC,OAC6C,EAD7C,sBAIF,cAAC,KAAD,UACA,eAACjlB,GAAA,EAAD,CAAYrV,QAAQ,QAAQmY,MAAM,SAAlC,0EACqE,QAAP9O,EAAc,UAAU,WADtF,iHAQD,qCACC,eAACnI,EAAD,WACE,cAACI,EAAD,UACE,cAAC4T,GAAA,EAAD,CAAYpD,QAASkD,EAArB,SACE,cAAC,KAAD,QAGJ,cAACpT,EAAD,6BACA,cAACH,EAAD,OAGF,eAAC,EAAD,CAAcV,eAAa,EAA3B,UACE,cAAC,KAAD,UACE,cAAC,KAAD,CACEiC,MACE,cAAC,GAAD,CACEA,MAAO2I,EACPgI,aAAc6N,EAAerG,YAKrC,cAAC9F,GAAA,EAAD,CAAYrV,QAAQ,QAAQoY,cAAY,EAAxC,qBAGA,cAAC,KAAD,CACEhV,MAAM,YACN0X,aAAcge,GACd91B,MACE,cAAC,GAAD,CACEA,MAAO2I,EACPgI,aAAc6N,EAAerG,UAInC,cAAC,KAAD,CACE/X,MAAM,OACN0X,aAAcge,GACd91B,MAAO2kB,EAAY1M,OAErB,cAAC,KAAD,CACE7X,MAAM,KACN0X,aAAcge,GACd91B,MAAO,cAAC,KAAD,CAAoBqY,WAAS,EAA7B,SAA+BxV,MAExC,cAAC,KAAD,IACA,cAACwP,GAAA,EAAD,CAAYrV,QAAQ,QAAQoY,cAAY,EAAxC,kBAGA,cAAC,GAAD,CACE/O,MAAOA,EACP0G,SAAUA,EACV5B,KAAMiM,KAAOmf,KACb3f,YAAY,OAGhB,cAAC2G,GAAA,EAAD,IACA,cAAC,EAAD,CAAc9f,QAAM,EAACK,YAAU,EAACC,eAAa,EAA7C,SACE,cAAC,KAAD,UACE,cAAC,KAAD,CAAc+Q,QAASwN,EAAejG,SAAU2f,GAAwBrtB,GAAQ,MAASwuB,GAAzF,SACIvvB,EAEEouB,EACA,gBACA,UAHA,2B,WC7QH/nB,GAAYvS,aAAW,SAACC,GAAD,MAAY,CAC9CC,KAAM,CACJwW,SAAU,IAKZmlB,MAAO,CACLj6B,WAAY,GACZ8U,SAAU,QAIDolB,GAAuD,SAACp7B,GAAW,IAAD,EAC/C6R,KAAtBspB,EADqE,EACrEA,MAAUl7B,EAD2D,yBAE7E,OACE,cAACo7B,GAAA,EAAD,aACEp7B,QAASA,EACTW,QAAQ,WACR06B,WACE,CAAEC,SAAS,EAAOt7B,QAAS,CAAET,KAAM27B,IAErC9S,WAAS,GACLroB,KAKGw7B,GAA2Bh7B,YAAO,MAAPA,CAAc,CACpDoC,UAAW,KAGA64B,GAA8Bj7B,YAAO,MAAPA,CAAc,CACvDC,UAAW,GACXwX,aAAc,KAGHyjB,GAAgCl7B,YAAO,MAAPA,CAAc,CACzDC,UAAW,EACXwX,aAAc,KCYH0jB,GAAkE,SAAC,GAEzE,IADLlV,EACI,EADJA,OAEMlX,EAAWC,cACThE,EAAoBE,KAApBF,gBAFJ,EAGwBI,YAAYyS,MAAhCpU,EAHJ,EAGIA,MAAO8Y,EAHX,EAGWA,SACTzE,EAAU1S,YAAYkF,KAJxB,EAKkClF,YAAYsuB,MAA1CvpB,EALJ,EAKIA,SAAUlK,EALd,EAKcA,QAAS8F,EALvB,EAKuBA,OACrBiW,EAAUM,GAAgBC,EAAUpS,GAC1CD,GAAqBC,GACrBgR,GAAiBia,KARb,IA0DAvpB,EA1DA,EASsBoB,GAAa9C,EAAUqK,KAAOmf,MAA1CnmB,GATV,EASID,KATJ,EASUC,SAGR4S,EAAoBrjB,uBACxB,SAACC,GACC+L,EAASsX,aAASrjB,EAAM6P,OAAOzP,UAEjC,CAAC2L,IAEGmX,EAAuBnjB,uBAC3B,SAACC,GACC+L,EAASssB,aAAmBr4B,EAAM6P,OAAOzP,UAE3C,CAAC2L,IAGGusB,EAAsBv4B,uBAC1B,SAACC,GACC+L,EAASwsB,aAAkBv4B,EAAM6P,OAAOzP,UAE1C,CAAC2L,IAGGysB,EAAqBz4B,uBACzB,SAACC,GACC+L,EAAS0sB,aAAiBz4B,EAAM6P,OAAOzP,UAEzC,CAAC2L,IAKGurB,EAAiB7f,YAAmBtK,GAEpCgmB,GADiB3lB,YAAkBL,GACXK,YAAkB8pB,IAE1C5D,GADeP,EAAbpR,SACmB7K,YAAeic,EAAsBvb,cAE1D2f,EAAkB/uB,mBAAQ,WAE9B,OAAOwtB,GAAS/yB,EAASqD,GAAQwH,WAEjC,CAAC4lB,EAAmBjV,UAAW3D,EAAS7X,IAEpCy1B,EACJz1B,GACAs0B,IACC/mB,EACGmoB,EAAyB,OAAZ3Z,EAGjBnQ,EAAU6pB,GAAkB3vB,EAAO,GAIrC,IAGMua,EAAiBvjB,uBAAY,WAC5BiI,GACH+D,EAAS4Q,cAAsB,IAE7BsG,GAAUyV,GAAkBC,GAC9B1V,MAED,CAAClX,EAAUkX,EAAQjb,EAAiB0wB,EAAgBC,IACvD,OACE,qCACE,eAAC,EAAD,WACE,cAAC5V,GAAD,UACE,cAAC,GAAD,CACEviB,MAAM,QACNof,KAAK,QACLuB,UAAWyX,IACXx4B,MAAOqG,EACPpG,SAAU+iB,MAGd,cAACL,GAAD,UACE,cAAC,GAAD,CACEviB,MAAM,QACNof,KAAK,OACLuB,UAAWiX,IACX7Y,SAAUA,EACVnf,MAAO+M,EACP9M,SAAU6iB,MAId,cAAC+U,GAAD,UACE,cAAC,GAAD,CACEh2B,QAASgB,IAAYs0B,EACrBsB,YAAW,8BAAyBnF,EAAmBrb,KAA5C,YACX7X,MAAM,eACNH,SAAUi4B,EACVl4B,MAAO6C,MAGX,cAACi1B,GAAD,UACE,cAAC,GAAD,CACEj2B,QAASgB,IAAYs0B,EACrBsB,YAAW,kBACXr4B,MAAM,0BACNH,SAAUm4B,SAMhB,cAAC7a,GAAA,EAAD,IACA,cAAC,EAAD,CAAc9f,QAAM,EAACK,YAAU,EAACC,eAAa,EAA7C,SACE,cAAC,KAAD,UACE,cAAC,KAAD,CACE+Q,QAASoU,EACT7M,WAAUzO,IAAmB6G,EAF/B,SAIG7G,EAAkB,OAAS,2B,sBChK3B8wB,GAAiF,SAAC,GAIxF,IAHLnmB,EAGI,EAHJA,KACAR,EAEI,EAFJA,QACA4mB,EACI,EADJA,SAEA,OACE,cAAC,GAAD,CAAcrnB,MAAM,IAAIiB,KAAMA,EAAMR,QAASA,EAA7C,SACE,eAACkB,GAAD,WACE,cAACC,GAAD,UACE,eAAC,EAAD,CAAcpV,YAAU,EAAxB,UACE,cAACuU,GAAA,EAAD,CAAYrV,QAAQ,KAAKmY,MAAM,SAASC,cAAY,EAApD,0CAGA,cAAC/C,GAAA,EAAD,CACErV,QAAQ,YACRmY,MAAM,SACNzD,MAAM,gBACN0D,cAAY,EAJd,8DAUJ,cAACjC,GAAD,UACE,eAAC,EAAD,CAAcpV,eAAa,EAA3B,UACE,cAAC,KAAD,UACE,cAACwmB,GAAA,EAAD,CAAQvnB,QAAQ,OAAO0U,MAAM,UAAU5C,QAASiD,EAAhD,6BAIF,cAAC,KAAD,UACE,cAAC,KAAD,CAAcjD,QAAS6pB,EAAvB,uDAgBDC,GAA+E,SAAC,GAKtF,IAJLC,EAII,EAJJA,QACA/pB,EAGI,EAHJA,QACAgqB,EAEI,EAFJA,eACAC,EACI,EADJA,cAEA,OACE,cAACC,GAAA,EAAD,CAAmBC,YAAaH,EAAhC,SACE,cAACI,GAAA,EAAD,CACEnnB,QAAS+mB,EACTvmB,KAAMwmB,EACNI,sBAAoB,EACpBC,sBAAoB,EACpBC,sBAAoB,EACpB/nB,MAAM,2DANR,SAQE,+BACE,cAAC,KAAD,CACEunB,QAASA,EACT77B,QAAQ,gBACR8R,QAASA,W,qBCxDfwqB,GAA+B59B,aAAW,SAACC,GAAD,MAAY,CAC1DC,KAAM,CACJ4nB,QAAS,WACTpR,SAAU,IAEZmO,YAAa,CACX/hB,SAAU,QAQD+6B,GAAmE,SAAC,GAO1E,IANLzqB,EAMI,EANJA,QACA2S,EAKI,EALJA,KACAzjB,EAII,EAJJA,SACA7B,EAGI,EAHJA,UAEGiD,GACC,EAFJwkB,OAEI,mEACE3lB,EAASq7B,KACf,OACE,eAAC5W,GAAA,EAAD,yBACE8W,OAAK,EACL1qB,QAASA,EACT3S,UAAWM,IAAWwB,EAAOrC,KAAMO,IAC/BiD,GAJN,cAME,cAACq6B,GAAA,EAAD,CAAct9B,UAAW8B,EAAOsiB,YAAhC,SACE,cAAC,KAAD,CAAYkB,KAAMA,EAAMrP,SAAS,QAAQpV,QAAQ,eAEnD,cAACqV,GAAA,EAAD,CAAYrV,QAAQ,UAApB,SAA+BgB,SAK/B07B,GAA2Bh+B,aAAW,SAACC,GAAD,MAAY,CACtDC,KAAM,CACJwW,SAAU,IAEZunB,WAAY,CACVnW,QAAQ,aAEVoW,iBAAkB,CAChBp7B,SAAU,IAEZq7B,UAAW,CACTv8B,WAAY,EACZ0B,UAAW,KAEb86B,WAAY,CACVt8B,cAAe,QAcNu8B,GAA2D,SAAC,GAMlE,IALLxnB,EAKI,EALJA,KACAR,EAII,EAJJA,QACAioB,EAGI,EAHJA,WACAC,EAEI,EAFJA,WACAn2B,EACI,EADJA,GAEM7F,EAASy7B,KACTQ,EAAcv6B,uBAAY,WAC1BoS,GACFA,MAED,CAACA,IANA,EAOkCrD,oBAAS,GAP3C,mBAOGyrB,EAPH,KAOgBC,EAPhB,KAQEC,EAAqB16B,uBAAY,WACrCy6B,GAAe,KACd,IACGE,EAA0B36B,uBAAY,WAC1Cy6B,GAAe,KACd,IAbC,EAegC1rB,oBAAS,GAfzC,mBAeG6rB,EAfH,KAeeC,EAff,KAgBEC,EAAoB96B,uBAAY,WACpC66B,GAAc,KACb,IACGE,EAAmB/6B,uBAAY,WACnC66B,GAAc,KACb,IAEH,OACE,qCACE,eAAC,GAAD,CAAcjoB,KAAMA,EAAMR,QAASmoB,EAAa/9B,UAAW8B,EAAOrC,KAAlE,UACE,eAAC,GAAD,CAAkBO,UAAW8B,EAAO07B,WAAY5nB,QAASmoB,EAAzD,UACE,cAACT,GAAA,EAAD,CAAct9B,UAAW8B,EAAO27B,iBAAhC,SACE,cAAC,KAAD,CACEnY,KAAMkZ,KACNvoB,SAAS,QACTpV,QAAQ,YAGZ,cAACqV,GAAA,EAAD,CAAYrV,QAAQ,UAApB,iCAEF,eAACiW,GAAD,WACE,cAACC,GAAD,UACE,sBAAK/W,UAAW8B,EAAO47B,UAAvB,UACE,cAAC,GAAD,CAAqBpY,KAAMmZ,KAAS9rB,QAAS4rB,EAA7C,uCAGA,cAAC,GAAD,CACEjZ,KAAMoZ,KACN/rB,QAASwrB,EAFX,qCAQJ,eAACnnB,GAAD,WACE,cAAC,EAAD,CAAchW,eAAe,SAAShB,UAAW8B,EAAO67B,WAAxD,SACE,eAACznB,GAAA,EAAD,CAAYrV,QAAQ,UAApB,0BAA4C8G,EAAG/B,QAEjD,cAACwb,GAAA,EAAD,IACA,cAAC,EAAD,CAAcxf,eAAa,EAACD,YAAU,EAACX,eAAe,SAAtD,SACE,cAAConB,GAAA,EAAD,yBACEvnB,QAAQ,WACRwnB,KAAK,QACL/O,KAAK,8CACDqlB,MAJN,6CAYR,cAAC,GAAD,CACEvoB,KAAM4nB,EACNpoB,QAASsoB,EACTL,WAAYA,IAEbC,GACC,cAAC,GAAD,CACE1nB,KAAMgoB,EACNxoB,QAAS0oB,EACTR,WAAYA,QAaTc,GAA6F,SAAC,GAIpG,IAHLxoB,EAGI,EAHJA,KACAR,EAEI,EAFJA,QACAioB,EACI,EADJA,WACI,EAC4BtrB,oBAAS,GADrC,mBACGssB,EADH,KACaC,EADb,KAEEC,EAAiBv7B,uBAAY,WACjCs7B,GAAY,GACZjB,MACC,CAACA,IACJ,OACE,cAAC,GAAD,CAAc1oB,MAAM,uBAAuBiB,KAAMA,EAAMR,QAASA,EAAhE,SACE,eAACkB,GAAD,WACE,cAACC,GAAD,UACE,eAAC,EAAD,CAAcpV,YAAU,EAAxB,UACE,cAACuU,GAAA,EAAD,CAAYrV,QAAQ,KAAKmY,MAAM,SAASC,cAAY,EAApD,2BAGA,cAAC/C,GAAA,EAAD,CACErV,QAAQ,QACRmY,MAAM,SACNzD,MAAM,gBACN0D,cAAY,EAJd,iHAWJ,cAACjC,GAAD,UACE,eAAC,EAAD,CAAcpV,eAAa,EAA3B,UACE,cAAC,KAAD,UACE,eAAC,KAAD,CACEf,QAAQ,OACR0U,MAAM,UACNypB,UAAW,cAAC,KAAD,IACXrsB,QAASosB,EACT7kB,SAAU2kB,EALZ,UAOGA,EAAW,cAAgB,SAP9B,oBAUF,cAAC,KAAD,UACE,cAAC,KAAD,CAAclsB,QAASiD,EAASsE,SAAU2kB,EAA1C,iCAiBRI,GAAiB,SAACzyB,GACtB,OAAO+sB,OAAO2F,UAAU3F,OAAO/sB,KAGpB2yB,GAA2E,SAAC,GAIlF,IAHL/oB,EAGI,EAHJA,KACAR,EAEI,EAFJA,QACAkoB,EACI,EADJA,WACI,EACwBvrB,mBAAS,IADjC,mBACG/F,EADH,KACW4yB,EADX,OAEoB7sB,mBAAS,IAF7B,mBAEGmhB,EAFH,KAES2L,EAFT,OAGoB9sB,mBAAS,IAH7B,mBAGGqhB,EAHH,KAGS0L,EAHT,OAI4B/sB,oBAAS,GAJrC,mBAIGgtB,EAJH,KAIaC,EAJb,KAKEC,EAAQjzB,GAAUknB,GAAQE,EAC1BqI,EAAqBz4B,uBAAY,SAACC,GACtC,IAAMi8B,EAAWj8B,EAAM6P,OAAOzP,MAC1Bo7B,GAAeS,IACjBN,EAAUM,KAEX,IACGC,EAAmBn8B,uBAAY,SAACC,GACpC,IAAMi8B,EAAWj8B,EAAM6P,OAAOzP,MAC1Bo7B,GAAeS,IACjBL,EAAQK,KAET,IACGE,EAAmBp8B,uBAAY,SAACC,GACpC67B,EAAQ77B,EAAM6P,OAAOzP,SACpB,IAEGg8B,EAAiBr8B,uBAAY,WACjCg8B,GAAY,GACZ1B,EAAWvE,OAAO/sB,GAAS+sB,OAAO7F,GAAOE,KACxC,CAACkK,EAAYlK,EAAMF,EAAMlnB,IAE5B,OACE,cAAC,GAAD,CAAc2I,MAAM,0BAA0BiB,KAAMA,EAAMR,QAASA,EAAnE,SACE,eAACkB,GAAD,WACE,cAACC,GAAD,UACE,eAAC,EAAD,CAAcpV,YAAU,EAAxB,UACE,cAAC85B,GAAD,UACE,cAAC,GAAD,CACEx3B,MAAM,gBACNJ,MAAO2I,EACP1I,SAAUm4B,EACVK,YAAY,2BAGhB,cAACb,GAAD,UACE,cAAC,GAAD,CACEx3B,MAAM,mBACNJ,MAAO+vB,EACP9vB,SAAU87B,EACVtD,YAAY,6BAGhB,cAACb,GAAD,UACE,cAAC,GAAD,CACEx3B,MAAM,OACNJ,MAAO6vB,EACP5vB,SAAU67B,EACVrD,YAAY,kCAKpB,cAACtlB,GAAD,UACE,eAAC,EAAD,CAAcpV,eAAa,EAA3B,UACE,cAAC,KAAD,UACE,eAAC,KAAD,CACEf,QAAQ,OACR0U,MAAM,UACN5C,QAASktB,EACT3lB,SAAUqlB,IAAaE,EAJzB,UAMGF,EAAW,cAAgB,SAN9B,oBASF,cAAC,KAAD,UACE,cAAC,KAAD,CAAc5sB,QAASiD,EAASsE,SAAUqlB,EAA1C,iCChUDO,GAAiB,SAACC,GAC7B,IAAMp4B,EAAKq4B,aAAQD,GACX31B,EAAkBD,4BAAlBC,cACFmU,EAAU1S,YAAYkF,KACtBkvB,EAAY3c,OAAO4c,QAAQ91B,GAAe+1B,QAC9C,SAACC,EAAG7zB,GAAJ,mBAAC,eACI6zB,GADL,kBAEG7zB,EAAE,GAAKA,EAAE,GAAG9B,aAEf,IAEI41B,EAAcC,aAAWC,eAAa,CAC1CC,QAAS,CACP74B,KACAs4B,YACAQ,IAAKC,aAASniB,GACdoiB,aAAcC,KACdC,WAAYC,KAGZC,aAAczd,OAAOC,OAAOwc,EAAgB5R,cAAc,IAE5D6S,SAAUl6B,IAAIm6B,kBAKhB,OAFAC,GAAiCb,EAAY,IAEtCA,GAKIa,GAAmC,SAC9CC,KCuBWC,GAA6D,SAAC,GAGpE,IAFLj+B,EAEI,EAFJA,QACAkE,EACI,EADJA,SAEAkJ,IAAgB,GAChB,IAAMf,EAAWC,cAEXhE,EADaE,KAAXnB,SAC2B/C,EAAaiE,UAC1CxB,EAAQ2B,YAAY2Q,MALtB,EAM8BjK,oBAAS,GANvC,mBAMG8uB,EANH,KAMcC,EANd,OAO8BlP,eAAtBC,EAPR,EAOI1qB,GAAcmZ,EAPlB,EAOkBA,QAPlB,EAQgBvO,mBAAyB8f,GARzC,mBAQG1qB,EARH,KAQO6qB,EARP,KASJ/gB,GAAkB9J,EAAG/B,IAErB6sB,YAAaC,aAAe/qB,IAXxB,MAYgC2Q,cAZhC,mBAYGqa,EAZH,KAYeC,EAZf,KAaJniB,qBAAU,WACHhF,GACHmnB,EAAc,wBAEf,CAACnnB,EAAiBmnB,IAErBniB,qBAAU,YACR,OAAIqQ,QAAJ,IAAIA,OAAJ,EAAIA,EAASygB,YACX/O,EAAMH,GACNiP,GAAa,GACbn+B,EAAQ8vB,QAAR,2BAAqB5rB,GAArB,IAA+BwZ,WAAO+E,KACtClG,YAAW,WACT4hB,GAAa,KACZ,QAEJ,CAACn+B,EAASkE,EAAUyZ,EAASuR,IAEhC,IAAMQ,EAA0BrvB,uBAAY,WAC1CL,EAAQ2vB,WACP,CAAC3vB,IACEkY,EAAW,OAAGgX,QAAH,IAAGA,OAAH,EAAGA,EAAUhX,YAjC1B,EhCtDgC,SAAC1T,GACrC,IAAM6H,EAAWC,cACXtM,EAAUC,cACR4rB,EAAqBC,cAArBD,iBACAvjB,EAAoBE,KAApBF,gBAJoD,EAMxB8G,oBAAS,GANe,mBAMrDivB,EANqD,KAMzCC,EANyC,KAOtDC,EAAkBl+B,uBAAY,WAClCi+B,GAAc,KACb,IAcH,MAAO,CAAED,aAAYG,eAbEn+B,uBAAY,WAC7BiI,GACFg2B,GAAc,KAEf,CAACh2B,IASiCi2B,kBAAiB3C,eAR/Bv7B,uBAAY,WACjCe,EAAGmE,SAASf,GAAIkB,MAAK,WACnB2G,EAASoyB,aAAkBj6B,IAC3BqnB,EAAiB,eAAD,OAAgBzlB,EAAY5B,EAAG/B,GAAI,GAAnC,cAChBzC,EAAQQ,KAAKgE,EAAGqH,OAASiM,KAAO9W,KAAOD,IAAMC,KAAOD,IAAME,cAE3D,CAACoL,EAAUrM,EAAS6rB,EAAkBrnB,KgCyErCk6B,CAAuBl6B,GAJzB65B,EApCE,EAoCFA,WACAG,EArCE,EAqCFA,eACAD,EAtCE,EAsCFA,gBACA3C,EAvCE,EAuCFA,eAvCE,EdxC6C,WAAO,IAChDzsB,EAAYga,KAAZha,QAD+C,EAEjBC,oBAAS,GAFQ,mBAEhDuvB,EAFgD,KAEnCC,EAFmC,OAGbxvB,oBAAS,GAHI,mBAGhDqqB,EAHgD,KAGjCoF,EAHiC,KAKjDC,EAAqBz+B,uBAAY,WACrCw+B,GAAiB,KAChB,IAcH,MAAO,CACLF,cACAI,gBAdsB1+B,uBAAY,WAC7B8O,EAGH0vB,GAAkBpF,GAFlBmF,GAAe,KAIhB,CAACzvB,EAASsqB,IASXuF,iBAPuB3+B,uBAAY,WACnCu+B,GAAe,KACd,IAMDnF,gBACAqF,sBc8DEG,GALFN,EA3CE,EA2CFA,YACAI,EA5CE,EA4CFA,gBACAC,EA7CE,EA6CFA,iBACAvF,EA9CE,EA8CFA,cACAqF,EA/CE,EA+CFA,mBA/CE,EAkD8B3V,GAAwB6V,GAAlD7vB,EAlDJ,EAkDIA,QAASoa,GAlDb,EAkDaA,aAEjBjc,qBAAU,WACR,GAAI4K,EAAa,CACf,IAAM0G,EAAoB0G,YAA0BpN,GACpD7L,EAASsX,aAAS/E,EAAkBrX,YAErC,CAAC8E,EAAU6L,IAEd,IAAM0X,GAAyBvvB,uBAAY,WACzCgM,EAAS4Q,cAAsB,MAC9B,CAAC5Q,IA7DA,GAmEAknB,aAAwB/uB,GAH1B06B,GAhEE,GAgEFA,mBACA1L,GAjEE,GAiEFA,gBAjEE,GAkEFC,sBAIF,OACE,qCACE,eAAC70B,EAAD,WACE,cAACI,EAAD,WACU,OAAP2e,QAAO,IAAPA,OAAA,EAAAA,EAASC,QACR,cAAChL,GAAA,EAAD,CAAYpD,QAASkgB,EAArB,SACE,cAAC,KAAD,QAIN,cAACpwB,EAAD,UAAakwB,IACb,eAACrwB,EAAD,WACE,cAAC,GAAD,CACEo6B,QAASpqB,EACTK,QAASuvB,EACTtF,cAAeA,EACfD,eAAgBsF,IAElB,cAAC,KAAD,CACEphC,QAAQ,WACR8R,QAASgvB,EACTjF,QAAS8E,UAIf,eAAC,EAAD,CAAc5/B,eAAa,EAA3B,UACGy/B,GAAa,cAAC,GAAD,CAAgBjpB,YAAU,IACvC3M,IAAoB41B,GAAa,cAAC,GAAD,CAA0B15B,GAAIA,KAC9D8D,GACA,qCACE,cAAC,KAAD,UACE,cAAC,KAAD,UACE,cAAC,GAAD,QAGJ,cAAC,KAAD,CAAckH,QAASogB,GAAvB,kCAMLtnB,GACC,qCACE,cAAC2V,GAAA,EAAD,IACA,eAAC,EAAD,CAAc9f,QAAM,EAACK,YAAU,EAACC,eAAa,EAA7C,UACE,cAAC,KAAD,CACEqC,MAAM,YACNJ,MACE,cAAC,GAAD,CACEA,MAAO,EACP2Q,aAAc6tB,GAAmBrmB,QAGrCsmB,gBACE,cAAC,GAAD,CACEz+B,MAAO,EACPq0B,OAAO,IACPrc,aAAc,EACd0mB,mBAAiB,MAIvB,cAAC,KAAD,CAAgBt+B,MAAM,OAAOJ,MAAO8yB,GAAgB7a,OACpD,cAAC,KAAD,CACE7X,MAAM,KACNJ,MACE,cAAC,KAAD,CAAoBqY,WAAS,EAA7B,SACGvU,EAAGkY,gBAIV,cAAC,KAAD,IACA,cAAC,GAAD,CACE3V,MAAOA,EACP0G,SAAUyxB,GAAmB33B,OAC7BsE,KAAMiM,KAAOmf,OAEf,cAAC,GAAD,CAAOjnB,GAAI,CAAEkf,WAAUvR,QAASA,WAItC,cAAC,GAAD,CACE1K,KAAM0rB,EACNlsB,QAASusB,EACT3F,SAAU9P,KAEZ,cAAC,GAAD,CACE/kB,GAAIA,EACJyO,KAAMorB,EACN5rB,QAAS8rB,EACT7D,WAAYkB,IAEd,cAAC,GAAD,CAAO5rB,GAAI,CAAEypB,gBAAevK,WAAUvR,QAASA,SAS/C0hB,GAA6E,SAAC,GAE7E,IADL76B,EACI,EADJA,GAEMxE,EAAUC,cACViE,EAAWgV,cAFb,EAG6ByjB,GAAen4B,GAH5C,mBAGG86B,EAHH,KAGYh1B,EAHZ,KAGkB0zB,EAHlB,KAIJ1wB,qBACE,kBAAM,WACJhL,QAAQ8kB,KAAK,uBACb4W,EAAQuB,UAEV,CAACvB,IATC,MAYgC5uB,oBAAS,GAZzC,mBAYGoc,EAZH,KAYegU,EAZf,OAaoCpwB,oBAAS,GAb7C,mBAaGqwB,EAbH,KAcE7L,GAdF,KAciBvzB,uBAAY,WAC/Bm/B,GAAc,GACdl1B,EAAK,CAAEuB,KAAM,aACZ,CAACvB,KACEo1B,EAAer/B,uBAAY,WAC/BL,EAAQ8vB,QAAR,2BACK5rB,GADL,IAEEwZ,MAAO,CACLC,QAAS,CACPygB,UAAU,SAIf,CAACp+B,EAASkE,IAEboJ,qBAAU,WACc,gBAAlBgyB,EAAQ5+B,OACVV,EAAQ8vB,QAAQ,CACd3W,SAAUpY,IAAM4+B,oBAChBniB,OAAQ,IAAMC,aAAoB6hB,EAAQjC,QAAQ74B,QAGrD,CAACxE,EAASs/B,EAAQ5+B,MAAO4+B,EAAQjC,QAAQ74B,KAG5C,IAAMkZ,EAAQ4hB,EAAQ5+B,MAEtB,OADA4B,QAAQuK,MAAMrI,EAAG/B,GAAIib,GACbA,GAEN,IAAK,UACH,OACE,cAAC,GAAD,CACElZ,GAAIA,EACJ8mB,SAAUsI,EACVpI,WAAYA,EACZC,gBAAiBgU,EACjBlU,SAAUmU,IAGhB,IAAK,eACL,IAAK,iBACL,IAAK,cACH,OACE,cAAC,GAAD,CACEl7B,GAAI86B,EAAQjC,QAAQ74B,GACpBsM,SAAO,EACPwiB,aAAwB,gBAAV5V,EACd6N,SAAUmU,IAGhB,IAAK,eACH,OAAO,cAAC,GAAD,CAAgB1qB,OAAO,wBAChC,IAAK,WACH,OAAO,cAAC,GAAD,CAAgBA,OAAO,yBAChC,IAAK,gBACH,OAAO,cAAC,GAAD,CAAwBxQ,GAAI86B,EAAQjC,QAAQ74B,KACrD,QACE,OAAO,cAAC,GAAD,MCxTPo7B,GAA+D,WAAO,IAAD,EACjDxwB,mBAASujB,KAAoBC,SADoB,mBAClEC,EADkE,KAC5DC,EAD4D,KAEnEC,EAAgB1yB,uBAAY,WAChCyyB,EAAQH,KAAoBK,QAC3B,IACGC,EAAa5yB,uBAAY,WAC7ByyB,EAAQH,KAAoBC,WAC3B,IAEH,OACE,qCACGC,IAASF,KAAoBC,SAC5B,qCACE,cAAC,EAAD,IACA,cAAC,GAAD,CAAoBrP,OAAQwP,OAG/BF,IAASF,KAAoBK,MAC5B,cAAC,GAAD,CAAiBtgB,OAAQugB,QAMpB4M,GAAiC,WAE5C,OADAvQ,YAAa,aAEX,qCACE,cAAC,IAAD,CAAO8D,OAAK,EAAClzB,KAAMa,IAAME,QAAS8U,UAAW6pB,KAC7C,cAAC,IAAD,CACExM,OAAK,EACLlzB,KAAMa,IAAM4+B,oBACZ5pB,UAAWkoB,S,uFCpCN6B,GAAyB,CACpCC,aAAWC,QACXD,aAAWE,QACXF,aAAWG,aACXH,aAAWI,c,mGCIPC,GAAmChkC,aAAW,SAACC,GAAD,MAAY,CAC9DC,KAAM,CACJ+jC,WAAY,EACZjhC,WAAY/C,EAAMikC,QAAQ,MAE5Bhc,OAAQ,CACNlS,MAAO/V,EAAMuV,QAAQoW,OAAOuY,WAchC,SAASC,GAAwB1jC,GAC/B,IAAM6B,EAASyhC,KACT/jC,EAAQ6Y,eACNurB,EAA2C3jC,EAA3C2jC,MAAOC,EAAoC5jC,EAApC4jC,KAAMC,EAA8B7jC,EAA9B6jC,YAAaC,EAAiB9jC,EAAjB8jC,aA0BlC,OACE,sBAAK/jC,UAAW8B,EAAOrC,KAAvB,UACE,cAACsW,GAAA,EAAD,CACE/V,UAAW8B,EAAO2lB,OAClB9U,QA5B6B,SACjClP,GAEAsgC,EAAatgC,EAAO,IA0BhByW,SAAmB,IAAT2pB,EACV7tB,aAAW,aAJb,SAMuB,QAApBxW,EAAM+wB,UAAsB,cAAC,KAAD,IAAmB,cAAC,KAAD,MAElD,cAACxa,GAAA,EAAD,CACE/V,UAAW8B,EAAO2lB,OAClB9U,QA9BwB,SAC5BlP,GAEAsgC,EAAatgC,EAAOogC,EAAO,IA4BvB3pB,SAAmB,IAAT2pB,EACV7tB,aAAW,gBAJb,SAMuB,QAApBxW,EAAM+wB,UACL,cAAC,KAAD,IAEA,cAAC,KAAD,MAGJ,cAACxa,GAAA,EAAD,CACE/V,UAAW8B,EAAO2lB,OAClB9U,QApCwB,SAC5BlP,GAEAsgC,EAAatgC,EAAOogC,EAAO,IAkCvB3pB,SAAU2pB,GAAQG,KAAKC,KAAKL,EAAQE,GAAe,EACnD9tB,aAAW,YAJb,SAMuB,QAApBxW,EAAM+wB,UACL,cAAC,KAAD,IAEA,cAAC,KAAD,MAGJ,cAACxa,GAAA,EAAD,CACE/V,UAAW8B,EAAO2lB,OAClB9U,QA1C4B,SAChClP,GAEAsgC,EAAatgC,EAAOugC,KAAKE,IAAI,EAAGF,KAAKC,KAAKL,EAAQE,GAAe,KAwC7D5pB,SAAU2pB,GAAQG,KAAKC,KAAKL,EAAQE,GAAe,EACnD9tB,aAAW,YAJb,SAMuB,QAApBxW,EAAM+wB,UAAsB,cAAC,KAAD,IAAoB,cAAC,KAAD,SAMzD,IAAM4T,GAAqC5kC,aAAW,SAACC,GAAD,MAAY,CAChEC,KAAM,CACJ+jC,WAAY,GAEd/b,OAAQ,CACNJ,QAAS,EACTpR,SAAU,GACVvV,WAAY,EACZ6U,MAAO/V,EAAMuV,QAAQoW,OAAOuY,WAIhC,SAASU,GAA0BnkC,GACjC,IAAM6B,EAASqiC,KACT3kC,EAAQ6Y,eACNurB,EAA2C3jC,EAA3C2jC,MAAOC,EAAoC5jC,EAApC4jC,KAAMC,EAA8B7jC,EAA9B6jC,YAAaC,EAAiB9jC,EAAjB8jC,aAclC,OACE,sBAAK/jC,UAAW8B,EAAOrC,KAAvB,UACE,cAACsW,GAAA,EAAD,CACE/V,UAAW8B,EAAO2lB,OAClB9U,QAhBwB,SAC5BlP,GAEAsgC,EAAatgC,EAAOogC,EAAO,IAcvB3pB,SAAmB,IAAT2pB,EACV7tB,aAAW,gBAJb,SAMuB,QAApBxW,EAAM+wB,UACL,cAAC,KAAD,CAAkBta,SAAS,YAE3B,cAAC,KAAD,CAAkBA,SAAS,cAG/B,cAACF,GAAA,EAAD,CACE/V,UAAW8B,EAAO2lB,OAClB9U,QAtBwB,SAC5BlP,GAEAsgC,EAAatgC,EAAOogC,EAAO,IAoBvB3pB,SAAU2pB,GAAQG,KAAKC,KAAKL,EAAQE,GAAe,EACnD9tB,aAAW,YAJb,SAMuB,QAApBxW,EAAM+wB,UACL,cAAC,KAAD,CAAkBta,SAAS,YAE3B,cAAC,KAAD,CAAkBA,SAAS,iBAOrC,IAAMouB,GAA4B9kC,aAAW,SAACC,GAAD,MAAY,CACvD8kC,QAAS,CACPtiC,QAAS,OACTC,eAAgB,gBAChBY,UAAW,GACX5B,aAAc,EACdF,YAAa,EACb,iBAAkB,CAChBiB,QAAS,SAGbuiC,OAAQ,CACNviC,QAAS,QAEXwiC,QAAS,CACPvuB,SAAU,GACVzT,YAAa,OAIJiiC,GAA4D,SACvExkC,GAEA,IAAMC,EAAUmkC,KAChB,OACE,cAACK,GAAA,EAAD,aACExrB,UAAWwM,KACXxlB,QAASA,EACTykC,mBAAoB,CAAC,GACrBC,iBAAkBjB,IACd1jC,KAKJ4kC,GAAwB,SAAC,GAAD,IAC5BjB,EAD4B,EAC5BA,MACAC,EAF4B,EAE5BA,KAF4B,gBAMrBA,EAAO,EANc,eAMND,IAElBkB,GAA8BvlC,aAAW,SAACC,GAAD,MAAY,CACzD8kC,QAAS,CACPtiC,QAAS,cACTC,eAAgB,gBAChBY,UAAW,GACX5B,aAAc,EACdF,YAAa,EACb,iBAAkB,CAChBiB,QAAS,SAGbuiC,OAAQ,CACNviC,QAAS,QAEXwiC,QAAS,CACPvuB,SAAU,QAID8uB,GAA8D,SAAC,GAGrE,IAFLjB,EAEI,EAFJA,YACG7jC,EACC,+BACEC,EAAU4kC,KAChB,OACE,cAACJ,GAAA,EAAD,aACExrB,UAAWwM,KACXxlB,QAASA,EACT4jC,YAAaA,EACba,mBAAoB,CAACb,GACrBkB,iBAAkB,6BAClBC,mBAAoBJ,GACpBD,iBAAkBR,IACdnkC,KAKJilC,GAAqB3lC,YAAW,CACpCiT,KAAM,GACN2yB,KAAM,CACJnjC,QAAS,UAQAojC,GAA+C,SAAC,GAGtD,IAFLC,EAEI,EAFJA,KACAxjC,EACI,EADJA,SAEMC,EAASojC,KACf,OAAO,qBAAKllC,UAAWqlC,EAAOvjC,EAAO0Q,KAAO1Q,EAAOqjC,KAA5C,SAAmDtjC,K,WCtPtDyjC,GAAmB,CACvBvkC,YAAa,GACbE,aAAc,IAGVskC,GAA8BhmC,aAAW,SAACC,GAAD,MAAY,CACzDC,KAAK,2BACA6lC,IADD,IAEFnkC,WAAY,GACZ4Q,WAAYvS,EAAMgC,aAAagkC,qBAC/BxjC,QAAS,OACTC,eAAgB,gBAChBC,WAAY,WAEdolB,OAAQ,GACRme,QAAS,CACPzjC,QAAS,OACTE,WAAY,cAIHwjC,GAAsBjlC,YAAO,MAAPA,EAAc,cAAGjB,MAAH,sBAC5C8lC,OAOQK,GAAiE,SAAC,GAGxE,IAFLxwB,EAEI,EAFJA,MACAtT,EACI,EADJA,SAEMC,EAASyjC,KACf,OACE,sBAAKvlC,UAAW8B,EAAOrC,KAAvB,UACE,cAACyW,GAAA,EAAD,CAAYrV,QAAQ,KAApB,SAA0BsU,IAC1B,qBAAKnV,UAAW8B,EAAO2jC,QAAvB,SAAiC5jC,QAKjC+jC,GAAoCrmC,aAAW,SAACC,GAAD,MAAY,CAC/DC,KAAK,2BACA6lC,IADD,IAEFnkC,WAAY,GACZE,cAAe,EACf0Q,WAAYvS,EAAMgC,aAAagkC,qBAC/B1wB,aAAa,aAAD,OAAetV,EAAMuV,QAAQC,WAE3CG,MAAO,CACL0wB,WAAYrmC,EAAMsmC,WAAWC,eAC7BptB,WAAY,SAIHqtB,GAAuE,SAAC,GAE9E,IADL7wB,EACI,EADJA,MAEMrT,EAAS8jC,KACf,OACE,qBAAK5lC,UAAW8B,EAAOrC,KAAvB,SACG0V,GACC,cAACe,GAAA,EAAD,CAAYrV,QAAQ,WAAWb,UAAW8B,EAAOqT,MAAjD,SACGA,OAOE8wB,GAAgCxlC,YAAO,MAAPA,EAAc,gBAAGjB,EAAH,EAAGA,MAAH,mBAAC,eACvD8lC,IADsD,IAEzDnkC,WAAY,GACZE,cAAe,GACfE,gBAAiB/B,EAAMgC,aAAagkC,0BAGzBU,GAA4B3mC,aAAW,SAACC,GAAD,MAAY,CAC9DC,KAAK,2BACA6lC,IADD,IAEFnkC,WAAY,GACZE,cAAe,GACfyT,aAAa,aAAD,OAAetV,EAAMuV,QAAQC,SACzChT,QAAS,OACTC,eAAgB,gBAChBC,WAAY,WAEdikC,QAAS,CACPC,UAAW,cAEbC,SAAU,GACV1uB,KAAM,CACJnV,YAAa,GAEfuV,KAAM,CACJvV,YAAa,IAEf8jC,SAAU,CACRtkC,QAAS,cACTQ,YAAa,GAEf+jC,cAAe,CACb/jC,YAAa,IAEfgkC,mBAAoB,GACpBC,YAAa,CACX/lC,UAAW,EACXwX,aAAc,GAEhB/C,MAAO,CACLc,SAAU,IAEZsD,MAAO,GACPmtB,QAAS,CACPzwB,SAAU,GACVjU,QAAS,eACTQ,YAAa,GAEf+rB,KAAM,CACJtY,SAAU,GACVjU,QAAS,eACTQ,YAAa,GACb,eAAgB,CACdA,YAAa,IAGjBmkC,YAAa,CACX1wB,SAAU,GACViC,cAAe,EACf1V,YAAa,GAEfijC,QAAS,CACPvwB,SAAU,EACVjU,aAAc,GACde,QAAS,OACTC,eAAgB,YAElBuI,OAAQ,OChIGo8B,GAAwE,SAAC,GAG/E,IAFLj/B,EAEI,EAFJA,GACAk/B,EACI,EADJA,SAEMr3B,EAAWC,cACXtM,EAAUC,cAEV0jC,EAAiBtjC,uBAAY,WACjCL,EAAQQ,KAAK,CACX2Y,SAAUpY,IAAMwc,iBAChBC,OAAQ,IAAMC,aAAoBjZ,GAClCkZ,MAAO,CACLC,QAAS,CACPygB,UAAU,MAIhB/xB,EAASu3B,cAAmB,MAC3B,CAACv3B,EAAUrM,EAASwE,IAEvB,OAAIq/B,aAA2Br/B,IAAOk/B,EAElC,cAAC,GAAD,CACEl/B,GAAIA,EACJk/B,SAAUA,EACVI,WAAYH,IAIX,cAAC,GAAD,CAA6Bn/B,GAAIA,KAG7Bu/B,GAAuE,SAAC,GAE9E,IADLv/B,EACI,EADJA,GAEM6H,EAAWC,cACXtM,EAAUC,cAFZ,EhB3CwB,SAAC+jC,GAC7B,IAAMx/B,EAAKq4B,aAAQmH,GACX/8B,EAAkBD,4BAAlBC,cACFmU,EAAU1S,YAAYkF,KACtBkvB,EAAY3c,OAAO4c,QAAQ91B,GAAe+1B,QAC9C,SAACC,EAAG7zB,GAAJ,mBAAC,eACI6zB,GADL,kBAEG7zB,EAAE,GAAKA,EAAE,GAAG9B,aAEf,IAaF,OAXoB61B,aAAW8G,eAAa,CAC1C5G,QAAS,CACP74B,KACAs4B,YACAQ,IAAKC,aAASniB,GACdoiB,aAAc0G,KACdxG,WAAYyG,MAEdtG,SAAUl6B,IAAIm6B,kBgB2BasG,CAAe5/B,GAHxC,mBAGG86B,EAHH,KAGctB,EAHd,KAIJ1wB,qBACE,kBAAM,WACJ0wB,EAAQuB,UAEV,CAACvB,IAUH,IAAMqG,EAAehkC,uBAAY,WAC/BL,EAAQQ,KAAK,CACX2Y,SAAUpY,IAAMwc,iBAChBC,OAAQ,IAAMC,aAAoBjZ,GAClCkZ,MAAO,CACLC,QAAS,CACPygB,UAAU,MAIhB/xB,EAASu3B,cAAmB,MAC3B,CAACv3B,EAAUrM,EAASwE,IAEvB,OACE,cAAC,GAAD,CAAsBA,GAAI86B,EAAQjC,QAAQ74B,GAAIs/B,WAAYO,KAIxDC,GAAchnC,YAAOinC,KAAPjnC,EAAa,gBAAGjB,EAAH,EAAGA,MAAH,MAAgB,CAC/C+V,MAAO/V,EAAMgC,aAAammC,aAC1BpmC,gBAAiB/B,EAAMgC,aAAaomC,2BAGzBC,GAAgE,SAAC,GAIvE,IAHLlgC,EAGI,EAHJA,GACAk/B,EAEI,EAFJA,SACAI,EACI,EADJA,WAEMz3B,EAAWC,cACXtM,EAAUC,cACVtB,EAASokC,KAHX,EAWApV,GAAqBnpB,EAAI,IAAI,SAACmgC,OALhChW,EANE,EAMFA,WACAC,EAPE,EAOFA,WACAN,EARE,EAQFA,aACAF,EATE,EASFA,YACAF,EAVE,EAUFA,MAVE,EAuBAtE,aAAqBplB,EAAI4pB,GAT3BtE,EAdE,EAcFA,gBACAc,EAfE,EAeFA,kBACAC,EAhBE,EAgBFA,wBACAH,EAjBE,EAiBFA,WACAC,EAlBE,EAkBFA,aACA2B,EAnBE,EAmBFA,mBACAX,EApBE,EAoBFA,gBACAO,EArBE,EAqBFA,WArBE,IAsBF0Y,KAAQv9B,EAtBN,EAsBMA,OAAQw9B,EAtBd,EAsBcA,MAAOC,EAtBrB,EAsBqBA,iBAAkBC,EAtBvC,EAsBuCA,kBAGrCC,EAAgB3kC,uBAAY,WAAO,IAAD,EAKlCupB,aAAqBplB,EAAI4pB,GAH3BvE,EAFoC,EAEpCA,mBACA8B,EAHoC,EAGpCA,gBAHoC,EAIpC5B,gBAEF1d,EAASu3B,cAAmB,IAC5Bv3B,EACEogB,aAAU,CACRhf,SAAUoc,EAAmBtiB,UAGjC8E,EAASsX,aAASgI,EAAgBpkB,SAClCvH,EAAQQ,KAAK,CACX2Y,SAAUpY,IAAMC,SAEjB,CAACqL,EAAUrM,EAASwE,EAAI4pB,IAzCvB,EA2CmB/Z,GAAqBywB,GAApCtwB,EA3CJ,EA2CIA,KAAMI,EA3CV,EA2CUA,KAEVqwB,EAAaC,KACb79B,IAAW89B,KAAcC,UAC3BH,EAAaI,KACJR,IAAUS,KAAQC,KAC3BN,EAAanb,EAAgB3H,KACpB0iB,IAAUS,KAAQtkC,OAC3BikC,EAAatZ,EAAgBxJ,MAG/B,IAAMqjB,EAAmBnlC,uBACvB,SAACC,EAAYmlC,GACXA,EAAUnX,EAAeK,IAAeC,MAE1C,CAACN,EAAcK,EAAYC,IAGvB+U,EAAiBtjC,uBAAY,WAC7ByjC,GACFA,EAAW1V,KAEZ,CAACA,EAAa0V,IAEXl5B,EAASgf,aAAqBplB,EAAI4pB,GACxC,OACE,qCACE,cAAC,GAAD,CACEvf,SAAO,EACPmB,GAAI,CACFoe,cACAE,eACA9pB,KACAoG,SACA86B,UAAWC,aAAuBnhC,MAGtC,sBAAK3H,UAAW8B,EAAOrC,KAAvB,UACE,sBAAKO,UAAW8B,EAAOqkC,QAAvB,UACE,sBAAKnmC,UAAW8B,EAAOukC,SAAvB,UACE,cAACqB,GAAA,EAAD,CAAMrf,KAAK,QAAQpkB,MAAO0T,EAAM3X,UAAW8B,EAAO6V,OAClD,cAAC+vB,GAAA,EAAD,CAAMrf,KAAK,QAAQpkB,MAAO8T,EAAM/X,UAAW8B,EAAOiW,OACjDmwB,EAAoB,GACnB,sBAAKloC,UAAW8B,EAAOwkC,SAAvB,UACE,cAACmB,GAAD,CACEpf,KAAK,QACLroB,UAAW8B,EAAOykC,cAClBtiC,MAAM,sBAER,cAAC,GAAD,CACEjE,UAAW8B,EAAO0kC,mBAClB5C,MAAOvS,EACPyS,YAAa,EACbD,KAAMpS,EACNsS,aAAc4E,UAKtB,qBAAK3oC,UAAW8B,EAAO2kC,YAAvB,SACE,eAACvwB,GAAA,EAAD,CAAYrV,QAAQ,QAAQb,UAAW8B,EAAOqT,MAA9C,kBACQ2Y,GAAgBnmB,EAAG4vB,aAD3B,IAC0C9H,EAAmBzT,MAAO,IADpE,MAEM8S,EAAgBhT,UAGxB,sBAAK9b,UAAW8B,EAAOyX,MAAvB,UACGsU,GACC,eAAC,KAAD,CACEvU,KAAMuU,EACNxU,UAAQ,EACR9D,MAAM,UACNkE,UAAU,QACVzZ,UAAW8B,EAAOysB,KALpB,UAOGtB,EAAgBnR,KAPnB,kBAUDtR,IAAW89B,KAAcS,SACxB,qCACE,eAAC7yB,GAAA,EAAD,CACErV,QAAQ,QACR0U,MAAM,gBACNvT,QAAQ,SACRhC,UAAW8B,EAAO4kC,QAJpB,UAME,cAAC3J,GAAA,EAAD,CAAS5nB,MAAM,mNAAf,SACE,+BACE,cAAC,KAAD,CACEc,SAAS,UACTV,MAAM,UACNvV,UAAW8B,EAAO6kC,kBAX1B,aAiBA,cAAC,KAAD,CACEpxB,MAAM,UACNkE,UAAU,QACVzZ,UAAW8B,EAAOysB,KAClB5b,QAASw1B,EAJX,oCAUH9Y,GACC,eAAC,KAAD,CACE/V,KAAM+V,EACNhW,UAAQ,EACR9D,MAAM,UACNkE,UAAU,QACVzZ,UAAW8B,EAAOysB,KALpB,UAOGO,EAAgBhT,KAPnB,wBAYN,sBAAK9b,UAAW8B,EAAO2jC,QAAvB,UACGoB,GACC,cAAC3wB,GAAA,EAAD,CAAYX,MAAM,UAAU1U,QAAQ,QAApC,gCAIAgmC,GAAYr8B,IAAW89B,KAAcU,iBACrC,eAAC,KAAD,CAAmBr2B,QAASm0B,EAA5B,UACGkB,IAAUS,KAAQC,KAAO,WAAa,SADzC,YAIA7B,GACAr8B,IAAW89B,KAAcW,SACzBlb,EAAoBC,GAClB,eAAC9X,GAAA,EAAD,CAAYX,MAAM,UAAU1U,QAAQ,QAApC,UACGktB,EADH,IACuBC,EADvB,uBAKN,qBAAKhuB,UAAW8B,EAAO0I,OAAvB,SACE,cAAC,KAAD,CACE0+B,YAAa1+B,IAAW89B,KAAcU,gBACtC1jB,KAAM8iB,EACNe,kBAAmBnB,IAAUS,KAAQC,KACrCta,cAAeL,EACfO,oBAAqBN,aCjRpBob,GAA2E,SAAC,GAGlF,IAFLzhC,EAEI,EAFJA,GACAk/B,EACI,EADJA,SAEA,OAAIwC,aAA8B1hC,IAAOk/B,EAChC,cAAC,GAAD,CAAyBl/B,GAAIA,EAAIk/B,SAAUA,IAE7C,cAAC,GAAD,CAAgCl/B,GAAIA,KAGhC2hC,GAA0E,SAAC,GAEjF,IADL3hC,EACI,EADJA,GAEM6H,EAAWC,cACXtM,EAAUC,cAFZ,EAGyB08B,GAAen4B,GAHxC,mBAGG86B,EAHH,KAGctB,EAHd,KAIJ1wB,qBACE,kBAAM,WACJ0wB,EAAQuB,UAEV,CAACvB,IAGH,IAAMqG,EAAehkC,uBAAY,WAC/BL,EAAQQ,KAAK,CACX2Y,SAAUpY,IAAM4+B,oBAChBniB,OAAQ,IAAMC,aAAoBjZ,GAClCkZ,MAAO,CACLC,QAAS,CACPygB,UAAU,MAIhB/xB,EAASu3B,cAAmB,MAC3B,CAACv3B,EAAUrM,EAASwE,IAEvB,OACE,cAAC,GAAD,CACEA,GAAI86B,EAAQjC,QAAQ74B,GACpBs/B,WAAYO,KAKL+B,GAAmE,SAAC,GAI1E,IAHL5hC,EAGI,EAHJA,GACAs/B,EAEI,EAFJA,WACAJ,EACI,EADJA,SAEM/kC,EAASokC,KADX,EASAxP,aAAwB/uB,GAN1BgvB,EAHE,EAGFA,gBACAG,EAJE,EAIFA,WACAF,EALE,EAKFA,sBACAO,EANE,EAMFA,mBACAE,EAPE,EAOFA,mBAPE,IAQF0Q,KAAQv9B,EARN,EAQMA,OAAQw9B,EARd,EAQcA,MAAOC,EARrB,EAQqBA,iBARrB,EAWmBzwB,GAAqBywB,GAApCtwB,EAXJ,EAWIA,KAAMI,EAXV,EAWUA,KAEVqwB,EAAaC,KACb79B,IAAW89B,KAAcC,UAC3BH,EAAaI,KACJR,IAAUS,KAAQrO,OAC3BgO,EAAazR,EAAgBrR,MAG/B,IAAMwhB,EAAiBtjC,uBAAY,WAC7ByjC,GACFA,MAED,CAACA,IAEEl5B,EAAS2oB,aAAwB/uB,GACvC,OACE,qCACE,cAAC,GAAD,CACEqK,SAAO,EACPmB,GAAI,CAAExL,KAAIoG,SAAQ86B,UAAWC,aAAuBnhC,MAEtD,cAAC,GAAD,CAAO0L,SAAO,EAACF,GAAI,CAAE40B,KAAMh6B,EAAOg6B,QAClC,sBAAK/nC,UAAW8B,EAAOrC,KAAvB,UACE,sBAAKO,UAAW8B,EAAOqkC,QAAvB,UACE,sBAAKnmC,UAAW8B,EAAOukC,SAAvB,UACE,cAACqB,GAAA,EAAD,CAAMrf,KAAK,QAAQpkB,MAAO0T,EAAM3X,UAAW8B,EAAO6V,OAClD,cAAC+vB,GAAA,EAAD,CAAMrf,KAAK,QAAQpkB,MAAO8T,OAE5B,qBAAK/X,UAAW8B,EAAO2kC,YAAvB,SACE,eAACvwB,GAAA,EAAD,CAAYrV,QAAQ,QAAQb,UAAW8B,EAAOqT,MAA9C,qBACWxN,EAAG4vB,aADd,IAC6BX,EAAsB5a,MADnD,MAC6D,IAC1Dmb,EAAmBrb,UAGxB,sBAAK9b,UAAW8B,EAAOyX,MAAvB,UACG/O,IAAW89B,KAAcS,SAAWf,IAAUS,KAAQrO,MACrD,cAAClkB,GAAA,EAAD,CAAYrV,QAAQ,QAAQ0U,MAAM,QAAQvV,UAAW8B,EAAOysB,KAA5D,iCAIDuI,GACC,eAAC,KAAD,CACExd,KAAMwd,EACNzd,UAAQ,EACR9D,MAAM,UACNkE,UAAU,QACVzZ,UAAW8B,EAAOysB,KALpB,UAOGoI,EAAgB7a,KAPnB,kBAUDub,GACC,eAAC,KAAD,CACE/d,KAAM+d,EACNhe,UAAQ,EACR9D,MAAM,UACNkE,UAAU,QACVzZ,UAAW8B,EAAOysB,KALpB,UAOG4I,EAAmBrb,KAPtB,oBAYN,sBAAK9b,UAAW8B,EAAO2jC,QAAvB,UACGoB,GACC,cAAC3wB,GAAA,EAAD,CAAYX,MAAM,UAAU1U,QAAQ,QAApC,gCAIAgmC,GAAYr8B,IAAW89B,KAAcU,iBACrC,cAAC,KAAD,CAAmBr2B,QAASm0B,EAA5B,+BAKJ,qBAAK9mC,UAAW8B,EAAO0I,OAAvB,SACE,cAAC,KAAD,CACE0+B,YAAa1+B,IAAW89B,KAAcU,gBACtC1jB,KAAM8iB,EACNe,kBAAmBnB,IAAUS,KAAQrO,gBC/J3CoP,GAAoCjqC,YAAW,CACnDqX,MAAO,CACLlW,UAAW,GAEb+oC,UAAW,CACTtoC,WAAY,MAIHuoC,GAA2D,SACtEzpC,GAEA,IAAMC,EAAUspC,KAChB,OAAO,cAACnzB,GAAA,EAAD,aAAQ3W,SAAS,KAAK4oB,WAAS,EAACpoB,QAASA,GAAaD,KC+ClD0pC,GAAwC,WACnD,IAAMn6B,EAAWC,cADwC,EAEpB9D,KAA7BzF,EAFiD,EAEjDA,QAASuF,EAFwC,EAExCA,gBACT4E,EAAoBJ,KAApBI,gBAHiD,EAIjCxE,YAAYyS,MAA5BpU,EAJiD,EAIjDA,MAAO1D,EAJ0C,EAI1CA,KACTojC,EAAkB/9B,YAAYg+B,MAC5BC,EAAej+B,YAAYk+B,MAA3BD,WACFE,EAASn+B,YAAYo+B,MACrBC,EAAar+B,YAAY8F,MAE/BlB,qBAAU,WACHhF,IAGA4E,GACHb,EAAS26B,cAAc,IAErB95B,GACF9L,EAAGwE,OAAO7C,GACP2C,MAAK,SAACuhC,GAGL56B,EACE66B,aACGD,EAAqC/jB,QACpC,SAACikB,GAAD,OAEEA,EAAEjvB,cAAgBkvB,YAAsBrgC,IACxCogC,EAAEjtB,YAAcktB,YAAsBrgC,QAI9CsF,EAAS26B,cAAc,OAExB5hC,MAAM9C,QAAQC,UAElB,CAAC8J,EAAU/D,EAAiB4E,EAAiB7J,EAAMN,EAASgE,IAE/D,I5CzF2BsgC,E4CyFrBhiB,EAAc7N,YAAezQ,GAC7B6oB,EAAyBvvB,uBAAY,WACzCgM,EAAS4Q,cAAsB,MAC9B,CAAC5Q,IAEEqX,EAAoBrjB,uBACxB,SAACC,GACC+L,EAASsX,aAASrjB,EAAM6P,OAAOzP,UAEjC,CAAC2L,IAGGuuB,EAAcv6B,uBAAY,WAC9BgM,EAASu3B,cAAmB,MAC3B,CAACv3B,IAEEi7B,EAAMb,EAAgBngC,OAtD6B,EAwDjC8I,mBAAS,GAxDwB,mBAwDlDsxB,EAxDkD,KAwD5C6G,EAxD4C,KAyDnDC,EAAmBnnC,uBAAY,SAACC,EAAgBmlC,GACpD8B,EAAQ9B,KACP,IAEGgC,EAAaH,EAGbI,EAAmBp/B,IAAoBq+B,EAhEY,EAkEV79B,mBAAQ,WAOrD,MAAO,CAAE6+B,gBANelB,EAAgBvjB,QACtC,SAAC1e,GAAD,OAASmhC,aAAuBnhC,MAChC8B,OAIwBshC,kBAHAnB,EAAgBvjB,QAAO,SAAC1e,GAAD,OAC/CmhC,aAAuBnhC,MACvB8B,UAED,CAACmgC,IARIkB,EAlEiD,EAkEjDA,gBAAiBC,EAlEgC,EAkEhCA,kBAUzB,OACE,eAAC,GAAD,CACE30B,KAAM4zB,EACNgB,gBAAiBjN,EACjBkN,aAAW,EAHb,UAKE,eAAC,GAAD,CAAoB91B,MAAM,eAA1B,UACE,cAACuQ,GAAA,EAAD,CAAKwlB,GAAI,EAAT,SACE,cAACh1B,GAAA,EAAD,CAAYrV,QAAQ,YAApB,yBAEF,cAAC,GAAD,CACEwiB,KAAK,QACLwB,WAAS,EACTD,UAAWsC,IACXrjB,MAAOqG,EACPpG,SAAU+iB,SAGXpb,GAAmBq+B,IACpB,qCACE,cAAC,GAAD,IACA,cAACpE,GAAD,UACE,eAAC,KAAD,YACIj6B,GACA,qCACE,cAAC,KAAD,UACE,eAACyK,GAAA,EAAD,CAAYrV,QAAQ,QAAQmY,MAAM,SAAlC,2BACiB,K5C1JRwxB,E4C2JOhiB,EAAY1M,K5C1J9Cmb,QAAQuT,IAAQA,EAAI/gC,OAAS,GAAKI,EAAOob,SAASulB,EAAIW,OAAO,GAAGljC,e4C0JV,KAAO,KAAK,IAC7CugB,EAAY1M,KAHf,+CAMF,eAAC,KAAD,WACE,cAAC,KAAD,UACE,cAAC,KAAD,UACE,cAAC,GAAD,QAGJ,cAAC,KAAD,UACE,cAAC,KAAD,CAAcnJ,QAASogB,EAAvB,oCAOP+W,GACC,cAAC,KAAD,UACE,cAAC,KAAD,CAAkBv0B,MAAM,UAAU8S,KAAM,gBAOnDwiB,GACC,qCACE,8BACGjB,EAAgBtjB,KAAI,SAAC3e,EAAI2xB,GACxB,IAAM8R,EAzEG,EAyEUvH,EAEbwH,EACJ/R,GAAS8R,GAAc9R,EAFR8R,EA1ER,EA8EHE,EAAehS,IAAU8R,EACzBG,EACJjS,EAAQ,GACRwP,aAAuBnhC,KACtBmhC,aAAuBc,EAAgBtQ,EAAQ,IAC5CkS,EAAaF,GAAgBC,EAE7Bp2B,EADqB2zB,aAAuBnhC,GAClB,qBACdojC,EADc,wBAEhBD,EAFgB,KAI1BW,EAAS,cAAC,GAAD,CAA0Bt2B,MAAOA,IAEhD,OAAIxN,EAAGqH,OAASiM,KAAO9W,KAEnB,eAAC,GAAD,CAAWkhC,KAAMgG,EAAjB,UACGG,GAAcC,EACf,cAAC,GAAD,CACE9jC,GAAIA,EACJk/B,SAAUqD,IAAeviC,EAAG/B,OAJY+B,EAAG/B,IAU/C,eAAC,GAAD,CAAWy/B,KAAMgG,EAAjB,UACGG,GAAcC,EACf,cAAC,GAAD,CACE9jC,GAAIA,EACJk/B,SAAUqD,IAAeviC,EAAG/B,OAJY+B,EAAG/B,SAW3B,IAA3BgkC,EAAgBngC,QACf,cAAC,KAAD,UACE,cAACyM,GAAA,EAAD,CAAYrV,QAAQ,QAAQmY,MAAM,SAASzD,MAAM,gBAAjD,2DAKJ,cAAC0wB,GAAD,UACE,cAAC,GAAD,CACErC,MAAOgH,EACP9G,YA5HS,EA6HTD,KAAMA,EACNE,aAAc4G,a,qDCxPfe,GAET5kC,IAAI6kC,gBACJC,KAAY9iC,MAAM1B,OAAOC,SAASsZ,QAAQkrB,mBAHjCH,GAKT5kC,IAAIglC,oBACJF,KAAY9iC,MAAM1B,OAAOC,SAASsZ,QAAQorB,kBANjCL,GAQT5kC,IAAIklC,uBACJJ,KAAY9iC,MAAM1B,OAAOC,SAASsZ,QAAQsrB,qBCCxCj7B,GAA+C,CACnDk7B,EAAG,CAAChJ,aAAWC,SACfgJ,GAAI,CAACjJ,aAAWE,QAASF,aAAWG,eAGzB+I,GAAyB,SAACxmC,GACrC,IAAMud,EAAQG,OAAO4c,QAAQlvB,IAAgBkS,MAAK,oDAAc+B,SAASrf,MACzE,OAAKud,EACEuR,SAASvR,EAAM,IADHA,GAIRkpB,GAAyB,SAACzmC,GAAqC,IAAD,EACnE0zB,EAAQC,OAAO3zB,GACrB,OAAO,UAAAoL,GAAesoB,UAAf,eAAwB,KAAM4J,aAAWE,SAGrCkJ,GAA0B,SAACC,GAAD,YAA+B,CACpEC,QAAM,mBACHC,IAASC,SADN,CAEF,CACEx+B,KAAM,WACN8Z,KAAM,8DACNzc,UAAW,IAAIohC,KAA0B,CACvC38B,MAAOlJ,IAAIsL,IACXw6B,gBAAiBP,OAPnB,oBAUEX,GACA,CACE,CACEx9B,KAAM,MACN8Z,KACE,8DACFzc,UAAW,IAAIshC,KAA4B,CACzC78B,MAAOlJ,IAAIsL,IACX06B,IAAK,CACHX,GAAG,+BAAH,OAAmCrlC,IAAIimC,WACvCb,EAAE,iCAAF,OAAoCplC,IAAIimC,YAE1CjiC,QAASyhC,MAIf,IA1BF,aA2BEb,GACA,CACE,CACEx9B,KAAM,gBACN8Z,KACE,6DACFzc,UAAW,IAAIyhC,KAA+B,CAC5CF,IAAK,CACHX,GAAG,8BAAH,OAAkCrlC,IAAIimC,WACtCb,EAAE,iCAAF,OAAoCplC,IAAIimC,YAE1CE,QAAQ,EACRj9B,OAAO,MAIb,MA3CF,cA6CHy8B,IAASS,kBA7CN,aA8CExB,GACA,CACE,CACEx9B,KAAM,WACN8Z,KACE,6DACFzc,UAAY,WACV,IAAMA,EAAY,IAAI4hC,KAAmC,CACvDn9B,OAAO,IAGT,OADAzE,EAAU6hC,YAAc,kBAAOhmC,OAAeslC,UACvCnhC,EALG,KAShB,KA7DF,K,8BC6CK8hC,GAAwD,SAAC,GAE/D,IADLxrC,EACI,EADJA,SAEMC,EAASwrC,eACT99B,EAAWC,eTlEmB,WACpC,IAAMpI,EAAWgV,cACX7M,EAAWC,cACX89B,EAAS3B,KAAY9iC,MAAMzB,EAASsZ,QAE1ClQ,qBAAU,WACR,IAAM8N,EAAUgvB,EAAOhvB,QACnBA,GACE0kB,GAAuBl4B,QAAQwT,IAAY,GAC7C/O,EAASgC,YAAc+7B,EAAOhvB,YAEjC,CAAC/O,EAAU+9B,EAAOhvB,USwDrBivB,G5CQuC,WAAO,IAAD,EACD7hC,KAApCtB,EADqC,EACrCA,cAAeE,EADsB,EACtBA,iBACjBuG,EAAajF,YAAYkF,KAC/BN,qBAAU,WACJK,IAAezG,IACjB5E,QAAQ8kB,KAAK,mCAAoCzZ,GACjDvG,EACEuG,EAAWmU,SAAS,WAChBie,aAAWC,QACXryB,EAAWmU,SAAS,WACpBie,aAAWE,QACXtyB,MAGP,CAACA,EAAYvG,EAAkBF,I4CrBlCojC,G5C8tB+B,WAAO,IAC9B19B,EAAkBD,KAAlBC,cACRU,qBAAU,WACRV,MACC,CAACA,I4CjuBJ29B,GALI,MAUAz9B,KAFFI,GARE,EAOFC,aAPE,EAQFD,iBACAF,EATE,EASFA,iBATE,EAiBAxE,KALFnB,EAZE,EAYFA,OACAtE,EAbE,EAaFA,QACAuF,EAdE,EAcFA,gBACAH,EAfE,EAeFA,oBACAZ,EAhBE,EAgBFA,OAEMijC,EAAoB9hC,YAAYk+B,MAAhC4D,gBACFC,EAAiB/hC,YAAYgiC,MAE7Br9B,EAAe3E,YAAYiiC,MArB7B,EAsB8Cv7B,oBAAS,GAtBvD,mBAsBsBw7B,GAtBtB,WAuBJprB,cACE,WAOEorB,EALEtiC,IACC4E,IACAF,IACAK,GAAgBm9B,MAIrB,IACA,CAACliC,EAAiB4E,EAAiBG,EAAcm9B,IAlC/C,MAuCwCp7B,oBAAS,GAvCjD,mBAuCGy7B,EAvCH,KAuCmBC,EAvCnB,KAwCEC,EAAwB1qC,uBAAY,WACxCyqC,GAAkB,KACjB,IACGE,EAAuB3qC,uBAAY,WACvCyqC,GAAkB,KACjB,IACKtrC,EAAUyrC,eAAVzrC,MACFnD,EAAQ6Y,eACd5H,qBAAU,WACJ9N,EAAQnD,EAAM6uC,YAAY9qB,OAAlB,IACV0qB,GAAkB,KAEnB,CAACtrC,EAAOnD,EAAM6uC,cAEjB,IAAMC,EAAwB9qC,uBAAY,WACxCgM,EAASu3B,cAAoB4G,MAC5B,CAACn+B,EAAUm+B,IAER/hC,EAAmBC,YAAYC,MAC/ByiC,EAAmB1iC,YAAY2iC,MAC/B19B,EAAajF,YAAYkF,KACzB09B,EAAgBtnB,KA7DlB,EAiEAunB,IAAMn8B,SAA6B,MAjEnC,mBA+DFo8B,EA/DE,KAgEFC,EAhEE,KAkEEC,EAA0BrrC,uBAAY,WAC1CgM,EAAS4Q,cAAsB,MAC9B,CAAC5Q,IACEs/B,EAAwBtrC,uBAAY,WACxCorC,EAAoB,QACnB,IAEGG,EAA0BvrC,uBAC9B,SAACC,GACKgI,EACFmjC,EAAoBnrC,EAAMurC,eAE1Bx/B,EAAS4Q,cAAsB,MAGnC,CAAC5Q,EAAU/D,IAGPwjC,EAAyBzrC,uBAAY,WACzC8H,IACAwjC,MACC,CAACxjC,EAAqBwjC,IACnBI,EAAsBjjC,mBAAQ,WAalC,MAZ6C,CAC3C5B,cAAeyG,EACf5G,MAAO0B,EACPgK,QAASi5B,EACTJ,gBAEAU,eAAgBzmB,GAChB0mB,iBAAkB1lB,GAClB3B,qBACAQ,oBACA8mB,OAAQ/C,GAAwBF,GAAuBt7B,IAAe,MAGvE,CAAClF,EAAkBijC,EAAyBJ,EAAe39B,IAExDw+B,EAAcrlC,GAAU2B,GACxB2jC,EAAmBplC,4BACnBqlC,EAAmBrzB,KAEnBszB,GAAW,mBACXC,GAAkBjkC,GAAmBmiC,EAErC+B,GACJ,qCACE,sBAAK3vC,UAAW8B,EAAO8tC,YAAvB,UACE,cAAC,GAAD,CACEj9B,QAASo8B,EACTvjB,QAASmiB,EACTnjC,OAAQA,EACRtE,QAASA,EACT2lB,OAAQnhB,IAEV,cAAC,qBAAD,CACE0L,KAAMm4B,EACNt/B,QAASigC,OAGb,qBAAKlvC,UAAW8B,EAAO+tC,WAAvB,SACE,cAAC95B,GAAA,EAAD,CACEC,aAAW,YACX85B,gBAAeL,GACfM,gBAAc,OACdp9B,QAASw7B,EACT54B,MAAM,UALR,SAOE,cAAC,KAAD,WAKFy6B,GACJ,eAACC,GAAA,EAAD,CACEC,OAAO,QACPtqC,GAAI6pC,GACJxE,aAAW,EACX70B,KAAM43B,EACNp4B,QAASs4B,EACTiC,WAAY,CAAEnwC,UAAW8B,EAAOsuC,aANlC,UAQE,qBAAKpwC,UAAW8B,EAAOuuC,aAAvB,SACE,cAACt6B,GAAA,EAAD,CACEC,aAAW,QACXhW,UAAW8B,EAAOwuC,YAClB39B,QAASu7B,EAHX,SAKE,cAAC,KAAD,QAGJ,cAAC9sB,GAAA,EAAD,IACA,cAACmvB,GAAA,EAAD,CACEv7B,SAAO,EACPhV,UAAW8B,EAAO0uC,eAClB/oB,QAAM,EACN9U,QAASo8B,EAJX,SAME,cAAC,GAAD,CACE/uC,UAAW8B,EAAO2uC,iBAClB3kB,QAAM,EACNthB,OAAQA,EACRtE,QAASA,EACT2lB,OAAQnhB,MAGZ,cAAC6lC,GAAA,EAAD,CACEv7B,SAAO,EACPhV,UAAW8B,EAAO0uC,eAClB/oB,QAAM,EACN9U,QAAS27B,EAJX,SAME,eAAClmB,GAAA,EAAD,CAAQpoB,UAAW8B,EAAO2uC,iBAAkBv3B,UAAU,MAAtD,UACE,cAAC,KAAD,CACElZ,UAAW8B,EAAO4uC,gBAClBhlB,UAAWgkB,KAEb,0DAGJ,cAACa,GAAA,EAAD,CACEvwC,UAAWM,IACTwB,EAAO0uC,eACP1uC,EAAO6uC,sBAHX,SAME,cAACC,GAAA,EAAD,CAAQ9kB,QAAM,SAKd+kB,GACJ,cAAC,KAAD,CAAMC,GAAG,WAAT,SAAoB,cAACprB,GAAA,EAAD,CAAK1jB,QAAQ,eAAe+uC,EAAG,EAA/B,SACd,cAAC,KAAD,CAAgBpuC,MAAM,OAAOsP,OAAO,aAItC++B,GACJ,cAACC,GAAA,EAAD,CACErrC,GAAG,cACHugB,mBAAoB,KACpB+qB,SAAUvC,EACV1D,aAAW,EACX70B,KAAM6gB,QAAQ0X,GACd/4B,QAASk5B,EACT9oB,aAAc,CAAEC,SAAU,SAAUC,WAAY,QAChDirB,gBAAiB,CAAElrB,SAAU,MAAOC,WAAY,QARlD,SAUE,cAACK,GAAA,EAAD,CAAU5T,QAASs8B,EAAnB,SACE,cAAC/4B,GAAA,EAAD,CAAYX,MAAM,QAAlB,mCAKN,OACE,eAAC67B,GAAA,EAAD,CACEzB,YAAaA,GACbK,WAAYA,GACZgB,WAAYA,GACZK,KAAMR,GAJR,UAMGhvC,EACD,cAAC,GAAD,IACA,cAAC,GAAD,CACEsR,GAAI,CACF9C,kBACAm/B,mBACAF,cACAC,mBACAzoC,eAOGwqC,GAAyC,SAAC,GAAD,IAAGzvC,EAAH,EAAGA,SAAH,OACpD,cAAC,uBAAD,UACE,cAAC,GAAD,UAAaA,OCxRF0vC,UA7B0C,SAAC,GAGnD,IAFLpuC,EAEI,EAFJA,QACAkE,EACI,EADJA,SAEKmqC,aAAaC,QAAQC,IAAYC,eACpCxuC,EAAQ8vB,QAAQ/uB,IAAM0tC,SAEE,MAAtBvqC,EAASiV,UACXnZ,EAAQ8vB,QAAQ/uB,IAAM0tC,SALpB,IASIC,EAAiBhmC,YAAYimC,MAA7BD,aACR,OACE,mCACE,cAAC,GAAD,UACE,cAAC,IAAD,UACE,cAACrxC,EAAD,UACE,eAAC,EAAD,CAAiBT,QAAS8xC,EAA1B,UACE,cAAC,IAAD,CAAOxuC,KAAMa,IAAMC,KAAM+U,UAAWmd,KACpC,cAAC,IAAD,CAAOhzB,KAAMa,IAAME,QAAS8U,UAAW8pB","file":"static/js/8.dac42e3b.chunk.js","sourcesContent":["import {\n  makeStyles,\n  Paper,\n  PaperProps,\n  styled,\n  Theme,\n} from \"@material-ui/core\";\nimport classNames from \"classnames\";\nimport React, { FunctionComponent } from \"react\";\nimport { useShakingStyles } from \"../../theme/animationUtils\";\n\nconst useBridgePaperStyles = makeStyles((theme) => {\n  return {\n    root: {\n      maxWidth: 400,\n      margin: \"0 auto\",\n      position: \"relative\",\n      overflow: \"hidden\",\n    },\n  };\n});\n\ntype BridgePurePaperProps = PaperProps & {\n  shaking?: boolean;\n};\n\nexport const BridgePurePaper: FunctionComponent<BridgePurePaperProps> = ({\n  shaking,\n  className,\n  ...props\n}) => {\n  const classes = useBridgePaperStyles();\n  const shakingStyles = useShakingStyles();\n  const resolvedClassName = classNames(className, {\n    [shakingStyles.shaking]: shaking,\n  });\n  return <Paper className={resolvedClassName} classes={classes} {...props} />;\n};\n\ntype BridgePaperProps = PaperContentProps & BridgePurePaperProps;\n\n// deprecated - used only in catalog - remove gradually\nexport const BridgePaper: FunctionComponent<BridgePaperProps> = ({\n  topPadding,\n  bottomPadding = true,\n  children,\n  ...rest\n}) => {\n  return (\n    <BridgePurePaper {...rest}>\n      <PaperContent topPadding={topPadding} bottomPadding={bottomPadding}>\n        {children}\n      </PaperContent>\n    </BridgePurePaper>\n  );\n};\n\nexport const BridgePaperWrapper = styled(\"div\")({\n  marginTop: 40,\n});\n\nconst SMALL_PADDING = 10;\nconst MEDIUM_PADDING = 20;\nconst BIG_PADDING = 40;\n\nconst getPadding = (variant: PaddingVariant = \"big\") => {\n  switch (variant) {\n    case \"small\":\n      return SMALL_PADDING;\n    case \"medium\":\n      return MEDIUM_PADDING;\n    case \"big\":\n    default:\n      return BIG_PADDING;\n  }\n};\n\nconst usePaperContentStyles = makeStyles<Theme, PaperContentProps>((theme) => ({\n  root: {\n    paddingLeft: ({ paddingVariant }) => getPadding(paddingVariant),\n    paddingRight: ({ paddingVariant }) => getPadding(paddingVariant),\n  },\n  top: {\n    paddingTop: ({ paddingVariant }) => getPadding(paddingVariant),\n  },\n  bottom: {\n    paddingBottom: ({ paddingVariant }) => getPadding(paddingVariant),\n  },\n  darker: {\n    backgroundColor: theme.customColors.whiteDarker,\n  },\n}));\n\ntype PaddingVariant = \"big\" | \"medium\" | \"small\";\n\nexport type PaperContentProps = {\n  darker?: boolean;\n  topPadding?: boolean;\n  bottomPadding?: boolean;\n  paddingVariant?: PaddingVariant;\n  className?: string;\n};\n\nexport const PaperContent: FunctionComponent<PaperContentProps> = ({\n  topPadding,\n  bottomPadding,\n  darker,\n  paddingVariant,\n  className,\n  children,\n}) => {\n  const styles = usePaperContentStyles({ paddingVariant: paddingVariant });\n  const resolvedClassName = classNames(styles.root, className, {\n    [styles.top]: topPadding,\n    [styles.bottom]: bottomPadding,\n    [styles.darker]: darker,\n  });\n  return <div className={resolvedClassName}>{children}</div>;\n};\n\nexport const PaperHeader = styled(\"header\")({\n  display: \"flex\",\n  justifyContent: \"space-between\",\n  alignItems: \"center\",\n  paddingTop: SMALL_PADDING,\n  paddingBottom: SMALL_PADDING,\n  paddingLeft: SMALL_PADDING,\n  paddingRight: SMALL_PADDING,\n});\n\nexport const PaperNav = styled(\"div\")({\n  justifySelf: \"flex-start\",\n  minWidth: 72,\n});\n\nexport const PaperActions = styled(\"div\")({\n  justifySelf: \"flex-end\",\n  minWidth: 72,\n  \"& > *\": {\n    margin: \"0 4px\",\n    \"&:first-child\": {\n      marginLeft: 0,\n    },\n    \"&:last-child\": {\n      marginRight: 0,\n    },\n  },\n});\n\nexport const PaperTitle = styled(\"div\")({\n  justifySelf: \"center\",\n  textAlign: \"center\",\n  width: \"100%\",\n});\n\nconst useSpacedContentStyles = makeStyles({\n  root: {\n    minHeight: 200,\n  },\n  rootSmaller: {\n    minHeight: 130,\n  },\n});\n\ntype SpacedPaperContentProps = PaperContentProps & {\n  smaller?: boolean;\n};\n\nexport const SpacedPaperContent: FunctionComponent<SpacedPaperContentProps> = ({\n  smaller,\n  ...rest\n}) => {\n  const styles = useSpacedContentStyles();\n  const className = classNames(styles.root, {\n    [styles.rootSmaller]: smaller,\n  });\n  return <PaperContent className={className} {...rest} />;\n};\n","import { Tab, Tabs, TabsProps } from \"@material-ui/core\";\nimport React, { FunctionComponent, useCallback } from \"react\";\nimport { useHistory, useRouteMatch } from \"react-router-dom\";\nimport { paths } from \"../../../pages/routes\";\n\nexport const TransactionTypeTabs: FunctionComponent<TabsProps> = () => {\n  const history = useHistory();\n  const { path } = useRouteMatch();\n  const onTabChange = useCallback(\n    (event: React.ChangeEvent<{}>, newPath: string) => {\n      history.push(newPath);\n    },\n    [history]\n  );\n\n  return (\n    <>\n      <Tabs\n        value={path}\n        onChange={onTabChange}\n        indicatorColor=\"primary\"\n        variant=\"fullWidth\"\n      >\n        <Tab\n          label={\"Pull From Defichain\"}\n          value={paths.MINT}\n        />\n        <Tab\n          label={\"Send To Defichain\"}\n          value={paths.RELEASE}\n        />\n      </Tabs>\n    </>\n  );\n};\n","import firebase from \"firebase/app\";\n\nrequire(\"firebase/auth\");\nrequire(\"firebase/firestore\");\nrequire(\"firebase/functions\");\n\n// Creates a user profile\nconst createOrUpdateProfileData = async (\n  db: firebase.firestore.Firestore,\n  uid: string\n) => {\n  // update user collection\n  const doc = db.collection(\"users\").doc(uid);\n  const docData = await doc.get();\n  try {\n    if (docData.exists) {\n      // add a new signature if needed\n      await doc.update({\n        updated: firebase.firestore.Timestamp.fromDate(new Date(Date.now())),\n      });\n    } else {\n      // create user\n      await doc.set({\n        uid,\n        updated: firebase.firestore.Timestamp.fromDate(new Date(Date.now())),\n        signatures: [],\n      });\n    }\n  } catch (e) {\n    console.error(\"failed to update user profile\", e);\n    throw e;\n  }\n};\n\n// Check if an account exists for the given id and signature,\n// otherwise attempt to register\nconst signInOrRegister = async (\n  id: string,\n  signature: string\n): Promise<firebase.User | null> => {\n  let token: string | null = null;\n  try {\n    const res = await firebase.functions().httpsCallable(\"authenticate\")({\n      signed: signature,\n      account: id,\n    });\n\n    token = res.data.token;\n    if (!token) {\n      throw new Error(\"missing token\");\n    }\n  } catch (e) {\n    console.error(\"Failed to create token\", e);\n    throw e;\n  }\n\n  let user;\n  try {\n    user = token && (await firebase.auth().signInWithCustomToken(token)).user;\n  } catch (e) {\n    // FIXME: we should probably handle wrong signatures here, as it would imply\n    // some sort of corruption or attack.\n    console.error(\"Failed to authenticate with token\", e);\n    throw e;\n  }\n  if (!user) return null;\n  // always create / update profile data\n  await createOrUpdateProfileData(firebase.firestore(), user.uid);\n  return user;\n};\n\n// Check if the user is currently authenticated for the correct address,\n// otherwise attempt to sign in or register for that address\n// TODO: remove \"signature\" and only rely on \"rawSignature\" because\n// only rawSignature can be verified\nexport const getFirebaseUser = async (\n  address: string,\n  signatures: { rawSignature: string; signature: string }\n) => {\n  const { currentUser } = firebase.auth();\n  if (!currentUser || currentUser.uid !== address) {\n    // If the user is logged in with another wallet, sign out first\n    if (currentUser?.uid !== address) {\n      await firebase.auth().signOut();\n    }\n    return signInOrRegister(address, signatures.rawSignature);\n  } else {\n    return currentUser;\n  }\n};\n","import { GatewaySession } from \"@renproject/ren-tx\";\nimport firebase from \"firebase/app\";\nimport { env } from \"../../../constants/environmentVariables\";\n\nimport { Database } from \"../database\";\nimport { getFirebaseUser } from \"./firebaseUtils\";\n\nif (!env.FIREBASE_KEY) {\n  console.warn(`No database key set.`);\n}\n\nfirebase.initializeApp({\n  apiKey: env.FIREBASE_KEY,\n  authDomain: window.location.hostname,\n  projectId: env.FIREBASE_PROJECT_ID,\n});\n\nrequire(\"firebase/firestore\");\n\ntype DbTimestamps = {\n  seconds: number;\n  nanoseconds: number;\n};\n\nexport type DbMeta = {\n  state: string;\n};\n\nexport type DbGatewaySession = GatewaySession & {\n  updated: DbTimestamps;\n  created: DbTimestamps;\n  meta: DbMeta;\n};\n\nexport class FireBase<Transaction extends { id: string }>\n  implements Database<Transaction> {\n  private db: firebase.firestore.Firestore;\n\n  constructor() {\n    this.db = firebase.firestore();\n  }\n\n  public addTx = async (\n    tx: Transaction,\n    localWeb3Address: string,\n    fsSignature: string | null\n  ) => {\n    // add timestamps\n    const timestamps = firebase.firestore.Timestamp.fromDate(\n      new Date(Date.now())\n    ) as DbTimestamps;\n\n    const dbTx = {\n      ...tx,\n      created: timestamps,\n      updated: timestamps,\n    };\n\n    await this.db\n      .collection(\"transactions\")\n      .doc(tx.id)\n      .set({\n        user: localWeb3Address.toLowerCase(),\n        walletSignature: fsSignature,\n        id: tx.id,\n        updated: timestamps,\n        createdSeconds: timestamps.seconds,\n        data: JSON.stringify(dbTx),\n      })\n      .catch((e) => console.error(\"failed to track tx\", e));\n  };\n\n  public updateTx = async (tx: Transaction) => {\n    const timestamps = firebase.firestore.Timestamp.fromDate(\n      new Date(Date.now())\n    );\n    const dbTx = { ...tx, updated: timestamps };\n    try {\n      await this.db\n        .collection(\"transactions\")\n        .doc(tx.id)\n        .update({\n          data: JSON.stringify(dbTx),\n          updated: timestamps,\n        });\n    } catch (e) {\n      console.error(\"failed to update\", e);\n      throw e;\n    }\n  };\n\n  public deleteTx = async (tx: Transaction) => {\n    try {\n      await this.db\n        .collection(\"transactions\")\n        .doc(tx.id)\n        .update({ deleted: true });\n    } catch (e) {\n      console.error(\"failed to delete\", e);\n      throw e;\n    }\n  };\n\n  public getTx = async (tx: Transaction) => {\n    return this.db\n      .collection(\"transactions\")\n      .doc(tx.id)\n      .get()\n      .then((doc) => {\n        if (doc.exists) {\n          const data = doc.data();\n          if (data && !data.deleted) {\n            return JSON.parse(data.data);\n          }\n        }\n        throw new Error(`Tx: ${tx.id} not found`);\n      })\n      .catch((e) => {\n        console.error(\"Failed to get tx\", e);\n        throw e;\n      });\n  };\n\n  public getTxs = async (uid: string): Promise<Transaction[]> => {\n    try {\n      const fsDataSnapshot = await this.db\n        .collection(\"transactions\")\n        .where(\"user\", \"==\", uid.toLowerCase())\n        .get();\n      const fsTransactions: Transaction[] = [];\n      if (!fsDataSnapshot.empty) {\n        fsDataSnapshot.forEach((doc: any) => {\n          const data = doc.data();\n          if (data.deleted) return;\n          const tx: Transaction = JSON.parse(data.data);\n          fsTransactions.push(tx);\n        });\n      }\n      return fsTransactions;\n    } catch (e) {\n      console.error(\"failed to fetch txs\", e);\n      throw e;\n    }\n  };\n\n  public getUser = async (\n    address: string,\n    signatures: { signature: string; rawSignature: string }\n  ) => {\n    const user = await getFirebaseUser(address, signatures);\n    return (\n      user && {\n        uid: user.uid,\n      }\n    );\n  };\n}\n","export type TransactionStatusType = \"completed\" | \"pending\" | \"submitted\";\n\n// multiwallet compatible\nexport enum WalletStatus {\n  DISCONNECTED = \"disconnected\",\n  CONNECTING = \"connecting\",\n  CONNECTED = \"connected\",\n  WRONG_NETWORK = \"wrong_network\",\n}\n\nexport type WalletConnectionStatusType =\n  | \"disconnected\"\n  | \"connecting\"\n  | \"connected\"\n  | \"wrong_network\";\n","import { FireBase } from \"./firebase/firebase\";\n\nexport interface Database<Transaction extends { id: string }> {\n  addTx: (\n    tx: Transaction,\n    localWeb3Address: string,\n    fsSignature: string | null\n  ) => Promise<void>;\n\n  updateTx: (tx: Transaction) => Promise<void>;\n\n  deleteTx: (tx: Transaction) => Promise<void>;\n\n  getTxs: (signature: string) => Promise<Transaction[]>;\n\n  getUser: (\n    address: string,\n    signatures: { rawSignature: string; signature: string }\n  ) => Promise<{ uid: string } | null>;\n}\n\nexport const newDefaultDatabase = <Transaction extends { id: string }>() =>\n  new FireBase<Transaction>();\n\nexport const db = newDefaultDatabase();\n","export const trimAddress = (address?: string, chars = 4) => {\n  if (!address) {\n    return \"\";\n  }\n  if (address.length <= 2 * chars) {\n    return address;\n  }\n  const start = address.slice(0, chars);\n  const end = address.slice(-chars);\n  return `${start}...${end}`;\n};\n\nconst vowels = \"eaiou\".split(\"\");\nexport const isFirstVowel = (str: string) =>\n  Boolean(str) && str.length > 0 && vowels.includes(str.charAt(0).toLowerCase());\n","const connectBinanceChain = () => {\n  if (getBinanceChain() !== \"undefined\") {\n    getBinanceChain().enable().catch(console.error);\n  }\n};\n\nconst getBinanceChain = () => {\n  return (window as any).BinanceChain;\n};\n\nexport const signWithBinanceChain: (msg: string) => Promise<string> = (\n  msg: string\n) =>\n  new Promise((resolve, reject) => {\n    if (!getBinanceChain()) {\n      reject(\"no binance chain\");\n    }\n    getBinanceChain()\n      .request({ method: \"eth_requestAccounts\" })\n      .then((addresses: Array<string>) => {\n        const from = addresses[0];\n        if (!from) return connectBinanceChain();\n        getBinanceChain()\n          .request({\n            method: \"eth_sign\",\n            params: [from, msg],\n          })\n          .then(resolve)\n          .catch(reject);\n      });\n  });\n","import { base58_to_binary } from 'base58-js'\nimport { bech32, bech32m } from 'bech32';\nimport { createHash } from 'sha256-uint8array';\n\nconst sha256 = (payload: Uint8Array) => createHash().update(payload).digest();\n\nenum Network {\n  mainnet = 'mainnet',\n  testnet = 'testnet',\n  regtest = 'regtest',\n}\n\nenum AddressType {\n  p2pkh = 'p2pkh',\n  p2sh = 'p2sh',\n  p2wpkh = 'p2wpkh',\n  p2wsh = 'p2wsh',\n  p2tr = 'p2tr',\n}\n\ntype AddressInfo = {\n  bech32: boolean;\n  network: Network;\n  address: string;\n  type: AddressType;\n};\n\nconst addressTypes: { [key: number]: { type: AddressType; network: Network } } = {\n  0x12: {\n    type: AddressType.p2pkh,\n    network: Network.mainnet,\n  },\n\n\n  0x5a: {\n    type: AddressType.p2sh,\n    network: Network.mainnet,\n  },\n\n};\n\nconst parseBech32 = (address: string): AddressInfo => {\n  let decoded;\n\n  try {\n    //if (address.startsWith('bc1p') || address.startsWith('tb1p') || address.startsWith('bcrt1p')) {\n    //  decoded = bech32m.decode(address);\n    //} else {\n      decoded = bech32.decode(address);\n    //}\n  } catch (error) {\n    throw new Error('Invalid address');\n  }\n\n  const mapPrefixToNetwork: { [key: string]: Network } = {\n    df: Network.mainnet,\n    tb: Network.testnet,\n    bcrt: Network.regtest,\n  };\n\n  const network: Network = mapPrefixToNetwork[decoded.prefix];\n\n  if (network === undefined) {\n    throw new Error('Invalid address');\n  }\n\n  const witnessVersion = decoded.words[0];\n\n  if (witnessVersion < 0 || witnessVersion > 16) {\n    throw new Error('Invalid address');\n  }\n  const data = bech32.fromWords(decoded.words.slice(1));\n\n  let type;\n\n  if (data.length === 20) {\n    type = AddressType.p2wpkh;\n  } else if (witnessVersion === 1) {\n    type = AddressType.p2tr;\n  } else {\n    type = AddressType.p2wsh;\n  }\n\n  return {\n    bech32: true,\n    network,\n    address,\n    type,\n  };\n};\n\nconst getAddressInfo = (address: string): AddressInfo => {\n  let decoded: Uint8Array;\n  const prefix = address.substr(0, 2).toLowerCase();\n\n  if (prefix === 'df' || prefix === 'tb') {\n    return parseBech32(address);\n  }\n\n  try {\n    decoded = base58_to_binary(address);\n  } catch (error) {\n    throw new Error('Invalid address');\n  }\n\n  const { length } = decoded;\n\n  if (length !== 25) {\n    throw new Error('Invalid address');\n  }\n\n  const version = decoded[0];\n\n  const checksum = decoded.slice(length - 4, length);\n  const body = decoded.slice(0, length - 4);\n\n  const expectedChecksum = sha256(sha256(body)).slice(0, 4);\n\n  if (checksum.some((value: number, index: number) => value !== expectedChecksum[index])) {\n    throw new Error('Invalid address');\n  }\n\n  const validVersions = Object.keys(addressTypes).map(Number);\n\n  if (!validVersions.includes(version)) {\n    throw new Error('Invalid address');\n  }\n\n  const addressType = addressTypes[version];\n\n  return {\n    ...addressType,\n    address,\n    bech32: false,\n  };\n};\n\nconst validate = (address: string, network?: Network) => {\n  try {\n    const addressInfo = getAddressInfo(address);\n    console.log(addressInfo)\n    if (network) {\n      return network === addressInfo.network;\n    }\n\n    return true;\n  } catch (error) {\n    return false;\n  }\n};\n\nexport { getAddressInfo, Network, AddressType, validate };\nexport default validate;","import { RenNetwork } from \"@renproject/interfaces\";\nimport { useMultiwallet } from \"@renproject/multiwallet-ui\";\nimport { env } from \"process\";\nimport { env as SS } from \"../../constants/environmentVariables\";\n\nimport { useCallback, useEffect, useMemo } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport Web3 from \"web3\";\nimport { AbiItem } from 'web3-utils'\nimport {\n  WalletConnectionStatusType,\n  WalletStatus,\n} from \"../../components/utils/types\";\nimport { storageKeys } from \"../../constants/constants\";\nimport { db } from \"../../services/database/database\";\nimport { signWithBinanceChain } from \"../../services/wallets/bsc\";\nimport { BridgeWallet, RenChain } from \"../../utils/assetConfigs\";\nimport { $renNetwork } from \"../network/networkSlice\";\nimport {\n  $isAuthenticating,\n  $multiwalletChain,\n  $walletUser,\n  setAuthRequired,\n  setSignatures,\n  settingUser,\n  setUser,\n} from \"./walletSlice\";\n\ntype WalletData = ReturnType<typeof useMultiwallet> & {\n  account: string;\n  status: WalletConnectionStatusType;\n  walletConnected: boolean;\n  provider: any;\n  symbol: BridgeWallet;\n  deactivateConnector: () => void;\n};\n\nconst resolveWallet = (provider: any) => {\n  if (provider?.isMetaMask) {\n    return BridgeWallet.METAMASKW;\n  }\n\n  if (provider?.chainId === \"0x61\" || provider?.chainId?.indexOf(\"Binance\")) {\n    return BridgeWallet.BINANCESMARTW;\n  }\n\n  if (provider?.isMewConnect || provider?.isMEWConnect) {\n    return BridgeWallet.MEWCONNECTW;\n  }\n\n  return BridgeWallet.UNKNOWNW;\n};\n\ntype UseWallet = (chain: string) => WalletData;\n\nexport const useWallet: UseWallet = (chain) => {\n  const {\n    enabledChains,\n    targetNetwork,\n    activateConnector,\n    setTargetNetwork,\n  } = useMultiwallet();\n  const { account = \"\", status = \"disconnected\" } =\n    enabledChains?.[chain] || {};\n  const provider = enabledChains?.[chain]?.provider;\n  const symbol = resolveWallet(provider);\n  const emptyFn = () => {};\n  const deactivateConnector =\n    enabledChains[chain]?.connector.deactivate || emptyFn;\n\n  return {\n    account,\n    status,\n    walletConnected: status === WalletStatus.CONNECTED,\n    provider,\n    symbol,\n    targetNetwork,\n    enabledChains,\n    activateConnector,\n    setTargetNetwork,\n    deactivateConnector,\n  } as WalletData;\n};\n\nexport const useSelectedChainWallet = () => {\n  const multiwalletChain = useSelector($multiwalletChain);\n  return useWallet(multiwalletChain);\n};\n\nexport const useSyncMultiwalletNetwork = () => {\n  const { targetNetwork, setTargetNetwork } = useSelectedChainWallet();\n  const renNetwork = useSelector($renNetwork);\n  useEffect(() => {\n    if (renNetwork !== targetNetwork) {\n      console.info(\"syncing multiwallet with network\", renNetwork);\n      setTargetNetwork(\n        renNetwork.includes(\"mainnet\")\n          ? RenNetwork.Mainnet\n          : renNetwork.includes(\"testnet\")\n          ? RenNetwork.Testnet\n          : renNetwork\n      );\n    }\n  }, [renNetwork, setTargetNetwork, targetNetwork]);\n};\n\nconst SIGN_MESSAGE = \"You are not supposed to do this!!\";\n\nconst ABI = [\n  {\n    \"anonymous\": false,\n    \"inputs\": [\n      {\n        \"indexed\": false,\n        \"internalType\": \"address\",\n        \"name\": \"_from\",\n        \"type\": \"address\"\n      },\n      {\n        \"indexed\": true,\n        \"internalType\": \"string\",\n        \"name\": \"_to\",\n        \"type\": \"string\"\n      },\n      {\n        \"indexed\": false,\n        \"internalType\": \"string\",\n        \"name\": \"bridge\",\n        \"type\": \"string\"\n      },\n      {\n        \"indexed\": false,\n        \"internalType\": \"uint256\",\n        \"name\": \"_value\",\n        \"type\": \"uint256\"\n      },\n      {\n        \"indexed\": true,\n        \"internalType\": \"uint256\",\n        \"name\": \"extradata\",\n        \"type\": \"uint256\"\n      }\n    ],\n    \"name\": \"DepositToDefichain\",\n    \"type\": \"event\"\n  },\n  {\n    \"inputs\": [],\n    \"name\": \"owner\",\n    \"outputs\": [\n      {\n        \"internalType\": \"address\",\n        \"name\": \"\",\n        \"type\": \"address\"\n      }\n    ],\n    \"stateMutability\": \"view\",\n    \"type\": \"function\",\n    \"constant\": true\n  },\n  {\n    \"inputs\": [\n      {\n        \"internalType\": \"bytes\",\n        \"name\": \"\",\n        \"type\": \"bytes\"\n      }\n    ],\n    \"name\": \"spent_outputs\",\n    \"outputs\": [\n      {\n        \"internalType\": \"bool\",\n        \"name\": \"\",\n        \"type\": \"bool\"\n      }\n    ],\n    \"stateMutability\": \"view\",\n    \"type\": \"function\",\n    \"constant\": true\n  },\n  {\n    \"inputs\": [\n      {\n        \"internalType\": \"string\",\n        \"name\": \"\",\n        \"type\": \"string\"\n      }\n    ],\n    \"name\": \"supported_bridges\",\n    \"outputs\": [\n      {\n        \"internalType\": \"address\",\n        \"name\": \"\",\n        \"type\": \"address\"\n      }\n    ],\n    \"stateMutability\": \"view\",\n    \"type\": \"function\",\n    \"constant\": true\n  },\n  {\n    \"inputs\": [\n      {\n        \"internalType\": \"address\",\n        \"name\": \"new_owner\",\n        \"type\": \"address\"\n      }\n    ],\n    \"name\": \"transferOwnership\",\n    \"outputs\": [],\n    \"stateMutability\": \"nonpayable\",\n    \"type\": \"function\"\n  },\n  {\n    \"inputs\": [\n      {\n        \"internalType\": \"string\",\n        \"name\": \"name\",\n        \"type\": \"string\"\n      },\n      {\n        \"internalType\": \"address\",\n        \"name\": \"tokenAddress\",\n        \"type\": \"address\"\n      }\n    ],\n    \"name\": \"addNewToken\",\n    \"outputs\": [],\n    \"stateMutability\": \"nonpayable\",\n    \"type\": \"function\"\n  },\n  {\n    \"inputs\": [\n      {\n        \"internalType\": \"string\",\n        \"name\": \"name\",\n        \"type\": \"string\"\n      }\n    ],\n    \"name\": \"removeToken\",\n    \"outputs\": [],\n    \"stateMutability\": \"nonpayable\",\n    \"type\": \"function\"\n  },\n  {\n    \"inputs\": [\n      {\n        \"internalType\": \"string\",\n        \"name\": \"bridge\",\n        \"type\": \"string\"\n      }\n    ],\n    \"name\": \"haveBridge\",\n    \"outputs\": [\n      {\n        \"internalType\": \"bool\",\n        \"name\": \"\",\n        \"type\": \"bool\"\n      }\n    ],\n    \"stateMutability\": \"view\",\n    \"type\": \"function\",\n    \"constant\": true\n  },\n  {\n    \"inputs\": [\n      {\n        \"internalType\": \"address\",\n        \"name\": \"targetAddress\",\n        \"type\": \"address\"\n      },\n      {\n        \"internalType\": \"string\",\n        \"name\": \"txid\",\n        \"type\": \"string\"\n      },\n      {\n        \"internalType\": \"uint256\",\n        \"name\": \"n\",\n        \"type\": \"uint256\"\n      },\n      {\n        \"internalType\": \"uint256\",\n        \"name\": \"amount\",\n        \"type\": \"uint256\"\n      },\n      {\n        \"internalType\": \"string\",\n        \"name\": \"bridge\",\n        \"type\": \"string\"\n      }\n    ],\n    \"name\": \"messageToSign\",\n    \"outputs\": [\n      {\n        \"internalType\": \"bytes\",\n        \"name\": \"\",\n        \"type\": \"bytes\"\n      }\n    ],\n    \"stateMutability\": \"pure\",\n    \"type\": \"function\",\n    \"constant\": true\n  },\n  {\n    \"inputs\": [\n      {\n        \"internalType\": \"address\",\n        \"name\": \"targetAddress\",\n        \"type\": \"address\"\n      },\n      {\n        \"internalType\": \"string\",\n        \"name\": \"txid\",\n        \"type\": \"string\"\n      },\n      {\n        \"internalType\": \"uint256\",\n        \"name\": \"n\",\n        \"type\": \"uint256\"\n      },\n      {\n        \"internalType\": \"uint256\",\n        \"name\": \"amount\",\n        \"type\": \"uint256\"\n      },\n      {\n        \"internalType\": \"string\",\n        \"name\": \"bridge\",\n        \"type\": \"string\"\n      }\n    ],\n    \"name\": \"hashToSign\",\n    \"outputs\": [\n      {\n        \"internalType\": \"bytes32\",\n        \"name\": \"\",\n        \"type\": \"bytes32\"\n      }\n    ],\n    \"stateMutability\": \"pure\",\n    \"type\": \"function\",\n    \"constant\": true\n  },\n  {\n    \"inputs\": [\n      {\n        \"internalType\": \"string\",\n        \"name\": \"targetAddress\",\n        \"type\": \"string\"\n      },\n      {\n        \"internalType\": \"string\",\n        \"name\": \"bridge\",\n        \"type\": \"string\"\n      },\n      {\n        \"internalType\": \"uint256\",\n        \"name\": \"amount\",\n        \"type\": \"uint256\"\n      }\n    ],\n    \"name\": \"burnToken\",\n    \"outputs\": [\n      {\n        \"internalType\": \"uint256\",\n        \"name\": \"\",\n        \"type\": \"uint256\"\n      }\n    ],\n    \"stateMutability\": \"nonpayable\",\n    \"type\": \"function\"\n  },\n  {\n    \"inputs\": [\n      {\n        \"internalType\": \"address\",\n        \"name\": \"targetAddress\",\n        \"type\": \"address\"\n      },\n      {\n        \"internalType\": \"string\",\n        \"name\": \"txid\",\n        \"type\": \"string\"\n      },\n      {\n        \"internalType\": \"uint256\",\n        \"name\": \"n\",\n        \"type\": \"uint256\"\n      },\n      {\n        \"internalType\": \"uint256\",\n        \"name\": \"amount\",\n        \"type\": \"uint256\"\n      },\n      {\n        \"internalType\": \"string\",\n        \"name\": \"bridge\",\n        \"type\": \"string\"\n      },\n      {\n        \"internalType\": \"bytes32\",\n        \"name\": \"signature_r\",\n        \"type\": \"bytes32\"\n      },\n      {\n        \"internalType\": \"bytes32\",\n        \"name\": \"signature_s\",\n        \"type\": \"bytes32\"\n      },\n      {\n        \"internalType\": \"uint8\",\n        \"name\": \"signature_v\",\n        \"type\": \"uint8\"\n      }\n    ],\n    \"name\": \"whoSignedThis\",\n    \"outputs\": [\n      {\n        \"internalType\": \"address\",\n        \"name\": \"\",\n        \"type\": \"address\"\n      }\n    ],\n    \"stateMutability\": \"pure\",\n    \"type\": \"function\",\n    \"constant\": true\n  },\n  {\n    \"inputs\": [\n      {\n        \"internalType\": \"address\",\n        \"name\": \"targetAddress\",\n        \"type\": \"address\"\n      },\n      {\n        \"internalType\": \"string\",\n        \"name\": \"txid\",\n        \"type\": \"string\"\n      },\n      {\n        \"internalType\": \"uint256\",\n        \"name\": \"n\",\n        \"type\": \"uint256\"\n      },\n      {\n        \"internalType\": \"uint256\",\n        \"name\": \"amount\",\n        \"type\": \"uint256\"\n      },\n      {\n        \"internalType\": \"string\",\n        \"name\": \"bridge\",\n        \"type\": \"string\"\n      },\n      {\n        \"internalType\": \"bytes32\",\n        \"name\": \"signature_r\",\n        \"type\": \"bytes32\"\n      },\n      {\n        \"internalType\": \"bytes32\",\n        \"name\": \"signature_s\",\n        \"type\": \"bytes32\"\n      },\n      {\n        \"internalType\": \"uint8\",\n        \"name\": \"signature_v\",\n        \"type\": \"uint8\"\n      }\n    ],\n    \"name\": \"mintToken\",\n    \"outputs\": [],\n    \"stateMutability\": \"nonpayable\",\n    \"type\": \"function\"\n  },\n  {\n    \"inputs\": [\n      {\n        \"internalType\": \"address\",\n        \"name\": \"in_signer\",\n        \"type\": \"address\"\n      }\n    ],\n    \"name\": \"initialize_gateway\",\n    \"outputs\": [],\n    \"stateMutability\": \"nonpayable\",\n    \"type\": \"function\"\n  },\n  {\n    \"inputs\": [\n      {\n        \"internalType\": \"address\",\n        \"name\": \"new_signer\",\n        \"type\": \"address\"\n      }\n    ],\n    \"name\": \"newSigner\",\n    \"outputs\": [],\n    \"stateMutability\": \"nonpayable\",\n    \"type\": \"function\"\n  },\n  {\n    \"inputs\": [\n      {\n        \"internalType\": \"uint256\",\n        \"name\": \"amount\",\n        \"type\": \"uint256\"\n      }\n    ],\n    \"name\": \"precisionRebase\",\n    \"outputs\": [\n      {\n        \"internalType\": \"uint256\",\n        \"name\": \"\",\n        \"type\": \"uint256\"\n      }\n    ],\n    \"stateMutability\": \"pure\",\n    \"type\": \"function\",\n    \"constant\": true\n  },\n  {\n    \"inputs\": [\n      {\n        \"internalType\": \"uint256\",\n        \"name\": \"amount\",\n        \"type\": \"uint256\"\n      }\n    ],\n    \"name\": \"reducePrecision\",\n    \"outputs\": [\n      {\n        \"internalType\": \"uint256\",\n        \"name\": \"\",\n        \"type\": \"uint256\"\n      }\n    ],\n    \"stateMutability\": \"pure\",\n    \"type\": \"function\",\n    \"constant\": true\n  }\n];\n\n// TODO TBD: cache for more wallet providers?\nconst useWeb3 = () => {\n  const { provider } = useSelectedChainWallet();\n  return useMemo(() => new Web3(provider), [provider]);\n};\n\n\nconst sendRedeemTxHook = async (address: string,\n  web3: Web3,\n  chain: RenChain, targetAddress: string, txid: string, n: number, amount: number, bridge: string, r: string, s: string,v: number) => {    \n    return new Promise((resolve, reject) => {\n\n    if ((web3.currentProvider as any).connection.isMetaMask) {\n        let myContract = new web3.eth.Contract(ABI as AbiItem[], chain==\"ethereum\" ? SS.ETH_CONTRACT_ADDRESS : SS.BSC_CONTRACT_ADDRESS);\n        myContract.methods.mintToken(targetAddress, txid, n, amount, bridge, r, s, v).send({from: address}).on('transactionHash', resolve)\n        .on('error', reject);;\n    }\n  })\n}\n\nconst addTokenHook = (web3: Web3, chain: RenChain) => {    \n  console.log(\"Add Token for Network:\", chain)\n      if ((web3.currentProvider as any).connection.isMetaMask) {\n        (web3.currentProvider as any).connection\n        .sendAsync({\n          method: 'wallet_watchAsset',\n          params: {\n            type: 'ERC20',\n            options: {\n              address: chain==\"ethereum\" ? SS.ETH_TOKEN_ADDRESS : SS.BSC_TOKEN_ADDRESS,\n              symbol: 'brDFI',\n              decimals: 18,\n              image: 'https://cryptologos.cc/logos/defichain-dfi-logo.svg?v=018',\n            },\n          },\n        }, (err: any, added: any) => {\n          console.log('provider returned', err, added)\n        })\n      }\n}\n\nconst addBinanceChainHook = async (web3: Web3, chain: RenChain) => {    \n  \n  return new Promise((resolve, reject) => {\n    let networkData = [\n      {\n        chainId: '0x38',\n            chainName: 'Binance Smart Chain',\n            nativeCurrency:\n                {\n                    name: 'BNB',\n                    symbol: 'BNB',\n                    decimals: 18\n                },\n            rpcUrls: ['https://bsc-dataseed.binance.org/'],\n            blockExplorerUrls: ['https://bscscan.com/'],\n      },\n    ];\n    if ((web3.currentProvider as any).connection.isMetaMask) {\n      (web3.currentProvider as any).connection\n      .request\n      ({\n        method: \"wallet_addEthereumChain\",\n        params: networkData,\n    \n      }, (err: any, added: any) => {\n        console.log('provider returned', err, added)\n        if (err || 'error' in added) {\n            reject(\"error\")\n        } else {\n            resolve(\"good\")\n        }\n    })\n    }\n})\n}\n\nconst addEthereumChainHook = async (web3: Web3, chain: RenChain) => {    \n  return new Promise((resolve, reject) => {\n    let networkData = [\n      {\n        chainId: '0x1',\n      },\n    ];\n    if ((web3.currentProvider as any).connection.isMetaMask) {\n      (web3.currentProvider as any).connection\n      .request\n      ({\n        method: \"wallet_switchEthereumChain\",\n        params: networkData,\n    \n      }, (err: any, added: any) => {\n        console.log('provider returned', err, added)\n        if (err || 'error' in added) {\n            reject(\"error\")\n        } else {\n            resolve(\"good\")\n        }\n    })\n    }\n})\n}\n\nconst sendBurnTxHook = async (address: string,\n  web3: Web3,\n  chain: RenChain, targetAddress: string, amount: bigint, bridge: string) => {    \n\n  return new Promise((resolve, reject) => {\n    if ((web3.currentProvider as any).connection.isMetaMask) {\n        let myContract = new web3.eth.Contract(ABI as AbiItem[], chain==\"ethereum\" ? SS.ETH_CONTRACT_ADDRESS : SS.BSC_CONTRACT_ADDRESS);\n        let response = myContract.methods.burnToken(targetAddress, bridge, \"0x\"+amount.toString(16)).send({from: address}).on('transactionHash', resolve)\n        .on('error', reject);;\n    }\n  })\n}\n\nexport const useRedeem = () => {\n  const chain = useSelector($multiwalletChain);\n  const { account, status } = useWallet(chain);\n  const web3 = useWeb3();\n  const dispatch = useDispatch();\n  const getSignatures = useCallback(async (targetAddress: string, txid: string, n: number, amount: number, bridge: string, r: string, s: string,v: number) => {\n    amount = amount - 0.01*100000000 // TODO make 0.1 fee variable\n    if (account && web3 && status === \"connected\") {\n      try {\n        console.log(targetAddress, txid, n, amount, bridge.toUpperCase(), r, s, v)\n        const signatures = await sendRedeemTxHook(account, web3, chain, targetAddress, txid, n, amount, bridge.toUpperCase(), r, s, v);\n        return {err:null, result:signatures}\n      } catch (error) {\n        return {err:error, result:null};\n      }\n    }\n    return {err:{code:-1, message:\"something went wrong\"}, result:null}\n  }, [account, web3, status, chain, dispatch]);\n\n  return { getSignatures };\n};\n\nexport const useToken = () => {\n  const chain = useSelector($multiwalletChain);\n  const web3 = useWeb3();\n  const getToken = useCallback(() => {\n    if (web3) {\n      addTokenHook(web3, chain)\n    }\n  }, [web3, chain]);\n\n  return { getToken };\n};\n\nexport const useAddBsc = (chainname: string) => {\n  const chain = useSelector($multiwalletChain);\n  const { account, status } = useWallet(chain);\n  const web3 = useWeb3();\n  const dispatch = useDispatch();\n  const updateBsc = useCallback(async () => {\n    if (web3) {\n      try {\n        if(chainname==\"Ethereum\"){\n            const signatures = await addEthereumChainHook(web3, chain);\n            return {err:null, result:signatures}\n        }else{\n            const signatures = await addBinanceChainHook(web3, chain);\n            return {err:null, result:signatures}\n        }\n      } catch (error) {\n        return {err:error, result:null};\n      }\n    }\n    return {err:{code:-1, message:\"something went wrong\"}, result:null}\n  }, [account, web3, status, chain, dispatch]);\n\n  return { updateBsc };\n};\n\n\nexport const useBurn = () => {\n  const chain = useSelector($multiwalletChain);\n  const { account, status } = useWallet(chain);\n  const web3 = useWeb3();\n  const dispatch = useDispatch();\n  const getBurn = useCallback(async (targetAddress: string, amount: number, bridge: string) => {\n    // TODO FIX THIS SHIT amount = amount*1000000000000000000 - 0.1*1000000000000000000 // TODO make 0.1 fee variable\n    var amount_bgint = BigInt(web3.utils.toWei(amount.toString(), 'ether'))\n    \n    if (account && web3 && status === \"connected\") {\n      try {\n        const signatures = await sendBurnTxHook(account, web3, chain, targetAddress, amount_bgint, bridge.toUpperCase());\n        return {err:null, result:signatures}\n      } catch (error) {\n        return {err:error, result:null};\n      }\n    }\n    return {err:{code:-1, message:\"something went wrong\"}, result:null}\n  }, [account, web3, status, chain, dispatch]);\n\n  return { getBurn };\n};\n\nconst getWeb3Signatures = async (\n  address: string,\n  web3: Web3,\n  chain: RenChain\n) => {\n  const localSigMap = JSON.parse(\n    localStorage.getItem(storageKeys.SIG_MAP) || \"{}\"\n  );\n  const localRawSigMap = JSON.parse(\n    localStorage.getItem(storageKeys.RAW_SIG_MAP) || \"{}\"\n  );\n  const addressLowerCase = address.toLowerCase();\n\n  let signature: string = localSigMap[addressLowerCase] || \"\";\n  let rawSignature: string = localRawSigMap[addressLowerCase] || \"\";\n\n  if (!signature || !rawSignature) {\n    // get unique wallet signature for database backup\n    if (\n      chain === RenChain.ethereum ||\n      // signing is actually based on wallet, not chain,\n      // so use this style if the provider is eth\n      // TODO: move signing functionality into multiwallet?\n      (web3.currentProvider as any).connection.isMetaMask\n    ) {\n      console.info(\"signing\");\n      rawSignature = await web3.eth.personal.sign(\n        web3.utils.utf8ToHex(SIGN_MESSAGE),\n        addressLowerCase,\n        \"\"\n      );\n    } else if (chain === RenChain.binanceSmartChain) {\n      rawSignature = await signWithBinanceChain(SIGN_MESSAGE);\n    }\n\n    localRawSigMap[addressLowerCase] = rawSignature;\n    localStorage.setItem(\n      storageKeys.RAW_SIG_MAP,\n      JSON.stringify(localRawSigMap)\n    );\n\n    signature = web3.utils.sha3(rawSignature);\n    localSigMap[addressLowerCase] = signature;\n    localStorage.setItem(storageKeys.SIG_MAP, JSON.stringify(localSigMap));\n  }\n  return { signature, rawSignature };\n};\n\nexport const useSignatures = () => {\n  const dispatch = useDispatch();\n  const chain = useSelector($multiwalletChain);\n  const { account, status } = useWallet(chain);\n  const web3 = useWeb3();\n  const getSignatures = useCallback(async () => {\n    console.debug(\"reauth\");\n    if (account && web3 && status === \"connected\") {\n      /*try {\n        const signatures = await getWeb3Signatures(account, web3, chain);\n        dispatch(setSignatures(signatures));\n        console.debug(\"account\", account);\n        dispatch(settingUser());\n        const userData = await db.getUser(account.toLowerCase(), signatures);\n        dispatch(setUser(userData));\n      } catch (error) {\n        // FIXME: dispatch some error here to handle in UI\n        console.error(error);\n      }*/\n    }\n  }, [account, web3, status, chain, dispatch]);\n\n  return { getSignatures };\n};\n\nexport const useWeb3Signatures = () => {\n  const { getSignatures } = useSignatures();\n  useEffect(() => {\n    getSignatures();\n  }, [getSignatures]);\n\n  return { getSignatures };\n};\n\nexport const useAuthentication = () => {\n  const { account } = useSelectedChainWallet();\n  const user = useSelector($walletUser);\n  const isAuthenticating = useSelector($isAuthenticating);\n  const { getSignatures } = useSignatures();\n  const isAuthenticated = user !== null && account.toLowerCase() === user.uid;\n\n  return { isAuthenticated, isAuthenticating, authenticate: getSignatures };\n};\n\nexport const useAuthRequired = (authRequired: boolean) => {\n  const dispatch = useDispatch();\n  useEffect(() => {\n    dispatch(setAuthRequired(authRequired));\n    return () => {\n      dispatch(setAuthRequired(false));\n    };\n  }, [dispatch, authRequired]);\n};\n","import { RenNetwork } from \"@renproject/interfaces\";\nimport { GatewaySession } from \"@renproject/ren-tx\";\nimport { useCallback, useEffect, useState } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { useHistory } from \"react-router-dom\";\nimport { paths } from \"../../pages/routes\";\nimport { useNotifications } from \"../../providers/Notifications\";\nimport { db } from \"../../services/database/database\";\nimport {\n  BridgeCurrency,\n  getCurrencyConfig,\n  isMainnetNetwork,\n  isTestnetNetwork,\n} from \"../../utils/assetConfigs\";\nimport { trimAddress } from '../../utils/strings'\nimport { $renNetwork, setRenNetwork } from \"../network/networkSlice\";\nimport { useSelectedChainWallet } from \"../wallet/walletHooks\";\nimport { $multiwalletChain } from \"../wallet/walletSlice\";\nimport {\n  $currentTxId,\n  removeTransaction,\n  setCurrentTxId,\n} from \"./transactionsSlice\";\nimport { TxType } from \"./transactionsUtils\";\n\nexport const useTransactionDeletion = (tx: GatewaySession) => {\n  const dispatch = useDispatch();\n  const history = useHistory();\n  const { showNotification } = useNotifications();\n  const { walletConnected } = useSelectedChainWallet();\n\n  const [menuOpened, setMenuOpened] = useState(false);\n  const handleMenuClose = useCallback(() => {\n    setMenuOpened(false);\n  }, []);\n  const handleMenuOpen = useCallback(() => {\n    if (walletConnected) {\n      setMenuOpened(true);\n    }\n  }, [walletConnected]);\n  const handleDeleteTx = useCallback(() => {\n    db.deleteTx(tx).then(() => {\n      dispatch(removeTransaction(tx));\n      showNotification(`Transaction ${trimAddress(tx.id, 6)} deleted.`);\n      history.push(tx.type === TxType.MINT ? paths.MINT : paths.RELEASE);\n    });\n  }, [dispatch, history, showNotification, tx]);\n\n  return { menuOpened, handleMenuOpen, handleMenuClose, handleDeleteTx };\n};\n\nexport const useRenNetworkTracker = (currency: BridgeCurrency) => {\n  const dispatch = useDispatch();\n  const renChain = useSelector($multiwalletChain);\n  const renNetwork = useSelector($renNetwork);\n  useEffect(() => {\n    const currencyConfig = getCurrencyConfig(currency);\n    const networkMapping = currencyConfig.networkMappings[renChain];\n    let newNetwork: RenNetwork | null = null;\n    if (isTestnetNetwork(renNetwork)) {\n      newNetwork = networkMapping.testnet;\n    } else if (isMainnetNetwork(renNetwork)) {\n      newNetwork = networkMapping.mainnet;\n    } else {\n      console.error(`Unknown network ${newNetwork}`);\n    }\n    if (newNetwork && renNetwork !== newNetwork) {\n      dispatch(setRenNetwork(newNetwork));\n    }\n  }, [dispatch, renChain, currency, renNetwork]);\n};\n\nexport const useSetCurrentTxId = (id: string) => {\n  const dispatch = useDispatch();\n  const currentId = useSelector($currentTxId);\n  useEffect(() => {\n    if (id !== currentId) {\n      dispatch(setCurrentTxId(id));\n    }\n  }, [dispatch, id, currentId]);\n};\n","import { styled } from \"@material-ui/core\";\n\nexport const CheckboxWrapper = styled(\"div\")({\n  marginTop: 10,\n  textAlign: 'center'\n});\n","import React, { FunctionComponent, useCallback, useState } from \"react\";\nimport { makeStyles } from \"@material-ui/core\";\nimport classNames from \"classnames\";\nimport {DEV} from \"../../constants/environmentVariables\"\nconst useStyles = makeStyles({\n  root: {\n    background: \"lightgray\",\n  },\n  wrapper: {\n    background: \"gray\",\n    overflow: \"hidden\",\n    height: 5,\n    \"&:hover\": {\n      height: 10,\n    },\n  },\n  wrapperEnabled: {\n    height: \"auto\",\n    \"&:hover\": {\n      height: \"auto\",\n    },\n  },\n});\n\nconst off = DEV == false;\n\ntype DebugProps = {\n  it: any;\n  force?: boolean;\n  disable?: boolean;\n  wrapper?: boolean;\n};\n\n\ntype DebugWrapperProps = {\n  enabled: boolean;\n};\n\n\n\nconst DebugWrapper: FunctionComponent<DebugWrapperProps> = ({\n  enabled,\n  children,\n}) => {\n  const classes = useStyles();\n  const [show, setShow] = useState(false);\n  const toggleShow = useCallback(() => {\n    setShow(!show);\n  }, [show]);\n  if (!enabled) {\n    return <>{children}</>;\n  }\n  const className = classNames(classes.wrapper, {\n    [classes.wrapperEnabled]: show,\n  });\n  return (\n    <div className={className} onClick={toggleShow}>\n      {children}\n    </div>\n  );\n};\n\nconst getCircularReplacer = () => {\n  const seen = new WeakSet();\n  return (key : any, value : any) => {\n    if (value && value.type === \"Buffer\") {\n      return \"buffer\";\n    }\n    if (typeof value === \"object\" && value !== null) {\n      if (seen.has(value)) {\n        return;\n      }\n      seen.add(value);\n    }\n    return value;\n  };\n};\n\nexport const Debug: FunctionComponent<DebugProps> = ({\n  it,\n  force,\n  disable,\n  wrapper,\n  children,\n}) => {\n  const classes = useStyles();\n  const target = it || children;\n  const show = !off || force;\n  const noClick = useCallback((event) => {\n    event.stopPropagation();\n  }, []);\n  return show && !disable ? (\n    <DebugWrapper enabled={!!wrapper}>\n      <pre className={classes.root} onClick={noClick}>\n        {JSON.stringify(target, getCircularReplacer(), 2)}\n      </pre>\n    </DebugWrapper>\n  ) : null;\n};\n\nexport const DebugComponentProps: FunctionComponent<any> = (props) => (\n  <Debug it={props} />\n);\n","import { useState } from \"react\";\nimport { useSelector } from \"react-redux\";\nimport { useDebounce } from \"react-use\";\nimport {\n  getBurnAndReleaseFees,\n  getLockAndMintFees,\n} from \"../../services/rentx\";\nimport { BridgeCurrency } from \"../../utils/assetConfigs\";\nimport { $renNetwork } from \"../network/networkSlice\";\nimport { TxType } from \"../transactions/transactionsUtils\";\nimport { useWallet } from \"../wallet/walletHooks\";\nimport { $multiwalletChain } from \"../wallet/walletSlice\";\nimport { isSupportedByCurrentNetwork } from \"../wallet/walletUtils\";\nimport { SimpleFee } from \"./feesUtils\";\n\nconst feesCache: Record<string, SimpleFee> = {};\nexport const useFetchFees = (currency: BridgeCurrency, txType: TxType) => {\n  const multiwalletChain = useSelector($multiwalletChain);\n  const { provider, walletConnected } = useWallet(multiwalletChain);\n  const renNetwork = useSelector($renNetwork);\n  const initialFees: SimpleFee = {\n    mint: 20,\n    burn: 20,\n    lock: 1000000,\n    release: 1000000,\n  };\n  const [fees, setFees] = useState(initialFees);\n  const [pending, setPending] = useState(false);\n\n\n  return { fees, pending };\n};\n","import Numeral from \"numeral\";\n\nexport const toUsdFormat = (value: string | number) => {\n  return Numeral(value).format(\"$0,0.00\");\n};\n\nexport const numberFormatOptions = {\n  thousandSeparator: true,\n  allowLeadingZeros: false,\n  allowNegative: false,\n  allowedDecimalSeparators: [\".\", \",\"],\n};\n","import React, { FunctionComponent } from \"react\";\nimport NumberFormat, { NumberFormatProps } from \"react-number-format\";\nimport { numberFormatOptions } from \"../../utils/formatters\";\n\ntype NumberFormatTextProps = NumberFormatProps & {\n  spacedSuffix?: string;\n};\nexport const NumberFormatText: FunctionComponent<NumberFormatTextProps> = ({\n  spacedSuffix,\n  suffix,\n  ...props\n}) => {\n  const resolvedSuffix = spacedSuffix ? ` ${spacedSuffix}` : suffix;\n  return (\n    <NumberFormat\n      {...numberFormatOptions}\n      displayType=\"text\"\n      suffix={resolvedSuffix}\n      {...props}\n    />\n  );\n};\n","import { Backdrop } from \"@material-ui/core\";\nimport Dialog, { DialogProps } from \"@material-ui/core/Dialog\";\nimport MuiDialogTitle, {\n  DialogTitleProps,\n} from \"@material-ui/core/DialogTitle\";\nimport IconButton from \"@material-ui/core/IconButton\";\nimport { makeStyles, styled } from \"@material-ui/core/styles\";\nimport Typography from \"@material-ui/core/Typography\";\nimport CloseIcon from \"@material-ui/icons/Close\";\nimport classNames from \"classnames\";\nimport React, { FunctionComponent } from \"react\";\nimport { BackArrowIcon } from \"../icons/RenIcons\";\nimport { BridgePurePaper } from \"../layout/Paper\";\n\nexport const useBridgeModalTitleStyles = makeStyles((theme) => ({\n  dialogTitle: {\n    display: \"flex\",\n    justifyContent: \"space-between\",\n    alignItems: \"stretch\",\n    borderBottom: `1px solid ${theme.palette.divider}`,\n  },\n  titleWrapper: {\n    flexGrow: 1,\n    paddingLeft: 30, // compensating icons for visual text centering\n    paddingRight: 30,\n    textAlign: \"center\",\n  },\n  title: {},\n  customContentWrapper: {\n    flexGrow: 1,\n    display: \"flex\",\n    alignItems: \"center\",\n    justifyContent: \"center\"\n  },\n  closeButtonWrapper: {\n    minWidth: 30,\n  },\n  closeButton: {\n    color: theme.palette.grey[600],\n  },\n  prevButtonWrapper: {\n    minWidth: 30,\n  },\n  prevButton: {\n    color: theme.palette.grey[600],\n  },\n}));\n\ntype BridgeModalTitleProps = DialogTitleProps &\n  Pick<DialogProps, \"onClose\"> & {\n    onPrev?: () => void;\n  };\n\nexport const BridgeModalTitle: FunctionComponent<BridgeModalTitleProps> = ({\n  title,\n  onClose,\n  onPrev,\n  className,\n  children,\n}) => {\n  const styles = useBridgeModalTitleStyles();\n  const handleClose = () => {\n    if (onClose) {\n      onClose({}, \"backdropClick\");\n    }\n  };\n  const handlePrev = () => {\n    if (onPrev) {\n      onPrev();\n    }\n  };\n\n  return (\n    <MuiDialogTitle\n      disableTypography\n      className={classNames(className, styles.dialogTitle)}\n    >\n      <div className={styles.prevButtonWrapper}>\n        {onPrev ? (\n          <IconButton\n            aria-label=\"prev\"\n            className={styles.prevButton}\n            onClick={handlePrev}\n          >\n            <BackArrowIcon fontSize=\"inherit\" />\n          </IconButton>\n        ) : null}\n      </div>\n      {title && (\n        <div className={styles.titleWrapper}>\n          <Typography variant=\"body1\" className={styles.title}>\n            {title}\n          </Typography>\n        </div>\n      )}\n      {children && (\n        <div className={styles.customContentWrapper}>{children}</div>\n      )}\n      <div className={styles.closeButtonWrapper}>\n        {onClose ? (\n          <IconButton\n            aria-label=\"close\"\n            className={styles.closeButton}\n            onClick={handleClose}\n          >\n            <CloseIcon fontSize=\"inherit\" />\n          </IconButton>\n        ) : null}\n      </div>\n    </MuiDialogTitle>\n  );\n};\n\nexport const BridgeModal: FunctionComponent<DialogProps> = ({\n  title,\n  open,\n  onClose,\n  children,\n  maxWidth,\n}) => {\n  return (\n    <Dialog onClose={onClose} open={open} maxWidth={maxWidth}>\n      <BridgeModalTitle onClose={onClose} title={title} />\n      {children}\n    </Dialog>\n  );\n};\n\nconst useNestedDrawerStyles = makeStyles((theme) => ({\n  backdrop: {\n    position: \"absolute\",\n    top: 0,\n    right: 0,\n    bottom: 0,\n    left: 0,\n    zIndex: \"auto\",\n  },\n  positioner: {\n    position: \"relative\",\n    top: 0,\n    right: 0,\n    bottom: 0,\n    left: 0,\n  },\n  paper: {\n    position: \"absolute\",\n    top: 160,\n    bottom: 0,\n    width: \"100%\",\n    display: \"flex\",\n    flexDirection: \"column\",\n  },\n}));\n\ntype NestedDrawerProps = DialogProps & {\n  open: boolean;\n};\n\nconst stopPropagation = (event: any) => {\n  event.stopPropagation();\n};\n\nexport const NestedDrawerWrapper = styled(\"div\")({\n  display: \"flex\",\n  flexDirection: \"column\",\n  flexGrow: 2,\n  justifyContent: \"space-between\",\n});\n\nexport const NestedDrawerContent = styled(\"div\")({});\nexport const NestedDrawerActions = styled(\"div\")({});\n\nexport const NestedDrawer: FunctionComponent<NestedDrawerProps> = ({\n  open,\n  onClose,\n  title,\n  className,\n  children,\n}) => {\n  const styles = useNestedDrawerStyles();\n  const resolvedClassName = classNames(className, styles.paper);\n\n  return (\n    <Backdrop className={styles.backdrop} open={open} onClick={onClose as any}>\n      <BridgePurePaper className={resolvedClassName} onClick={stopPropagation}>\n        {title && <BridgeModalTitle onClose={onClose} title={title} />}\n        {children}\n      </BridgePurePaper>\n    </Backdrop>\n  );\n};\n","const timeFormatLocale = \"en-US\";\n\nconst timeZone = \"UTC\";\n\nexport const dateOptions: Intl.DateTimeFormatOptions = {\n  timeZone,\n};\n\nexport const timeOptions: Intl.DateTimeFormatOptions = {\n  hour12: false,\n  timeZone,\n  timeZoneName: \"short\",\n};\n\nexport const getFormattedDateTime = (timestamp: number) => {\n  const dateObject = new Date(timestamp);\n  const date = dateObject.toLocaleDateString(navigator.language, dateOptions);\n  const time = dateObject.toLocaleTimeString(timeFormatLocale, timeOptions);\n  return { date, time };\n};\n\nexport const millisecondsToHMS = (milliseconds: number) => {\n  const seconds = Math.floor((milliseconds / 1000) % 60);\n  const minutes = Math.floor((milliseconds / 1000 / 60) % 60);\n  // take absolute hours as they may be greater than 24\n  const hours = Math.floor(milliseconds / (1000 * 60 * 60));\n  return { hours, minutes, seconds };\n};\n\nconst pad = (value: number) => {\n  return String(value).padStart(2, \"0\");\n};\n\nexport const getFormattedHMS = (milliseconds: number) => {\n  const { hours, minutes, seconds } = millisecondsToHMS(milliseconds);\n  return `${pad(hours)}:${pad(minutes)}:${pad(seconds)}`;\n};\n","import {\n  Button,\n  DialogProps,\n  styled,\n  Typography,\n  useTheme,\n} from '@material-ui/core'\nimport { GatewaySession } from '@renproject/ren-tx'\nimport React, {\n  FunctionComponent,\n  useCallback,\n  useEffect,\n  useState,\n} from 'react'\nimport { useHistory } from 'react-router-dom'\nimport { useInterval } from 'react-use'\nimport {\n  ActionButton,\n  ActionButtonWrapper,\n  RedButton,\n} from '../../../components/buttons/Buttons'\nimport {\n  SpecialAlertIcon,\n  WarningIcon,\n} from '../../../components/icons/RenIcons'\nimport {\n  PaperContent,\n  SpacedPaperContent,\n} from '../../../components/layout/Paper'\nimport { Link } from '../../../components/links/Links'\nimport {\n  BridgeModal,\n  NestedDrawer,\n  NestedDrawerActions,\n  NestedDrawerContent,\n  NestedDrawerWrapper,\n} from '../../../components/modals/BridgeModal'\nimport {\n  ProgressWithContent,\n  ProgressWrapper,\n  TransactionStatusInfo,\n} from '../../../components/progress/ProgressHelpers'\nimport { links } from '../../../constants/constants'\nimport { paths } from '../../../pages/routes'\nimport { usePaperTitle } from '../../../providers/TitleProviders'\nimport { getFormattedHMS } from '../../../utils/dates'\nimport { trimAddress } from '../../../utils/strings'\n\nexport const ProcessingTimeWrapper = styled(\"div\")({\n  marginTop: 5,\n  marginBottom: 5,\n});\n\ntype BookmarkPageWarningProps = {\n  onClosed?: () => void;\n};\n\nexport const BookmarkPageWarning: FunctionComponent<BookmarkPageWarningProps> = ({\n  onClosed,\n}) => {\n  const [open] = useState(true);\n  const handleClose = useCallback(() => {\n    if (onClosed) {\n      onClosed();\n    }\n    // setOpen(false);\n  }, [onClosed]);\n  return (\n    <NestedDrawer title=\"Warning\" open={open} onClose={handleClose}>\n      <NestedDrawerWrapper>\n        <NestedDrawerContent>\n          <PaperContent topPadding bottomPadding>\n            <Typography variant=\"h5\" align=\"center\" gutterBottom>\n              Bookmark this page\n            </Typography>\n            <Typography variant=\"body2\" align=\"center\" gutterBottom>\n              To ensure you don’t lose track of your transaction, please\n              bookmark this page.\n            </Typography>\n          </PaperContent>\n        </NestedDrawerContent>\n        <NestedDrawerActions>\n          <PaperContent bottomPadding>\n            <ActionButtonWrapper>\n              <ActionButton onClick={handleClose}>I understand</ActionButton>\n            </ActionButtonWrapper>\n          </PaperContent>\n        </NestedDrawerActions>\n      </NestedDrawerWrapper>\n    </NestedDrawer>\n  );\n};\n\ntype ProgressStatusProps = {\n  reason?: string;\n  processing?: boolean;\n};\n\nexport const ProgressStatus: FunctionComponent<ProgressStatusProps> = ({\n  reason = \"\",\n  processing = true,\n}) => {\n  const theme = useTheme();\n  const [, setTitle] = usePaperTitle();\n  useEffect(() => {\n    setTitle(reason);\n  }, [setTitle, reason]);\n  return (\n    <>\n      <ProgressWrapper>\n        <ProgressWithContent\n          processing={processing}\n          color={theme.palette.primary.main}\n        >\n          <TransactionStatusInfo status={reason} />\n        </ProgressWithContent>\n      </ProgressWrapper>\n    </>\n  );\n};\n\nexport type TransactionItemProps = {\n  tx: GatewaySession;\n  isActive?: boolean;\n  onContinue?: ((depositHash?: string) => void) | (() => void);\n};\n\ntype HMSCountdownProps = { milliseconds: number };\n\nexport const HMSCountdown: FunctionComponent<HMSCountdownProps> = ({\n  milliseconds,\n}) => {\n  const [count, setCount] = useState(milliseconds);\n  useInterval(() => {\n    setCount((ms) => ms - 1000);\n  }, 1000);\n  const time = getFormattedHMS(count);\n\n  return <strong>{time}</strong>;\n};\n\nconst ErrorIconWrapper = styled(\"div\")(({ theme }) => ({\n  fontSize: 72,\n  lineHeight: 1,\n  marginTop: 8,\n  textAlign: \"center\",\n  color: theme.customColors.textLight,\n}));\n\ntype ErrorWithActionProps = DialogProps & {\n  title?: string;\n  onAction?: () => void;\n  reason?: string;\n  actionText?: string;\n};\n\nexport const ErrorDialog: FunctionComponent<ErrorWithActionProps> = ({\n  title = \"Error\",\n  open,\n  reason = \"\",\n  actionText = \"\",\n  onAction,\n  children,\n}) => {\n  return (\n    <BridgeModal open={open} title={title} maxWidth=\"xs\">\n      <SpacedPaperContent>\n        <ErrorIconWrapper>\n          <WarningIcon fontSize=\"inherit\" color=\"inherit\" />\n        </ErrorIconWrapper>\n        <Typography variant=\"h5\" align=\"center\" gutterBottom>\n          {reason}\n        </Typography>\n        <Typography\n          color=\"textSecondary\"\n          align=\"center\"\n          gutterBottom\n          component=\"div\"\n        >\n          {children}\n        </Typography>\n      </SpacedPaperContent>\n      <PaperContent bottomPadding>\n        <ActionButtonWrapper>\n          <ActionButton onClick={onAction}>{actionText}</ActionButton>\n        </ActionButtonWrapper>\n      </PaperContent>\n    </BridgeModal>\n  );\n};\n\nexport const SubmitErrorDialog: FunctionComponent<ErrorWithActionProps> = (\n  props\n) => (\n  <ErrorDialog\n    reason=\"Error submitting\"\n    actionText=\"Return to submission screen\"\n    {...props}\n  >\n    <span>Return to previous screen to resubmit</span>\n  </ErrorDialog>\n);\n\nexport const GeneralErrorDialog: FunctionComponent<ErrorWithActionProps> = (\n  props\n) => (\n  <ErrorDialog\n    reason=\"An error has occurred\"\n    actionText=\"Refresh page\"\n    {...props}\n  >\n    <span>\n      Please ensure you have this page bookmarked before refreshing. If this\n      error persists, please{\" \"}\n      <Link external href={links.BUGS_LOG} color=\"primary\" underline=\"hover\">\n        submit a bug here\n      </Link>\n      .\n    </span>\n  </ErrorDialog>\n);\n\nexport const ExpiredErrorDialog: FunctionComponent<ErrorWithActionProps> = (\n  props\n) => {\n  const history = useHistory();\n  const goToHome = useCallback(() => {\n    history.push(paths.HOME);\n  }, [history]);\n\n  return (\n    <ErrorDialog\n      title=\"Expired\"\n      reason=\"This transaction has expired\"\n      actionText=\"Restart transaction\"\n      {...props}\n    >\n      <span>\n        Transactions expire after 24 hours. Please restart the transaction if\n        you wish to continue.\n      </span>\n      <ActionButtonWrapper>\n        <Button variant=\"text\" color=\"inherit\" onClick={goToHome}>\n          Back to home\n        </Button>\n      </ActionButtonWrapper>\n    </ErrorDialog>\n  );\n};\n\ntype WarningWithActionsProps = DialogProps & {\n  title?: string;\n  reason?: string;\n  onMainAction?: () => void;\n  mainActionText?: string;\n  mainActionDisabled?: boolean;\n  onAlternativeAction?: () => void;\n  alternativeActionText?: string;\n  alternativeActionDisabled?: boolean;\n};\n\nexport const WarningDialog: FunctionComponent<WarningWithActionsProps> = ({\n  title = \"Warning\",\n  open,\n  reason = \"\",\n  mainActionText = \"\",\n  onMainAction,\n  mainActionDisabled,\n  alternativeActionText = \"\",\n  onAlternativeAction,\n  alternativeActionDisabled,\n  children,\n}) => {\n  const showMainAction = onMainAction && mainActionText;\n  return (\n    <BridgeModal open={open} title={title} maxWidth=\"xs\">\n      <SpacedPaperContent>\n        <ErrorIconWrapper>\n          <SpecialAlertIcon fontSize=\"inherit\" color=\"inherit\" />\n        </ErrorIconWrapper>\n        <Typography variant=\"h5\" align=\"center\" gutterBottom>\n          {reason}\n        </Typography>\n        <Typography\n          color=\"textSecondary\"\n          align=\"center\"\n          gutterBottom\n          component=\"div\"\n        >\n          {children}\n        </Typography>\n      </SpacedPaperContent>\n      <PaperContent bottomPadding>\n        <ActionButtonWrapper>\n          <RedButton\n            variant=\"text\"\n            color=\"inherit\"\n            onClick={onAlternativeAction}\n            disabled={alternativeActionDisabled}\n          >\n            {alternativeActionText}\n          </RedButton>\n        </ActionButtonWrapper>\n        {showMainAction && (\n          <ActionButtonWrapper>\n            <ActionButton onClick={onMainAction} disabled={mainActionDisabled}>\n              {mainActionText}\n            </ActionButton>\n          </ActionButtonWrapper>\n        )}\n      </PaperContent>\n    </BridgeModal>\n  );\n};\n\ntype WrongAddressWarningDialog = WarningWithActionsProps & {\n  address: string;\n  addressExplorerLink: string;\n  currency: string;\n};\n\nexport const WrongAddressWarningDialog: FunctionComponent<WrongAddressWarningDialog> = ({\n  address,\n  addressExplorerLink,\n  currency,\n  ...props\n}) => {\n  return (\n    <WarningDialog\n      reason=\"Different account detected\"\n      alternativeActionText=\"Continue anyway\"\n      {...props}\n    >\n      <span>\n        This transaction was created with a different account to the current\n        account (\n        <Link\n          external\n          href={addressExplorerLink}\n          color=\"primary\"\n          underline=\"hover\"\n        >\n          {trimAddress(address, 5)}\n        </Link>\n        ). If you do not have access to the account that created the\n        transaction, you will not be able to access the {currency}. Please\n        switch account in your wallet.\n      </span>\n    </WarningDialog>\n  );\n};\n\n","import React, { FunctionComponent } from \"react\";\nimport { styled } from \"@material-ui/core\";\nimport { BridgeChainConfig, CurrencyConfig } from \"../../../utils/assetConfigs\";\nimport { HMSCountdown } from \"../../transactions/components/TransactionsHelpers\";\nimport { props } from \"../../../theme/props\";\n\nexport const mintTooltips = {\n  sending: \"The amount and asset you’re sending before fees are applied.\",\n  to: \"The blockchain you’re sending the asset to.\",\n  recipientAddress: \"The wallet that will receive the minted assets.\",\n};\n\nexport const getMintDynamicTooltips = (\n  chainConfig: BridgeChainConfig,\n  chainNativeCurrencyConfig: CurrencyConfig\n) => ({\n  acknowledge: `Minting an asset on ${chainConfig.full} requires you to submit a transaction. It will cost you a small amount of ${chainNativeCurrencyConfig.short}.`,\n});\n\nexport const DepositWrapper = styled(\"div\")({\n  position: \"relative\",\n});\n\ntype AddressValidityMessageProps = {\n  milliseconds: number;\n  destNetwork: string;\n};\n\ntype GenericProps = {\n  msg: string;\n};\n\nexport const AddressValidityMessage: FunctionComponent<AddressValidityMessageProps> = ({\n  milliseconds,\n  destNetwork,\n}) => {\n  return (\n    <span>\n      This Gateway Address expires in{\" \"}\n      <HMSCountdown milliseconds={milliseconds} />. Do not send multiple\n      deposits or deposit after it has expired. <br />\n      Once you have deposited funds to the Gateway Address, you have 24 hours to\n      submit the mint transaction to {destNetwork}\n    </span>\n  );\n};\n\nexport const MultipleDepositsMessage: FunctionComponent = () => {\n  return (\n    <span>\n      DefiChain-Bridge has detected another deposit to the same gateway address. It\n      will require an additional submission to to the destination chain via your\n      web3 wallet.\n    </span>\n  );\n};\n\nexport const GenericMessage: FunctionComponent<GenericProps> = (msg) => {\n  return (\n    <span>\n      {msg}\n    </span>\n  );\n};","import React, { FunctionComponent } from \"react\";\nimport { useSelector } from \"react-redux\";\nimport { NumberFormatText } from \"../../../components/formatting/NumberFormatText\";\nimport { CenteredProgress } from \"../../../components/progress/ProgressHelpers\";\nimport {\n  LabelWithValue,\n  MiddleEllipsisText,\n} from \"../../../components/typography/TypographyHelpers\";\nimport { Debug } from \"../../../components/utils/Debug\";\nimport { WalletStatus } from \"../../../components/utils/types\";\nimport { MINT_GAS_UNIT_COST } from \"../../../constants/constants\";\nimport {\n  BridgeChain,\n  BridgeCurrency,\n  getChainConfig,\n  getCurrencyConfig,\n  toReleasedCurrency,\n} from \"../../../utils/assetConfigs\";\nimport { ActionButton, ActionButtonWrapper, ActionButtonWrapperGapped } from \"../../../components/buttons/Buttons\";\n\nimport { fromGwei } from \"../../../utils/converters\";\nimport { useFetchFees } from \"../../fees/feesHooks\";\nimport { getTransactionFees } from \"../../fees/feesUtils\";\n\nimport { mintTooltips } from \"../../mint/components/MintHelpers\";\nimport { useAddBsc, useSelectedChainWallet, useToken } from \"../../wallet/walletHooks\";\nimport { getFeeTooltips, TxType } from \"../transactionsUtils\";\n\ntype TransactionFeesProps = {\n  type: TxType;\n  currency: BridgeCurrency;\n  chain: BridgeChain;\n  address?: string;\n  hideButton?: boolean;\n};\n\nexport const TransactionFees: FunctionComponent<TransactionFeesProps> = ({\n  currency,\n  type,\n  chain,\n  address,\n  hideButton\n}) => {\n  const { status } = useSelectedChainWallet();\n  const currencyConfig = getCurrencyConfig(currency);\n  const targetChainConfig = getChainConfig(chain);\n\n\n  const { fees, pending } = useFetchFees(currency, type);\n  const { renVMFee, renVMFeeAmount, networkFee } = getTransactionFees({\n    fees,\n    type,\n  });\n \n  const {getToken} = useToken();\n\n\n  const sourceCurrency =\n    type === TxType.MINT ? currency : toReleasedCurrency(currency);\n  const sourceCurrencyConfig = getCurrencyConfig(sourceCurrency);\n  const sourceCurrencyChainConfig = getChainConfig(\n    sourceCurrencyConfig.sourceChain\n  );\n\n  const tooltips = getFeeTooltips({\n    mintFee: fees.mint / 10000,\n    releaseFee: fees.burn / 10000,\n    sourceCurrency,\n    chain,\n  });\n\n  const feeInGwei = 1337; // TODO: gas price to real gas price adjustment\n  const targetChainFeeNative = fromGwei(feeInGwei);\n  const targetChainCurrency = getCurrencyConfig(\n    targetChainConfig.nativeCurrency\n  );\n\n  if (status !== WalletStatus.CONNECTED) {\n    return null;\n  }\n\n  if (pending) {\n    return <CenteredProgress />;\n  }\n\n  return (\n    <>\n      <Debug it={{ currency, fees }} />\n      <LabelWithValue\n        label=\"Bridge Node Fee\"\n        labelTooltip={tooltips.renVmFee}\n        value={\n          <NumberFormatText\n            value={renVMFee}\n            spacedSuffix={\"%\"}\n            decimalScale={2}\n          />\n        }\n      />\n      <LabelWithValue\n        label={`${sourceCurrencyChainConfig.full} Miner Fee`}\n        labelTooltip={tooltips.sourceChainMinerFee}\n        value={\n          <NumberFormatText\n            value={networkFee}\n            spacedSuffix={sourceCurrencyChainConfig.short}\n          />\n        }\n      />\n      <LabelWithValue\n        label={`Esti. ${targetChainConfig.short} Fee`}\n        labelTooltip={tooltips.renCurrencyChainFee}\n        value={\"See Metamask\"}\n      />\n      {address && (\n        <LabelWithValue\n          label=\"Recipient Address\"\n          labelTooltip={mintTooltips.recipientAddress}\n          value={<MiddleEllipsisText hoverable>{address}</MiddleEllipsisText>}\n        />\n      )}\n      {!hideButton && (\n      <ActionButtonWrapperGapped>\n          <ActionButton\n            variant=\"contained\"\n            color=\"secondary\"\n            onClick={getToken}\n          >\n            Add DFI Token To Metamask\n          </ActionButton>\n        </ActionButtonWrapperGapped>\n        )}\n    </>\n  );\n};\n","import { useEffect } from 'react'\nimport { useDispatch, useSelector } from 'react-redux'\nimport { useLocation } from 'react-router-dom'\nimport { paths } from '../../pages/routes'\nimport {\n  BridgeChain,\n  EthTestnet,\n  getCurrencyConfig,\n  isMainnetNetwork,\n  toMintedCurrency,\n} from '../../utils/assetConfigs'\nimport { $mintCurrency } from '../mint/mintSlice'\nimport { $renNetwork } from '../network/networkSlice'\nimport { $releaseCurrency } from '../release/releaseSlice'\nimport { $chain } from '../wallet/walletSlice'\nimport { setPaperShaking } from './uiSlice'\n\nexport const useShakePaper = (shake: boolean, timeout = 600) => {\n  const dispatch = useDispatch();\n  useEffect(() => {\n    if (shake) {\n      dispatch(setPaperShaking(true));\n      setTimeout(() => {\n        dispatch(setPaperShaking(false));\n      }, timeout);\n    }\n    return () => {\n      dispatch(setPaperShaking(false));\n    };\n  }, [dispatch, shake, timeout]);\n};\n\nexport const useLocationFlow = () => {\n  const location = useLocation();\n  if (location.pathname.indexOf(paths.MINT) > -1) {\n    return \"mint\";\n  } else if (location.pathname.indexOf(paths.RELEASE) > -1) {\n    return \"burn\";\n  }\n  return null;\n};\n\nexport const useSubNetworkName = () => {\n  const flow = useLocationFlow();\n  const chain = useSelector($chain);\n  const renNetwork = useSelector($renNetwork);\n  const mintCurrency = useSelector($mintCurrency);\n  const releaseCurrency = useSelector($releaseCurrency);\n  if (\n    chain !== BridgeChain.ETHC ||\n    flow == null ||\n    isMainnetNetwork(renNetwork)\n  ) {\n    return \"\";\n  }\n  const renCurrency =\n    flow === \"mint\" ? toMintedCurrency(mintCurrency) : releaseCurrency;\n  const currencyConfig = getCurrencyConfig(renCurrency);\n  return currencyConfig.ethTestnet || EthTestnet.KOVAN;\n};\n","import { env } from '../constants/environmentVariables'\nimport fetch from 'node-fetch';\n\nexport class Blame {\n        fail_reason?: string\n}\n\nexport class DepositMessage {\n        status?: number\n        result?: string\n        extra?: string\n        blame?: Blame\n}\n\nexport class Vout {\n  txid?: string\n  n?: number\n  value?: string\n  value_satoshi?: number\n}\n\nexport class DepositEntry {\n        vout?: Vout\n        current_height?: number;\n        tx_height?: number;\n        confirmations?: number\n        good?: boolean\n        good_buffer?: boolean\n        destTxHash?: string\n}\n\nexport class Data {\n  data?: DepositEntry[]\n}\n\nexport class DepositsMessage {\n  status?: number\n  result?: Data\n  extra?: string\n  blame?: Blame\n}\nexport class Log {\n  From?: string\n  To?: string\n  Bridge?: string\n  Value?: number\n  Extradata?: number\n}\nexport class LogsMessage {\n  Confirmations?: number\n  Executed?: boolean\n  Log?: Log\n  DefiTx?: string\n}\n\nexport class Signature {\n  signed_msg?: string\n  r?: string\n  s?: string\n  recovery_id?: string\n}\n\nexport class SignatureMessage {\n  status?: number\n  signatures?: Signature[]\n  blame?: Blame\n}\n\nexport const buildUrl = (destChain: string) => {\n  if (destChain == \"ethereum\")\n    return env.ETHEREUM_BACKEND_ENDPOINT;\n  else return env.BSC_BACKEND_ENDPOINT;\n}\nexport const getDepositAddress = async (userAddress: string, destChain: string) => {\n  let url = buildUrl(destChain) + \"/deposit/\" + userAddress;\n  let settings = { method: \"Get\" };\n\n  return fetch(url, settings).then(res => res.json() as DepositMessage);\n};\n\nexport const getDeposits = async (userAddress: string, destChain: string) => {\n  let url = buildUrl(destChain) + \"/eligible/\" + userAddress;\n  let settings = { method: \"Get\" };\n  return fetch(url, settings).then(res => res.json() as DepositsMessage);\n};\n\nexport const getKeySignatures = async (userAddress: string, txid: string, n: number, destChain: string) => {\n  let url = buildUrl(destChain) + \"/mint/\" + userAddress + \"/\" + txid + \"/\" + n;\n  console.log(url)\n  let settings = { method: \"Get\" };\n  return fetch(url, settings).then(res => res.json() as SignatureMessage);\n};\n\nexport const getLogs = async (txid: string, destChain: string) => {\n  let url = buildUrl(destChain) + \"/logs/\" + txid;\n  let settings = { method: \"Get\" };\n  return fetch(url, settings).then(res => res.json() as LogsMessage);\n};","import {\n  Checkbox,\n  Divider,\n  FormControl,\n  FormControlLabel,\n  FormLabel,\n  IconButton,\n  Typography,\n} from \"@material-ui/core\";\nimport React, {\n  FunctionComponent,\n  useCallback,\n  useEffect,\n  useMemo,\n  useState,\n} from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { useHistory } from \"react-router-dom\";\nimport {\n  ActionButton,\n  ActionButtonWrapper,\n} from \"../../../components/buttons/Buttons\";\nimport { NumberFormatText } from \"../../../components/formatting/NumberFormatText\";\nimport { BackArrowIcon } from \"../../../components/icons/RenIcons\";\nimport { CheckboxWrapper } from \"../../../components/inputs/InputHelpers\";\nimport {\n  PaperActions,\n  PaperContent,\n  PaperHeader,\n  PaperNav,\n  PaperTitle,\n} from \"../../../components/layout/Paper\";\nimport { CenteredProgress } from \"../../../components/progress/ProgressHelpers\";\nimport { TooltipWithIcon } from \"../../../components/tooltips/TooltipWithIcon\";\nimport {\n  AssetInfo,\n  BigAssetAmount,\n  BigAssetAmountWrapper,\n  LabelWithValue,\n  Label,\n  MiddleEllipsisText,\n  SpacedDivider,\n} from \"../../../components/typography/TypographyHelpers\";\nimport { Debug } from \"../../../components/utils/Debug\";\nimport { WalletStatus } from \"../../../components/utils/types\";\nimport { paths } from \"../../../pages/routes\";\nimport { db } from \"../../../services/database/database\";\nimport {\n  getChainConfig,\n  getCurrencyConfig,\n  toMintedCurrency,\n} from \"../../../utils/assetConfigs\";\nimport { useFetchFees } from \"../../fees/feesHooks\";\nimport { getTransactionFees } from \"../../fees/feesUtils\";\n\nimport { $renNetwork } from \"../../network/networkSlice\";\nimport { TransactionFees } from \"../../transactions/components/TransactionFees\";\nimport {\n  $currentSessionCount,\n  addTransaction,\n  setCurrentTxId,\n} from \"../../transactions/transactionsSlice\";\nimport {\n  createTxQueryString,\n  LocationTxState,\n  TxConfigurationStepProps,\n  TxType,\n} from \"../../transactions/transactionsUtils\";\nimport { useShakePaper } from \"../../ui/uiHooks\";\nimport {\n  useAuthRequired,\n  useSelectedChainWallet,\n} from \"../../wallet/walletHooks\";\nimport { $wallet, setWalletPickerOpened } from \"../../wallet/walletSlice\";\nimport {\n  getMintDynamicTooltips,\n  mintTooltips,\n} from \"../components/MintHelpers\";\nimport { $mint } from \"../mintSlice\";\nimport {\n  createMintTransaction,\n  preValidateMintTransaction,\n} from \"../mintUtils\";\n\nimport {getDepositAddress} from \"../../../services/bridge\"\n\nexport const MintFeesStep: FunctionComponent<TxConfigurationStepProps> = ({\n  onPrev,\n}) => {\n  useAuthRequired(true);\n  const dispatch = useDispatch();\n  const history = useHistory();\n  const { status, walletConnected, account } = useSelectedChainWallet();\n  const [mintingInitialized, setMintingInitialized] = useState(false);\n  const { currency } = useSelector($mint);\n  const {\n    chain,\n    signatures: { signature },\n  } = useSelector($wallet);\n  const network = useSelector($renNetwork);\n  const currentSessionCount = useSelector($currentSessionCount);\n  const { fees, pending } = useFetchFees(currency, TxType.MINT);\n\n  \n  const lockCurrencyConfig = getCurrencyConfig(currency);\n  const { GreyIcon } = lockCurrencyConfig;\n\n  const destinationChainConfig = getChainConfig(chain);\n  const destinationChainNativeCurrencyConfig = getCurrencyConfig(\n    destinationChainConfig.nativeCurrency\n  );\n  const mintDynamicTooltips = getMintDynamicTooltips(\n    destinationChainConfig,\n    destinationChainNativeCurrencyConfig\n  );\n  const mintedCurrency = toMintedCurrency(currency);\n\n  const mintedCurrencyConfig = getCurrencyConfig(mintedCurrency);\n\n  const [ackChecked, setAckChecked] = useState(false);\n  const [touched, setTouched] = useState(false);\n  const showAckError = !ackChecked && touched;\n  const handleAckCheckboxChange = useCallback((event) => {\n    setTouched(true);\n    setAckChecked(event.target.checked);\n  }, []);\n  useShakePaper(showAckError);\n\n  const tx = useMemo(\n    () =>\n      createMintTransaction({\n        currency: currency,\n        destAddress: account,\n        mintedCurrency: toMintedCurrency(currency),\n        mintedCurrencyChain: chain,\n        userAddress: account,\n        network: network,\n        dayIndex: currentSessionCount,\n      }),\n    [currency, account, chain, network, currentSessionCount]\n  );\n  const txValid = preValidateMintTransaction(tx);\n  const canInitializeMinting = ackChecked && txValid;\n\n  const handleConfirm = useCallback(() => {\n    if (status === WalletStatus.CONNECTED) {\n      setTouched(true);\n      if (canInitializeMinting) {\n        setMintingInitialized(true);\n      } else {\n        setMintingInitialized(false);\n      }\n    } else {\n      setTouched(false);\n      setMintingInitialized(false);\n      dispatch(setWalletPickerOpened(true));\n    }\n  }, [dispatch, status, canInitializeMinting]);\n\n  const onMintTxCreated = useCallback(\n    async (tx) => {\n      // This is where we fetch gateway info from our Backend\n      const jsonObj = await getDepositAddress(tx.userAddress, tx.destination);\n      if(jsonObj.status == 1) {\n        tx.gatewayAddress = jsonObj.result;\n\n        dispatch(setCurrentTxId(tx.id));\n        dispatch(addTransaction(tx));\n        history.push({\n          pathname: paths.MINT_TRANSACTION,\n          search: \"?\" + createTxQueryString(tx),\n          state: {\n            txState: { newTx: true },\n          } as LocationTxState,\n        });\n      } else {\n        // Error popup TODOTODO\n      }\n    },\n    [dispatch, history, account, signature]\n  );\n\n  // there is a dependency loop, because we depend on the number\n  // of txes to determine the dayIndex, which updates when we create\n  // a new tx, leading to multiple txes being created for the same\n  // parameters.\n  // This flag prevents that\n  const [creatingMintTx, setCreatingMintTx] = useState(false);\n\n  useEffect(() => {\n    if (mintingInitialized && !creatingMintTx) {\n      setCreatingMintTx(true);\n      onMintTxCreated(tx).finally();\n    }\n  }, [onMintTxCreated, mintingInitialized, tx, creatingMintTx]);\n\n  return (\n    <>\n      <PaperHeader>\n        <PaperNav>\n          <IconButton onClick={onPrev}>\n            <BackArrowIcon />\n          </IconButton>\n        </PaperNav>\n        <PaperTitle>Fees & Confirm</PaperTitle>\n        <PaperActions />\n      </PaperHeader>\n      <PaperContent bottomPadding>\n        <Typography variant=\"body1\" gutterBottom>\n          Details\n        </Typography>\n        <Label\n          label=\"Sending\"\n          labelTooltip={mintTooltips.sending}\n          strvalue={currency + \" on \" + getCurrencyConfig(currency).full}/>\n        <LabelWithValue\n          label=\"To\"\n          labelTooltip={mintTooltips.to}\n          value={destinationChainConfig.full}\n        />\n        <LabelWithValue\n          label=\"Recipient Address\"\n          labelTooltip={mintTooltips.recipientAddress}\n          value={\n            <MiddleEllipsisText hoverable>{tx.userAddress}</MiddleEllipsisText>\n          }\n        />\n        <SpacedDivider />\n        <Typography variant=\"body1\" gutterBottom>\n          Fees\n        </Typography>\n        <TransactionFees\n          chain={chain}\n          currency={currency}\n          type={TxType.MINT}\n          hideButton={true}\n        />\n      </PaperContent>\n      <Divider />\n      <PaperContent darker topPadding bottomPadding>\n        <CheckboxWrapper>\n          <FormControl error={showAckError}>\n            <FormControlLabel\n              control={\n                <Checkbox\n                  checked={ackChecked}\n                  onChange={handleAckCheckboxChange}\n                  name=\"ack\"\n                  color=\"primary\"\n                />\n              }\n              label={\n                <FormLabel htmlFor=\"ack\" component={Typography}>\n                  <Typography\n                    variant=\"caption\"\n                    color={showAckError ? \"inherit\" : \"textPrimary\"}\n                  >\n                    I acknowledge this transaction requires{\" \"}\n                    {destinationChainNativeCurrencyConfig.short}{\" \"}\n                    <TooltipWithIcon title={mintDynamicTooltips.acknowledge} />\n                  </Typography>\n                </FormLabel>\n              }\n            />\n          </FormControl>\n        </CheckboxWrapper>\n        <ActionButtonWrapper>\n          <ActionButton\n            onClick={handleConfirm}\n            disabled={!ackChecked || mintingInitialized || !walletConnected}\n          >\n            {!walletConnected\n              ? \"Connect Wallet\"\n              : mintingInitialized\n              ? \"Confirming...\"\n              : \"Confirm\"}\n          </ActionButton>\n        </ActionButtonWrapper>\n      </PaperContent>\n      <Debug it={{ tx }} />\n    </>\n  );\n};\n","import { RenNetwork } from \"@renproject/interfaces\";\nimport { useCallback, useEffect } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { useDebounce } from \"react-use\";\nimport { mintChainClassMap } from \"../../services/rentx\";\nimport {\n  BridgeCurrency,\n  getChainConfig,\n  getCurrencyConfig,\n  RenChain,\n  toReleasedCurrency,\n} from \"../../utils/assetConfigs\";\nimport { $renNetwork } from \"../network/networkSlice\";\nimport { useSelectedChainWallet } from \"./walletHooks\";\nimport {\n  $chain,\n  addOrUpdateBalance,\n  AssetBalance,\n  resetBalances,\n} from \"./walletSlice\";\n\nexport const isSupportedByCurrentNetwork = (\n  currency: BridgeCurrency,\n  renNetwork: RenNetwork,\n  chain: RenChain\n) => {\n  const currencyConfig = getCurrencyConfig(currency);\n  if (currencyConfig.networkMappings) {\n    const chainMapping = currencyConfig.networkMappings[chain];\n    return (\n      chainMapping.testnet === renNetwork || chainMapping.mainnet === renNetwork\n    );\n  }\n  return true;\n};\n\nexport const useFetchBalances = (currencySymbols: Array<BridgeCurrency>) => {\n  const dispatch = useDispatch();\n  const bridgeChain = useSelector($chain);\n  const { walletConnected, provider, account } = useSelectedChainWallet();\n  const renNetwork = useSelector($renNetwork);\n  const bridgeChainConfig = getChainConfig(bridgeChain);\n  const Chain = (mintChainClassMap as any)[bridgeChainConfig.rentxName];\n\n  useEffect(() => {\n    if (!walletConnected) {\n      dispatch(resetBalances());\n    }\n  }, [dispatch, walletConnected]);\n\n  const fetchAssetBalance = useCallback(\n    (currency: BridgeCurrency) => {\n      if (\n        provider &&\n        account &&\n        walletConnected &&\n        isSupportedByCurrentNetwork(\n          currency,\n          renNetwork,\n          bridgeChainConfig.rentxName\n        )\n      ) {\n        const chain = Chain(provider, renNetwork);\n        return chain\n          .getBalance(currency, account)\n          .then((balance: any) => {\n            return balance.toNumber() / 100000000;\n          })\n          .catch(console.error);\n      } else {\n        return Promise.resolve(null);\n      }\n    },\n    [\n      Chain,\n      account,\n      renNetwork,\n      provider,\n      walletConnected,\n      bridgeChainConfig.rentxName,\n    ]\n  );\n\n  useDebounce(\n    () => {\n      if (!walletConnected) {\n        return;\n      }\n      for (const currencySymbol of currencySymbols) {\n        const sourceCurrencySymbol = toReleasedCurrency(currencySymbol);\n        fetchAssetBalance(sourceCurrencySymbol).then((balance: any) => {\n          if (balance === null) {\n            return;\n          }\n          dispatch(\n            addOrUpdateBalance({\n              symbol: currencySymbol,\n              balance,\n            })\n          );\n        });\n      }\n    },\n    1000,\n    [dispatch, fetchAssetBalance, walletConnected]\n  );\n};\n\nexport const getAssetBalance = (\n  balances: Array<AssetBalance>,\n  symbol: BridgeCurrency\n) => {\n  const balanceEntry = balances.find((entry) => entry.symbol === symbol);\n  return balanceEntry?.balance;\n};\n","import {\n  Box,\n  ListSubheader,\n  MenuItem,\n  Select,\n  SelectProps,\n  styled,\n  Typography,\n} from \"@material-ui/core\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport React, { FunctionComponent, useMemo } from \"react\";\nimport { AssetBalance } from \"../../features/wallet/walletSlice\";\nimport { getAssetBalance } from \"../../features/wallet/walletUtils\";\nimport {\n  BridgeChain,\n  BridgeChainConfig,\n  BridgeCurrency,\n  chainsConfig,\n  currenciesConfig,\n  CurrencyConfig,\n} from \"../../utils/assetConfigs\";\nimport { NumberFormatText } from \"../formatting/NumberFormatText\";\nimport { EmptyCircleIcon } from \"../icons/RenIcons\";\n\nconst getOptions = (mode: AssetDropdownMode) => {\n  const options =\n    mode === \"chain\"\n      ? Object.values(chainsConfig)\n      : Object.values(currenciesConfig);\n  return options as Array<BridgeChainConfig | CurrencyConfig>;\n};\n\nconst getOptionBySymbol = (symbol: string, mode: AssetDropdownMode) =>\n  getOptions(mode).find((option) => option.symbol === symbol);\n\nconst createAvailabilityFilter = (available: Array<string> | undefined) => (\n  option: BridgeChainConfig | CurrencyConfig\n) => {\n  if (!available) {\n    return true;\n  }\n  return available.includes(option.symbol);\n};\n\nconst iconStyles = {\n  width: 32,\n  height: 32,\n};\n\nconst useCondensedSelectStyles = makeStyles(() => ({\n  select: {\n    paddingTop: 4,\n    paddingBottom: 4,\n  },\n}));\n\nconst useAssetDropdownStyles = makeStyles((theme) => ({\n  root: {\n    width: \"100%\",\n    borderRadius: theme.shape.borderRadius,\n    border: `1px solid ${theme.customColors.grayLight}`,\n  },\n  inputRoot: {\n    width: \"100%\",\n  },\n  supplementalText: {\n    fontSize: 12,\n  },\n  iconWrapper: {\n    display: \"inline-flex\",\n    justifyContent: \"center\",\n    alignItems: \"center\",\n  },\n  listIcon: iconStyles,\n  assetName: {\n    fontSize: 13,\n  },\n  assetFullName: {\n    fontSize: 11,\n  },\n  balance: {\n    fontSize: 12,\n  },\n  listSubheader: {\n    pointerEvents: \"none\",\n    fontSize: 10,\n    lineHeight: 1,\n  },\n  listSubheaderLabel: {\n    fontSize: 10,\n  },\n}));\n\ntype AssetDropdownMode = \"send\" | \"receive\" | \"chain\"; // TODO: remove recaive\n\ntype AssetDropdownProps = SelectProps & {\n  mode: AssetDropdownMode;\n  available?: Array<BridgeCurrency | BridgeChain>;\n  balances?: Array<AssetBalance>;\n  condensed?: boolean;\n  label?: string;\n};\n\nconst getAssetData = (\n  selected: BridgeChainConfig | CurrencyConfig | undefined\n) => {\n  let full = \"Select\";\n  let short = \"Select\";\n  let Icon = EmptyCircleIcon;\n  if (selected) {\n    full = selected.full;\n    short = selected.short;\n    Icon = selected.MainIcon;\n  }\n  return {\n    full,\n    short,\n    Icon,\n  };\n};\n\nexport const AssetDropdown: FunctionComponent<AssetDropdownProps> = ({\n  mode,\n  available,\n  condensed = false,\n  label,\n  balances,\n  ...rest\n}) => {\n  const styles = useAssetDropdownStyles();\n  const condensedSelectClasses = useCondensedSelectStyles();\n  const availabilityFilter = useMemo(\n    () => createAvailabilityFilter(available),\n    [available]\n  );\n  const valueRenderer = useMemo(\n    () => (value: any) => {\n      const selected = getOptionBySymbol(value, mode);\n      const { Icon, full, short } = getAssetData(selected);\n      return (\n        <Box display=\"flex\" alignItems=\"center\" width=\"100%\">\n          {!condensed && (\n            <Box width=\"37%\">\n              <Typography variant=\"body2\" className={styles.supplementalText}>\n                {label}\n              </Typography>\n            </Box>\n          )}\n          <Box width=\"45px\" display=\"flex\" alignItems=\"center\">\n            <Icon className={styles.listIcon} />\n          </Box>\n          <Box flexGrow={1}>\n            <Typography variant=\"body2\">\n              {selected && mode === \"chain\" ? full : full}\n            </Typography>\n          </Box>\n        </Box>\n      );\n    },\n    [mode, styles, label, condensed]\n  );\n  return (\n    <div>\n      <Select\n        variant=\"outlined\"\n        className={condensed ? undefined : styles.inputRoot}\n        classes={condensed ? condensedSelectClasses : undefined}\n        renderValue={valueRenderer}\n        displayEmpty\n        MenuProps={{\n          anchorOrigin: {\n            vertical: \"bottom\",\n            horizontal: \"left\",\n          },\n          getContentAnchorEl: null,\n        }}\n        {...rest}\n      >\n        <ListSubheader className={styles.listSubheader}>\n          <Box display=\"flex\" alignItems=\"center\" width=\"100%\">\n            <Box width=\"45px\" />\n            <Box flexGrow={1}>\n              <Typography\n                variant=\"overline\"\n                className={styles.listSubheaderLabel}\n              >\n                {mode === \"chain\" ? \"Blockchain\" : \"Asset\"}\n              </Typography>\n            </Box>\n            {balances && balances.length > 0 && (\n              <Box flexGrow={1} textAlign=\"right\">\n                <Typography\n                  variant=\"overline\"\n                  className={styles.listSubheaderLabel}\n                >\n                  Your Balance\n                </Typography>\n              </Box>\n            )}\n          </Box>\n        </ListSubheader>\n        {getOptions(mode)\n          .filter(availabilityFilter)\n          .map(({ symbol, MainIcon, GreyIcon, full, short }) => {\n            return (\n              <MenuItem key={symbol} value={symbol}>\n                <Box display=\"flex\" alignItems=\"center\" width=\"100%\">\n                  <Box width=\"45px\" className={styles.iconWrapper}>\n                    <MainIcon className={styles.listIcon} />\n                  </Box>\n                  <Box flexGrow={1}>\n                    <Typography variant=\"body1\" className={styles.assetName}>\n                      {mode === \"chain\" ? full : short}\n                    </Typography>\n                    {mode !== \"chain\" && (\n                      <Typography\n                        color=\"textSecondary\"\n                        className={styles.assetFullName}\n                      >\n                        {full}\n                      </Typography>\n                    )}\n                  </Box>\n                  {balances && (\n                    <Box\n                      flexGrow={1}\n                      textAlign=\"right\"\n                      className={styles.balance}\n                    >\n                      <NumberFormatText\n                        value={getAssetBalance(\n                          balances,\n                          symbol as BridgeCurrency\n                        )}\n                      />\n                    </Box>\n                  )}\n                </Box>\n              </MenuItem>\n            );\n          })}\n      </Select>\n    </div>\n  );\n};\n\nexport const AssetDropdownWrapper = styled(\"div\")({\n  marginTop: 10,\n});\n","import { Divider } from '@material-ui/core'\nimport React, { FunctionComponent, useCallback } from 'react'\nimport { useDispatch, useSelector } from 'react-redux'\nimport {\n  ActionButton,\n  ActionButtonWrapper,\n} from '../../../components/buttons/Buttons'\nimport {\n  AssetDropdown,\n  AssetDropdownWrapper,\n} from '../../../components/dropdowns/AssetDropdown'\nimport { NumberFormatText } from '../../../components/formatting/NumberFormatText'\nimport {\n  BigCurrencyInput,\n  BigCurrencyInputWrapper,\n} from '../../../components/inputs/BigCurrencyInput'\nimport { PaperContent } from '../../../components/layout/Paper'\nimport { CenteredProgress } from '../../../components/progress/ProgressHelpers'\nimport { TooltipWithIcon } from '../../../components/tooltips/TooltipWithIcon'\nimport { AssetInfo } from '../../../components/typography/TypographyHelpers'\nimport {\n  getCurrencyConfig,\n  supportedLockCurrencies,\n  supportedMintDestinationChains,\n  toMintedCurrency,\n} from '../../../utils/assetConfigs'\nimport { useFetchFees } from '../../fees/feesHooks'\nimport { getTransactionFees } from '../../fees/feesUtils'\nimport { useRenNetworkTracker } from '../../transactions/transactionsHooks'\nimport {\n  isMinimalAmount,\n  TxConfigurationStepProps,\n  TxType,\n} from '../../transactions/transactionsUtils'\nimport { useSelectedChainWallet } from '../../wallet/walletHooks'\nimport {\n  $wallet,\n  setChain,\n  setWalletPickerOpened,\n} from '../../wallet/walletSlice'\nimport {\n  $mint,\n  setMintCurrency,\n} from '../mintSlice'\n\nexport const MintInitialStep: FunctionComponent<TxConfigurationStepProps> = ({\n  onNext,\n}) => {\n  const dispatch = useDispatch();\n\n  const { currency } = useSelector($mint);\n  const { chain } = useSelector($wallet);\n  const { walletConnected } = useSelectedChainWallet();\n \n\n  const handleCurrencyChange = useCallback(\n    (event) => {\n      dispatch(setMintCurrency(event.target.value));\n    },\n    [dispatch]\n  );\n  const handleChainChange = useCallback(\n    (event) => {\n      dispatch(setChain(event.target.value));\n    },\n    [dispatch]\n  );\n\n  const renCurrency = toMintedCurrency(currency);\n  useRenNetworkTracker(renCurrency);\n\n  const enabled = true;\n\n  const handleNextStep = useCallback(() => {\n    if (!walletConnected) {\n      dispatch(setWalletPickerOpened(true));\n    } else {\n      if (onNext && enabled) {\n        onNext();\n      }\n    }\n  }, [dispatch, onNext, walletConnected, enabled]);\n\n  const mintedCurrencySymbol = toMintedCurrency(currency);\n  const mintedCurrencyConfig = getCurrencyConfig(mintedCurrencySymbol);\n  const { GreyIcon } = mintedCurrencyConfig;\n\n  return (\n    <>\n      <PaperContent bottomPadding>\n        <AssetDropdownWrapper>\n          <AssetDropdown\n            label=\"Send\"\n            mode=\"send\"\n            available={supportedLockCurrencies}\n            value={currency}\n            onChange={handleCurrencyChange}\n          />\n        </AssetDropdownWrapper>\n        <AssetDropdownWrapper>\n          <AssetDropdown\n            label=\"Destination\"\n            mode=\"chain\"\n            available={supportedMintDestinationChains}\n            value={chain}\n            onChange={handleChainChange}\n          />\n        </AssetDropdownWrapper>\n      </PaperContent>\n      <Divider />\n      <PaperContent darker topPadding bottomPadding>         \n        <ActionButtonWrapper>\n          <ActionButton\n            onClick={handleNextStep}\n            disabled={walletConnected ? !enabled : false}\n          >\n            {walletConnected ? \"Next\" : \"Connect Wallet\"}\n          </ActionButton>\n        </ActionButtonWrapper>\n      </PaperContent>\n    </>\n  );\n};\n","import {\n  Button,\n  ButtonProps,\n  Theme,\n  Typography,\n  useTheme,\n} from \"@material-ui/core\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport AccountBalanceWalletIcon from \"@material-ui/icons/AccountBalanceWallet\";\nimport { WalletPickerProps } from \"@renproject/multiwallet-ui\";\nimport classNames from \"classnames\";\nimport React, { FunctionComponent, useCallback } from \"react\";\nimport { useDispatch } from \"react-redux\";\nimport { useTimeout } from \"react-use\";\nimport { links } from \"../../constants/constants\";\nimport { useSubNetworkName } from \"../../features/ui/uiHooks\";\nimport { setWalletPickerOpened } from \"../../features/wallet/walletSlice\";\nimport { createPulseAnimation } from \"../../theme/animationUtils\";\nimport { defaultShadow } from \"../../theme/other\";\nimport { useAddBsc } from \"../../features/wallet/walletHooks\"\nimport {\n  BridgeChainConfig,\n  BridgeWallet,\n  BridgeWalletConfig,\n  getChainConfigByRentxName,\n  getNetworkConfigByRentxName,\n  getWalletConfig,\n  getWalletConfigByRentxName,\n} from \"../../utils/assetConfigs\";\nimport { trimAddress } from \"../../utils/strings\";\nimport { ActionButton, ActionButtonWrapper, ActionButtonWrapperGapped } from \"../buttons/Buttons\";\nimport { WalletIcon } from \"../icons/RenIcons\";\nimport { PaperContent, SpacedPaperContent } from \"../layout/Paper\";\nimport { Link } from \"../links/Links\";\nimport { BridgeModalTitle } from \"../modals/BridgeModal\";\nimport {\n  ProgressWithContent,\n  ProgressWrapper,\n} from \"../progress/ProgressHelpers\";\nimport { Debug, DebugComponentProps } from \"../utils/Debug\";\nimport { WalletConnectionStatusType, WalletStatus } from \"../utils/types\";\n\nexport const useWalletPickerStyles = makeStyles((theme) => ({\n  root: {\n    width: 400,\n  },\n  body: {\n    padding: 24,\n  },\n  header: {\n    display: \"flex\",\n    justifyContent: \"space-between\",\n    alignItems: \"stretch\",\n    borderBottom: `1px solid ${theme.palette.divider}`,\n    padding: `16px 16px 14px`,\n  },\n  headerTitle: {\n    flexGrow: 2,\n    paddingLeft: 16,\n    textAlign: \"center\",\n    lineHeight: 2,\n  },\n  headerCloseIcon: {\n    fontSize: 16,\n  },\n  button: {\n    border: `1px solid ${theme.palette.divider}`,\n  },\n  chainTitle: {\n    textTransform: \"capitalize\",\n    fontSize: 14,\n  },\n}));\n\nconst useWalletEntryButtonStyles = makeStyles({\n  root: {\n    marginTop: 20,\n    fontSize: 16,\n    padding: \"11px 20px 11px 20px\",\n  },\n  label: {\n    display: \"flex\",\n    justifyContent: \"space-between\",\n    alignContent: \"center\",\n  },\n  icon: {\n    fontSize: 36,\n    display: \"inline-flex\",\n  },\n});\n\nexport const WalletEntryButton: WalletPickerProps<\n  any,\n  any\n>[\"WalletEntryButton\"] = ({ onClick, name, logo }) => {\n  const { icon: iconClassName, ...classes } = useWalletEntryButtonStyles();\n  const walletConfig = getWalletConfigByRentxName(name);\n  const { MainIcon } = walletConfig;\n  return (\n    <Button\n      classes={classes}\n      variant=\"outlined\"\n      size=\"large\"\n      fullWidth\n      onClick={onClick}\n    >\n      <span>{walletConfig.full}</span>{\" \"}\n      <span className={iconClassName}>\n        <MainIcon fontSize=\"inherit\" />\n      </span>\n    </Button>\n  );\n};\n\nexport const WalletChainLabel: WalletPickerProps<\n  any,\n  any\n>[\"WalletChainLabel\"] = ({ chain }) => {\n  const chainConfig = getChainConfigByRentxName(chain);\n  return <span>{chainConfig.full}</span>;\n};\n\nconst getLabels = (\n  chainConfig: BridgeChainConfig,\n  walletConfig: BridgeWalletConfig\n) => {\n  return {\n    initialTitle: \"Connecting\",\n    actionTitle: `${walletConfig.short} action required`,\n    initialMessage: `Connecting to ${chainConfig.full}`,\n    actionMessage: `When prompted, connect securely via the ${walletConfig.full} browser extension.`,\n  };\n};\n\nexport const WalletConnectingInfo: WalletPickerProps<\n  any,\n  any\n>[\"ConnectingInfo\"] = ({ chain, onClose }) => {\n  const theme = useTheme();\n  const chainConfig = getChainConfigByRentxName(chain);\n\n  // TODO: There should be better mapping.\n  const walletSymbol =\n    chain === \"ethereum\" ? BridgeWallet.METAMASKW : BridgeWallet.BINANCESMARTW;\n  const walletConfig = getWalletConfig(walletSymbol);\n\n  const labels = getLabels(chainConfig, walletConfig);\n  const { MainIcon } = walletConfig;\n  const [isPassed] = useTimeout(3000);\n  const passed = isPassed();\n  return (\n    <>\n      <Debug it={{ chainConfig }} />\n      <BridgeModalTitle\n        title={passed ? labels.actionTitle : labels.initialTitle}\n        onClose={onClose}\n      />\n      <PaperContent bottomPadding>\n        <ProgressWrapper>\n          <ProgressWithContent\n            size={128}\n            color={theme.customColors.skyBlueLight}\n            fontSize=\"big\"\n            processing\n          >\n            <MainIcon fontSize=\"inherit\" />\n          </ProgressWithContent>\n        </ProgressWrapper>\n        <Typography variant=\"h6\" align=\"center\">\n          {passed ? labels.actionMessage : labels.initialMessage}\n        </Typography>\n      </PaperContent>\n    </>\n  );\n};\n\nconst useWalletConnectionProgressStyles = makeStyles((theme) => ({\n  iconWrapper: {\n    padding: 13,\n    backgroundColor: theme.palette.divider,\n    display: \"flex\",\n    justifyContent: \"center\",\n    alignItems: \"center\",\n    fontSize: 44,\n  },\n}));\n\nexport const WalletConnectionProgress: FunctionComponent = () => {\n  const theme = useTheme();\n  const styles = useWalletConnectionProgressStyles();\n  return (\n    <ProgressWithContent color={theme.customColors.redLighter} size={128}>\n      <div className={styles.iconWrapper}>\n        <WalletIcon fontSize=\"inherit\" color=\"secondary\" />\n      </div>\n    </ProgressWithContent>\n  );\n};\n\nexport const WalletWrongNetworkInfo: WalletPickerProps<\n  any,\n  any\n>[\"WrongNetworkInfo\"] = (props) => {\n  const { chain, targetNetwork, onClose } = props;\n  const theme = useTheme();\n  const subNetworkName = useSubNetworkName();\n  const chainName = getChainConfigByRentxName(chain).full;\n  const networkName = getNetworkConfigByRentxName(targetNetwork).full;\n  const {updateBsc} = useAddBsc(\"Binance Chain\");\n  const {updateBsc : updateEth} = useAddBsc(\"Ethereum\");\n  const AddBscMetamask = async() => {\n    if (chainName==\"Ethereum\") {\n      const ret = await updateEth()\n      console.log(ret)\n    }else{\n      const ret = await updateBsc()\n      console.log(ret)\n    }\n    return true\n  }\n  return (\n    <>\n      <DebugComponentProps {...props} />\n      <BridgeModalTitle title=\"Wrong Network\" onClose={onClose} />\n      <PaperContent bottomPadding>\n        <ProgressWrapper>\n          <ProgressWithContent\n            size={128}\n            color={theme.customColors.redLighter}\n            fontSize=\"big\"\n          >\n            <AccountBalanceWalletIcon fontSize=\"inherit\" color=\"secondary\" />\n          </ProgressWithContent>\n        </ProgressWrapper>\n        <Typography variant=\"h5\" align=\"center\" gutterBottom>\n          Switch to {chainName} {networkName}\n          {subNetworkName && <span> ({subNetworkName})</span>}\n        </Typography>\n        <Typography variant=\"body1\" align=\"center\" color=\"textSecondary\">\n          Defichain-Bridge requires you to connect to the {chainName} {networkName}{\" \"}\n          {subNetworkName}\n        </Typography>\n        <ActionButtonWrapperGapped>\n          <ActionButton onClick={AddBscMetamask}>\n            Switch Metamask to {chainName}\n          </ActionButton>\n        </ActionButtonWrapperGapped>\n      </PaperContent>\n    </>\n  );\n};\n\nconst createIndicatorClass = (className: string, color: string) => {\n  const { pulsingStyles, pulsingKeyframes } = createPulseAnimation(\n    color,\n    3,\n    className\n  );\n\n  return {\n    ...pulsingKeyframes,\n    [className]: {\n      ...pulsingStyles,\n      backgroundColor: color,\n    },\n  };\n};\n\ntype WalletConnectionIndicatorStyles = Record<\n  \"root\" | \"connected\" | \"disconnected\" | \"wrongNetwork\" | \"connecting\",\n  string\n>;\nconst useWalletConnectionIndicatorStyles = makeStyles((theme) => {\n  return {\n    root: {\n      width: 8,\n      height: 8,\n      borderRadius: 4,\n      backgroundColor: theme.palette.divider,\n    },\n    ...createIndicatorClass(\"connected\", theme.palette.success.main),\n    ...createIndicatorClass(\"disconnected\", theme.palette.error.main),\n    ...createIndicatorClass(\"connecting\", theme.palette.info.main),\n    ...createIndicatorClass(\"wrongNetwork\", theme.palette.warning.main),\n  };\n});\n\ntype WalletConnectionIndicatorProps = {\n  status?: WalletConnectionStatusType;\n  className?: string; // TODO: find a better way\n};\n\nexport const WalletConnectionIndicator: FunctionComponent<WalletConnectionIndicatorProps> = ({\n  status,\n  className: classNameProp,\n}) => {\n  const styles = useWalletConnectionIndicatorStyles() as WalletConnectionIndicatorStyles;\n  const className = classNames(styles.root, classNameProp, {\n    [styles.connected]: status === WalletStatus.CONNECTED,\n    [styles.wrongNetwork]: status === WalletStatus.WRONG_NETWORK,\n    [styles.disconnected]: status === WalletStatus.DISCONNECTED,\n    [styles.connecting]: status === WalletStatus.CONNECTING,\n  });\n  return <div className={className} />;\n};\n\nconst getWalletConnectionLabel = (status: WalletConnectionStatusType) => {\n  switch (status) {\n    case \"disconnected\":\n      return \"Connect a Wallet\";\n    case \"connecting\":\n      return \"Connecting...\";\n    case \"connected\":\n      return \"Connected\";\n    case \"wrong_network\":\n      return \"Wrong Network!\";\n  }\n};\n\nconst useWalletConnectionStatusButtonStyles = makeStyles<Theme>((theme) => ({\n  root: {\n    backgroundColor: theme.palette.common.white,\n    borderColor: theme.palette.divider,\n    boxShadow: defaultShadow,\n    \"&:hover\": {\n      borderColor: theme.palette.divider,\n      backgroundColor: theme.palette.divider,\n    },\n  },\n  hoisted: {\n    zIndex: theme.zIndex.tooltip,\n  },\n  indicator: {\n    marginRight: 10,\n  },\n  indicatorMobile: {\n    marginLeft: 16,\n    marginRight: 30,\n  },\n  account: { marginLeft: 20 },\n}));\n\ntype WalletConnectionStatusButtonProps = ButtonProps & {\n  status: WalletConnectionStatusType;\n  wallet: BridgeWallet;\n  hoisted?: boolean;\n  account?: string;\n  mobile?: boolean;\n};\n\nexport const WalletConnectionStatusButton: FunctionComponent<WalletConnectionStatusButtonProps> = ({\n  status,\n  account,\n  wallet,\n  hoisted,\n  className,\n  mobile,\n  ...rest\n}) => {\n  const {\n    indicator: indicatorClassName,\n    indicatorMobile: indicatorMobileClassName,\n    account: accountClassName,\n    hoisted: hoistedClassName,\n    ...classes\n  } = useWalletConnectionStatusButtonStyles();\n\n  const label =\n    status === WalletStatus.CONNECTED\n      ? getWalletConfig(wallet).short\n      : getWalletConnectionLabel(status);\n  const trimmedAddress = trimAddress(account);\n  const resolvedClassName = classNames(className, {\n    [hoistedClassName]: hoisted,\n  });\n  const buttonProps: any = mobile\n    ? {}\n    : {\n        variant: \"outlined\",\n        color: \"secondary\",\n        classes,\n      };\n  return (\n    <Button className={resolvedClassName} {...buttonProps} {...rest}>\n      <WalletConnectionIndicator\n        status={status}\n        className={mobile ? indicatorMobileClassName : indicatorClassName}\n      />\n      <span>{label}</span>\n      {trimmedAddress && (\n        <span className={accountClassName}>{trimmedAddress}</span>\n      )}\n    </Button>\n  );\n};\n\nconst useResetWalletPicker = (onClose: () => void) => {\n  //TODO: not very elegant solution, Dialog should be extended with onBack/onPrev action\n  const dispatch = useDispatch();\n  const handleBackToWalletPicker = useCallback(() => {\n    onClose();\n    setTimeout(() => {\n      dispatch(setWalletPickerOpened(true));\n    }, 1);\n  }, [dispatch, onClose]);\n  return { handleBackToWalletPicker };\n};\n\n\nexport const BinanceConnectorInfo: WalletPickerProps<\n  any,\n  any\n>[\"DefaultInfo\"] = ({ acknowledge, onClose }) => {\n  const { handleBackToWalletPicker } = useResetWalletPicker(onClose);\n  return (\n    <>\n      <BridgeModalTitle\n        title=\" \"\n        onClose={onClose}\n        onPrev={handleBackToWalletPicker}\n      />\n      <SpacedPaperContent topPadding bottomPadding>\n        <Typography variant=\"h5\" align=\"center\" gutterBottom>\n          Binance Chain Wallet\n        </Typography>\n        <Typography\n          variant=\"body1\"\n          align=\"center\"\n          color=\"textSecondary\"\n          gutterBottom\n        >\n          Some users experience issues with Binance Smart Wallet. We suggest you\n          connect to BSC via MetaMask instead. If you have already started a\n          transaction with Binance Smart Wallet, please use the support form{\" \"}\n          <Link href={links.BUGS_LOG} external>\n            here\n          </Link>{\" \"}\n          if you are experiencing issues.\n        </Typography>\n      </SpacedPaperContent>\n      <PaperContent bottomPadding>\n        <ActionButtonWrapper>\n          <Button\n            variant=\"text\"\n            color=\"primary\"\n            onClick={handleBackToWalletPicker}\n          >\n            Use another wallet\n          </Button>\n        </ActionButtonWrapper>\n        <ActionButtonWrapper>\n          <ActionButton onClick={acknowledge}>\n            Continue with Binance Smart Wallet\n          </ActionButton>\n        </ActionButtonWrapper>\n      </PaperContent>\n    </>\n  );\n};\n","import { useCallback, useState } from \"react\";\n\nexport const useBrowserNotifications = (onEnabled = () => {}) => {\n  let enabled = false;\n  if ((window as any).Notification) {\n    enabled = Notification.permission === \"granted\";\n  }\n\n  const handleEnable = useCallback(() => {\n    if (enabled) {\n      if (onEnabled) {\n        onEnabled();\n      }\n    } else {\n      Notification.requestPermission().then(() => {\n        if (onEnabled) {\n          onEnabled();\n        }\n      });\n    }\n  }, [enabled, onEnabled]);\n\n  const showBrowserNotification = useCallback((message) => {\n    if ((window as any).Notification) {\n      const notification = new Notification(message);\n      notification.onclick = () => {\n        // window.open(location.href); // TODO: TBD: redirect here?\n      };\n    }\n  }, []);\n\n  return {\n    enabled,\n    handleEnable,\n    Notification,\n    showBrowserNotification,\n  };\n};\n\nexport const useBrowserNotificationsConfirmation = () => {\n  const { enabled } = useBrowserNotifications();\n  const [modalOpened, setModalOpened] = useState(false);\n  const [tooltipOpened, setTooltipOpened] = useState(false);\n\n  const handleTooltipClose = useCallback(() => {\n    setTooltipOpened(false);\n  }, []);\n\n  const handleModalOpen = useCallback(() => {\n    if (!enabled) {\n      setModalOpened(true);\n    } else {\n      setTooltipOpened(!tooltipOpened);\n    }\n  }, [enabled, tooltipOpened]);\n\n  const handleModalClose = useCallback(() => {\n    setModalOpened(false);\n  }, []);\n\n  return {\n    modalOpened,\n    handleModalOpen,\n    handleModalClose,\n    tooltipOpened,\n    handleTooltipClose,\n  };\n};\n","import { Box, Grow, Typography, useTheme } from \"@material-ui/core\";\nimport { GatewaySession } from \"@renproject/ren-tx\";\nimport QRCode from \"qrcode.react\";\nimport React, {\n  FunctionComponent,\n  useCallback,\n  useEffect,\n  useState,\n} from \"react\";\nimport { useDispatch } from \"react-redux\";\nimport { useHistory } from \"react-router-dom\";\nimport { useEffectOnce } from \"react-use\";\nimport {\n  ActionButton,\n  ActionButtonWrapper,\n  BigQrCode,\n  CopyContentButton,\n  QrCodeIconButton,\n  TransactionDetailsButton,\n} from \"../../../components/buttons/Buttons\";\nimport { NumberFormatText } from \"../../../components/formatting/NumberFormatText\";\nimport {\n  BigTopWrapper,\n  CenteringSpacedBox,\n  MediumWrapper,\n  SmallWrapper,\n} from \"../../../components/layout/LayoutHelpers\";\nimport { Link } from \"../../../components/links/Links\";\nimport {\n  BigDoneIcon,\n  ProgressWithContent,\n  ProgressWrapper,\n  TransactionStatusInfo,\n} from \"../../../components/progress/ProgressHelpers\";\nimport { BigAssetAmount } from \"../../../components/typography/TypographyHelpers\";\nimport { paths } from \"../../../pages/routes\";\nimport { useNotifications } from \"../../../providers/Notifications\";\nimport {\n  usePaperTitle,\n  useSetActionRequired,\n  useSetPaperTitle,\n} from \"../../../providers/TitleProviders\";\nimport { DepositEntry } from \"../../../services/bridge\";\nimport { orangeLight } from \"../../../theme/colors\";\nimport { getChainConfigByRentxName } from \"../../../utils/assetConfigs\";\nimport { trimAddress } from \"../../../utils/strings\";\nimport { useFetchFees } from \"../../fees/feesHooks\";\nimport { getTransactionFees } from \"../../fees/feesUtils\";\nimport { useBrowserNotifications } from \"../../notifications/notificationsUtils\";\nimport {\n  HMSCountdown,\n  ProcessingTimeWrapper,\n  SubmitErrorDialog,\n} from \"../../transactions/components/TransactionsHelpers\";\nimport { getPaymentLink, TxType } from \"../../transactions/transactionsUtils\";\nimport { resetMint } from \"../mintSlice\";\nimport { getLockAndMintParams, getRemainingGatewayTime } from \"../mintUtils\";\nimport { AddressValidityMessage } from \"./MintHelpers\";\n\nexport type MintDepositToProps = {\n  tx: GatewaySession;\n};\n\nexport const MintDepositToStatus: FunctionComponent<MintDepositToProps> = ({\n  tx,\n}) => {\n  const {\n    lockCurrencyConfig,\n    lockChainConfig,\n    suggestedAmount,\n    mintAddressLink,\n  } = getLockAndMintParams(tx);\n  const { color } = lockCurrencyConfig;\n  const { MainIcon } = lockChainConfig;\n\n  useSetPaperTitle(`Send ${lockChainConfig.short}`);\n\n  return (\n    <>\n      <ProgressWrapper>\n        <ProgressWithContent color={color || orangeLight} size={64}>\n          <MainIcon fontSize=\"inherit\" color=\"inherit\" />\n        </ProgressWithContent>\n      </ProgressWrapper>\n      <MediumWrapper>\n        <BigAssetAmount\n          value={\n            <span>\n              Send {lockCurrencyConfig.short} to\n            </span>\n          }\n        />\n      </MediumWrapper>\n      {tx.gatewayAddress && (\n        <>\n            <CenteringSpacedBox>\n              <Grow in={true}>\n                <BigQrCode>\n                  <QRCode\n                    value={getPaymentLink(\n                      lockChainConfig.symbol,\n                      tx.gatewayAddress,\n                      suggestedAmount\n                    )}\n                  />\n                </BigQrCode>\n              </Grow>\n            </CenteringSpacedBox>\n          <CopyContentButton content={tx.gatewayAddress} />\n        </>\n      )}\n    </>\n  );\n};\n\ntype MintDepositConfirmationStatusProps = {\n  tx: GatewaySession;\n  depositHash: string;\n};\n\nexport const MintDepositConfirmationStatus: FunctionComponent<MintDepositConfirmationStatusProps> = ({\n  tx,\n  depositHash,\n}) => {\n  const [, setTitle] = usePaperTitle();\n  let {\n    lockCurrencyConfig,\n    lockChainConfig,\n    lockTxHash,\n    lockTxLink,\n    lockTxAmount,\n    lockConfirmations,\n    lockTargetConfirmations,\n    lockProcessingTime,\n  } = getLockAndMintParams(tx, depositHash);\n\n\n  const dep: DepositEntry = tx.transactions[depositHash]\n  lockTxHash = depositHash\n  lockTxLink = \"https://defiscan.live/transactions/\" + depositHash.split(\":\")[0]\n  lockConfirmations = dep?.confirmations || 0\n\n  const { MainIcon } = lockChainConfig;\n  lockTargetConfirmations = lockChainConfig?.targetConfirmations || 0\n\n  const confirmed = lockConfirmations >= lockTargetConfirmations;\n  useEffect(() => {\n    setTitle(confirmed ? \"Confirmed\" : \"Confirming\");\n  }, [setTitle, confirmed]);\n\n  return (\n    <>\n      <ProgressWrapper>\n        <ProgressWithContent\n          color={lockCurrencyConfig.color || orangeLight}\n          confirmations={lockConfirmations}\n          targetConfirmations={lockTargetConfirmations}\n        >\n          <MainIcon fontSize=\"inherit\" color=\"inherit\" />\n        </ProgressWithContent>\n      </ProgressWrapper>\n      <SmallWrapper>\n        <Typography variant=\"body1\" align=\"center\">\n          {lockConfirmations} of {lockTargetConfirmations} confirmations\n        </Typography>\n      </SmallWrapper>\n      <MediumWrapper>\n        <BigAssetAmount\n          value={\n            <NumberFormatText\n              value={lockTxAmount}\n              spacedSuffix={lockCurrencyConfig.short}\n            />\n          }\n        />\n      </MediumWrapper>\n      <TransactionDetailsButton\n        label={lockChainConfig.short}\n        address={lockTxHash}\n        link={lockTxLink}\n      />\n      \n    </>\n  );\n};\n\nconst maxConfirmations = (actual: number, target: number) => {\n  if (actual > target) {\n    return target;\n  }\n  return actual;\n};\n\ntype MintDepositAcceptedStatusProps = {\n  tx: GatewaySession;\n  onSubmit?: () => void;\n  onReload?: () => void;\n  submitting: boolean;\n  submittingError: boolean;\n  depositHash: string;\n};\n\nexport const MintDepositAcceptedStatus: FunctionComponent<MintDepositAcceptedStatusProps> = ({\n  tx,\n  onSubmit,\n  onReload,\n  submitting,\n  submittingError,\n  depositHash,\n}) => {\n  useSetPaperTitle(\"Submit\");\n  useSetActionRequired(true);\n  const theme = useTheme();\n  let {\n    lockCurrencyConfig,\n    lockChainConfig,\n    lockTxHash,\n    lockTxAmount,\n    lockTxLink,\n    lockConfirmations,\n    lockTargetConfirmations,\n    mintChainConfig,\n  } = getLockAndMintParams(tx, depositHash);\n  const dep: DepositEntry = tx.transactions[depositHash]\n  lockTxHash = depositHash\n  lockTxLink = \"https://defiscan.live/transactions/\" + depositHash.split(\":\")[0]\n  lockConfirmations = dep?.confirmations || 0\n\n  lockTargetConfirmations = lockChainConfig?.targetConfirmations || 0\n\n  const notificationMessage = `${lockConfirmations>lockTargetConfirmations?lockTargetConfirmations:lockConfirmations}/${lockTargetConfirmations} confirmations, ready to submit ${\n    lockCurrencyConfig.short\n  } to ${mintChainConfig.full}?`;\n  const { showNotification } = useNotifications();\n  const { showBrowserNotification } = useBrowserNotifications();\n  useEffectOnce(() => {\n    showNotification(notificationMessage);\n    showBrowserNotification(notificationMessage);\n  });\n\n  const { MainIcon } = lockChainConfig;\n\n  return (\n    <>\n      <ProgressWrapper>\n        {submitting ? (\n          <ProgressWithContent color={theme.customColors.skyBlue} processing>\n            <MainIcon fontSize=\"inherit\" color=\"inherit\" />\n          </ProgressWithContent>\n        ) : (\n          <ProgressWithContent\n            color={lockCurrencyConfig.color || theme.customColors.skyBlue}\n            confirmations={lockConfirmations}\n            targetConfirmations={lockTargetConfirmations}\n          >\n            <MainIcon fontSize=\"inherit\" color=\"inherit\" />\n          </ProgressWithContent>\n        )}\n      </ProgressWrapper>\n      <Typography variant=\"body1\" align=\"center\" gutterBottom>\n        <NumberFormatText\n          value={lockTxAmount}\n          spacedSuffix={lockCurrencyConfig.full}\n        />{\" \"}\n        Received {lockConfirmations>lockTargetConfirmations?lockTargetConfirmations:lockConfirmations}/{lockTargetConfirmations} Confirmations\n      </Typography>\n      <ActionButtonWrapper>\n        <ActionButton onClick={onSubmit} disabled={submitting}>\n          {submitting ? \"Submitting\" : \"Submit\"} to {mintChainConfig.full}\n          {submitting && \"...\"}\n        </ActionButton>\n      </ActionButtonWrapper>\n      <ActionButtonWrapper>\n        <TransactionDetailsButton\n          label={lockChainConfig.short}\n          address={lockTxHash}\n          link={lockTxLink}\n        />\n      </ActionButtonWrapper>\n      <SubmitErrorDialog open={submittingError} onAction={onReload} />\n    </>\n  );\n};\n\ntype DestinationPendingStatusProps = {\n  tx: GatewaySession;\n  onSubmit?: () => void;\n  submitting: boolean;\n  depositHash: string;\n};\n\nexport const DestinationPendingStatus: FunctionComponent<DestinationPendingStatusProps> = ({\n  tx,\n  onSubmit = () => {},\n  submitting,\n  depositHash,\n}) => {\n  const theme = useTheme();\n  let  {\n    lockCurrencyConfig,\n    lockChainConfig,\n    lockTxHash,\n    lockTxAmount,\n    lockTxLink,\n    mintTxLink,\n    mintTxHash,\n    mintChainConfig,\n  } = getLockAndMintParams(tx, depositHash);\n\n  const dep: DepositEntry = tx.transactions[depositHash]\n  lockTxHash = depositHash\n  lockTxLink = \"https://defiscan.live/transactions/\" + depositHash.split(\":\")[0]\n\n  return (\n    <>\n      <ProgressWrapper>\n        <ProgressWithContent color={theme.customColors.skyBlue} processing>\n          <TransactionStatusInfo\n            status=\"Pending\"\n            chain={mintChainConfig.full}\n            address={\n              <Link\n                color=\"primary\"\n                underline=\"hover\"\n                href={mintTxLink}\n                target=\"_blank\"\n              >\n                {mintTxHash}\n              </Link>\n            }\n          />\n        </ProgressWithContent>\n      </ProgressWrapper>\n      <Typography variant=\"body1\" align=\"center\" gutterBottom>\n        <NumberFormatText\n          value={lockTxAmount}\n          spacedSuffix={lockCurrencyConfig.full}\n        />\n      </Typography>\n      <ActionButtonWrapper>\n        <ActionButton onClick={onSubmit} disabled={submitting}>\n          {submitting ? \"Submitting\" : \"Submit\"} to {mintChainConfig.full}\n          {submitting && \"...\"}\n        </ActionButton>\n      </ActionButtonWrapper>\n      <ActionButtonWrapper>\n        <TransactionDetailsButton\n          label={lockChainConfig.short}\n          address={lockTxHash}\n          link={lockTxLink}\n        />\n      </ActionButtonWrapper>\n    </>\n  );\n};\n\ntype MintCompletedStatusProps = {\n  tx: GatewaySession;\n  depositHash: string;\n  mintHash: string;\n  chain: string;\n};\n\nexport const MintCompletedStatus: FunctionComponent<MintCompletedStatusProps> = ({\n  tx,\n  depositHash,\n  mintHash,\n  chain\n}) => {\n  useSetPaperTitle(\"Complete\");\n  const dispatch = useDispatch();\n  const history = useHistory();\n  let {\n    lockCurrencyConfig,\n    mintCurrencyConfig,\n    lockChainConfig,\n    lockTxLink,\n    lockTxAmount,\n    mintTxLink,\n    mintChainConfig,\n  } = getLockAndMintParams(tx, depositHash);\n\n  lockTxLink = \"https://defiscan.live/transactions/\" + depositHash.split(\":\")[0]\n  if(chain == \"ethereum\"){\n    mintTxLink=\"https://etherscan.io/tx/\" + mintHash\n  }else{\n    mintTxLink=\"https://bscscan.com/tx/\" + mintHash\n  }\n\n  const { fees, pending } = useFetchFees(\n    lockCurrencyConfig.symbol,\n    TxType.MINT\n  );\n  const { conversionTotal } = getTransactionFees({\n    fees,\n    type: TxType.MINT,\n  });\n  const handleReturn = useCallback(() => {\n    history.push(paths.MINT);\n    dispatch(resetMint());\n  }, [dispatch, history]);\n\n  const { showNotification } = useNotifications();\n  const { showBrowserNotification } = useBrowserNotifications();\n\n  const showNotifications = useCallback(() => {\n    if (!pending) {\n      const notificationMessage = `Successfully minted ${mintCurrencyConfig.short} on ${mintChainConfig.full}.`;\n      showNotification(\n        <span>\n          {notificationMessage}{\" \"}\n          <Link external href={mintTxLink}>\n            View {mintChainConfig.full} transaction\n          </Link>\n        </span>\n      );\n      showBrowserNotification(notificationMessage);\n    }\n  }, [\n    showNotification,\n    showBrowserNotification,\n    pending,\n    conversionTotal,\n    mintChainConfig,\n    mintCurrencyConfig,\n    mintTxLink,\n  ]);\n\n  useEffect(showNotifications, [pending]);\n\n  return (\n    <>\n      <ProgressWrapper>\n        <ProgressWithContent>\n          <BigDoneIcon />\n        </ProgressWithContent>\n      </ProgressWrapper>\n      <ActionButtonWrapper>\n        <ActionButton onClick={handleReturn}>Back to start</ActionButton>\n      </ActionButtonWrapper>\n      <Box display=\"flex\" justifyContent=\"space-between\" flexWrap=\"wrap\" py={2}>\n        <Link\n          external\n          color=\"primary\"\n          variant=\"button\"\n          underline=\"hover\"\n          href={lockTxLink}\n        >\n          {lockChainConfig.full} transaction\n        </Link>\n        <Link\n          external\n          color=\"primary\"\n          variant=\"button\"\n          underline=\"hover\"\n          href={mintTxLink}\n        >\n          {mintChainConfig.full} transaction\n        </Link>\n      </Box>\n    </>\n  );\n};\n","import { ButtonBase, ButtonProps, makeStyles, styled } from \"@material-ui/core\";\nimport classNames from \"classnames\";\nimport React, { FunctionComponent } from \"react\";\nimport {\n  NavigatePrevIcon,\n  NavigateNextIcon,\n} from \"../../../components/icons/RenIcons\";\n\nconst useBigNavButtonStyles = makeStyles((theme) => ({\n  root: {\n    color: theme.palette.primary.main,\n    fontSize: 90,\n    transition: \"all 1s\",\n    display: \"inline-flex\",\n    cursor: \"pointer\",\n    \"&:hover\": {\n      color: theme.palette.primary.dark,\n    },\n  },\n  disabled: {\n    opacity: 0.2,\n    cursor: \"default\",\n  },\n  hidden: {\n    display: \"none\",\n    opacity: 0,\n  },\n}));\n\ntype BigNavButtonProps = ButtonProps & {\n  direction: \"next\" | \"prev\";\n};\nexport const BigNavButton: FunctionComponent<BigNavButtonProps> = ({\n  direction,\n  disabled,\n  hidden,\n  className,\n  onClick,\n}) => {\n  const styles = useBigNavButtonStyles();\n  const rootClassName = classNames(styles.root, className, {\n    [styles.disabled]: disabled,\n    [styles.hidden]: hidden,\n  });\n  const Icon = direction === \"prev\" ? NavigatePrevIcon : NavigateNextIcon;\n  return (\n    <ButtonBase className={rootClassName} disabled={disabled} onClick={onClick}>\n      <Icon fontSize=\"inherit\" />\n    </ButtonBase>\n  );\n};\n\nexport const BigPrevButton: FunctionComponent<ButtonProps> = (props) => (\n  <BigNavButton direction=\"prev\" {...props} />\n);\n\nexport const BigNextButton: FunctionComponent<ButtonProps> = (props) => (\n  <BigNavButton direction=\"next\" {...props} />\n);\n\nconst offsetTop = 38;\nconst offsetHorizontal = -42;\nexport const DepositPrevButton = styled(BigPrevButton)({\n  position: \"absolute\",\n  top: offsetTop,\n  left: offsetHorizontal,\n});\n\nexport const DepositNextButton = styled(BigNextButton)({\n  position: \"absolute\",\n  top: offsetTop,\n  right: offsetHorizontal,\n});\n","import { useMultiwallet } from \"@renproject/multiwallet-ui\";\nimport {\n  DepositMachineSchema,\n  GatewayMachineContext,\n  GatewayMachineEvent,\n  GatewaySession,\n  mintMachine,\n} from \"@renproject/ren-tx\";\nimport { useMachine } from \"@xstate/react\";\nimport { useCallback, useEffect, useState } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { Interpreter, State } from \"xstate\";\nimport { env } from \"../../constants/environmentVariables\";\nimport { db } from \"../../services/database/database\";\nimport { getRenJs } from \"../../services/renJs\";\nimport { lockChainMap, mintChainMap } from \"../../services/rentx\";\nimport { $renNetwork } from \"../network/networkSlice\";\nimport { updateTransaction } from \"../transactions/transactionsSlice\";\nimport { cloneTx } from \"../transactions/transactionsUtils\";\nimport { depositSorter } from \"./mintUtils\";\n\nexport const useMintMachine = (mintTransaction: GatewaySession) => {\n  const tx = cloneTx(mintTransaction);\n  const { enabledChains } = useMultiwallet();\n  const network = useSelector($renNetwork);\n  const providers = Object.entries(enabledChains).reduce(\n    (c, n) => ({\n      ...c,\n      [n[0]]: n[1].provider,\n    }),\n    {}\n  );\n  const machineHook = useMachine(mintMachine, {\n    context: {\n      tx,\n      providers,\n      sdk: getRenJs(network),\n      fromChainMap: lockChainMap,\n      toChainMap: mintChainMap,\n    },\n    devTools: env.XSTATE_DEVTOOLS,\n  });\n\n  return machineHook;\n};\n\nexport type DepositMachineSchemaState = keyof DepositMachineSchema[\"states\"];\n\n\n\nexport const useDepositPagination = (\n  tx: GatewaySession,\n  depositSourceHash = \"\",\n  updateHash: (arg0: string) => void\n) => {\n  const sortedDeposits = tx.transactions;\n  const orderedHashes = Object.keys(sortedDeposits).map((deposit) => deposit);\n\n  const total = orderedHashes.length;\n  const initial = depositSourceHash || total > 0 ? orderedHashes[0] : \"\";\n  const [currentHash, setCurrentHash] = useState(initial);\n  useEffect(() => {\n    setCurrentHash(initial);\n  }, [initial]);\n\n  const currentIndex = orderedHashes.indexOf(currentHash);\n  const nextIndex =\n    total > 0 && currentIndex + 1 < total ? currentIndex + 1 : 0;\n  const nextHash = orderedHashes[nextIndex];\n  const prevIndex = total > 0 && currentIndex - 1 >= 0 ? currentIndex - 1 : 0;\n  const prevHash = orderedHashes[prevIndex];\n\n  const handleNext = useCallback(() => {\n    console.log(orderedHashes)\n    console.log(\"next:\",nextHash)\n    setCurrentHash(nextHash);\n    updateHash(nextHash)\n  }, [nextHash]);\n\n  const handlePrev = useCallback(() => {\n    console.log(\"prev:\",prevHash)\n    setCurrentHash(prevHash);\n    updateHash(prevHash)\n  }, [prevHash]);\n\n\n  return {\n    currentHash,\n    currentIndex,\n    handleNext,\n    handlePrev,\n    total  };\n};\n","import { Divider, IconButton } from \"@material-ui/core\";\nimport {\n  GatewaySession,\n} from \"@renproject/ren-tx\";\nimport {getDeposits, DepositEntry, Signature, SignatureMessage, getKeySignatures} from \"../../../services/bridge\"\nimport React, {\n  FunctionComponent,\n  useCallback,\n  useEffect,\n  useMemo,\n  useState,\n} from \"react\";\nimport { useLocalStorage } from 'usehooks-ts'\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { RouteComponentProps, useHistory, useLocation } from \"react-router-dom\";\nimport { Actor } from \"xstate\";\nimport {\n  ActionButton,\n  ToggleIconButton,\n} from \"../../../components/buttons/Buttons\";\nimport { BackArrowIcon } from \"../../../components/icons/RenIcons\";\nimport {\n  CenteringSpacedBox,\n  PaperSpacerWrapper,\n} from \"../../../components/layout/LayoutHelpers\";\nimport {\n  PaperActions,\n  PaperContent,\n  PaperHeader,\n  PaperNav,\n  PaperTitle,\n} from \"../../../components/layout/Paper\";\nimport { Debug } from \"../../../components/utils/Debug\";\nimport { WalletConnectionProgress } from \"../../../components/wallet/WalletHelpers\";\nimport { paths } from \"../../../pages/routes\";\nimport { useNotifications } from \"../../../providers/Notifications\";\nimport { usePageTitle, usePaperTitle } from \"../../../providers/TitleProviders\";\nimport {\n  BridgeChainConfig,\n  getChainConfigByRentxName,\n  getCurrencyConfigByRentxName,\n} from \"../../../utils/assetConfigs\";\nimport { $renNetwork } from \"../../network/networkSlice\";\nimport {\n  BrowserNotificationButton,\n  BrowserNotificationsDrawer,\n} from \"../../notifications/components/NotificationsHelpers\";\nimport {\n  useBrowserNotifications,\n  useBrowserNotificationsConfirmation,\n} from \"../../notifications/notificationsUtils\";\nimport { TransactionFees } from \"../../transactions/components/TransactionFees\";\nimport {\n  TransactionMenu,\n  UpdateTxFn,\n} from \"../../transactions/components/TransactionMenu\";\nimport {\n  BookmarkPageWarning,\n  ExpiredErrorDialog,\n  ProgressStatus,\n  WrongAddressWarningDialog,\n} from \"../../transactions/components/TransactionsHelpers\";\nimport {\n  useSetCurrentTxId,\n  useTransactionDeletion,\n} from \"../../transactions/transactionsHooks\";\nimport {\n  createTxQueryString,\n  getAddressExplorerLink,\n  getTxPageTitle,\n  isTxExpired,\n  parseTxQueryString,\n  TxConfigurationStep,\n  TxType,\n  useTxParam,\n} from \"../../transactions/transactionsUtils\";\nimport {\n  useAuthRequired,\n  useSelectedChainWallet,\n  useRedeem\n} from \"../../wallet/walletHooks\";\nimport {\n  $chain,\n  setChain,\n  setWalletPickerOpened,\n} from \"../../wallet/walletSlice\";\nimport {\n  DepositWrapper,\n  MultipleDepositsMessage,\n  GenericMessage\n} from \"../components/MintHelpers\";\nimport {\n  DestinationPendingStatus,\n  MintCompletedStatus,\n  MintDepositAcceptedStatus,\n  MintDepositConfirmationStatus,\n  MintDepositToStatus,\n} from \"../components/MintStatuses\";\nimport {\n  DepositNextButton,\n  DepositPrevButton,\n} from \"../components/MultipleDepositsHelpers\";\nimport { useDepositPagination, useMintMachine } from \"../mintHooks\";\nimport { resetMint } from \"../mintSlice\";\nimport { getLockAndMintParams, getRemainingGatewayTime } from \"../mintUtils\";\nimport { clearTimeout } from \"timers\";\n\n\nexport const MintProcessStep: FunctionComponent<RouteComponentProps> = ({\n  history,\n  location,\n}) => {\n  useAuthRequired(true);\n  const dispatch = useDispatch();\n  const chain = useSelector($chain);\n  var rdDict: { [id: string]: string; } = {\n    \"bcc207a0e3745b9b4394e0daa6c098edc4224cb28379505c70b8407d73738905:0\": \"skip\"\n  }\n\n  const [rdtx, setRdtx] = useLocalStorage('rdDict', rdDict)\n\n  \n  const { walletConnected } = useSelectedChainWallet();\n  const { tx: parsedTx, txState } = useTxParam();\n  const [depositHash, setDepositHash] = useState<string>(parsedTx?.depositHash !== undefined ? parsedTx.depositHash + \":\" + parsedTx.depositN : \"\");\n  const [reloading, setReloading] = useState(false);\n  const [tx, setTx] = useState<GatewaySession>(parsedTx as GatewaySession);\n\n  useSetCurrentTxId(tx.id);\n\n  usePageTitle(getTxPageTitle(tx));\n  const [paperTitle, setPaperTitle] = usePaperTitle();\n  useEffect(() => {\n    if (!walletConnected) {\n      setPaperTitle(\"Resume Transaction\");\n    }\n  }, [walletConnected, setPaperTitle]);\n\n  const handlePreviousStepClick = useCallback(() => {\n    history.goBack();\n  }, [history]);\n\n \n  const destChain = parsedTx?.destChain;\n  useEffect(() => {\n    if (destChain) {\n      const bridgeChainConfig = getChainConfigByRentxName(destChain);\n      dispatch(setChain(bridgeChainConfig.symbol));\n    }\n  }, [dispatch, destChain]);\n\n  const handleWalletPickerOpen = useCallback(() => {\n    dispatch(setWalletPickerOpened(true));\n  }, [dispatch]);\n\n  const onBookmarkWarningClosed = useCallback(() => {\n    history.replace({ ...location, state: undefined });\n  }, [history, location]);\n\n  const showTransactionStatus = !!tx && walletConnected;\n  const feeCurrency = getCurrencyConfigByRentxName(tx.sourceAsset).symbol;\n\n  const [counter, changeCounter] = useState(0);\n\n  const updateTx = () => {\n    if(!tx) return;\n    getDeposits(tx.userAddress, tx.destChain).then((jsonObj) => {\n    let txChange: GatewaySession = JSON.parse(JSON.stringify(tx));\n    if(jsonObj.status == 1) {\n        let changes = false;\n        if(jsonObj.result !== undefined && jsonObj.result.data !== undefined && jsonObj.result.data.length > 0) {\n            for(let i = 0; i<jsonObj.result.data.length; ++i) {\n              const key = jsonObj.result.data[i].vout?.txid + \":\" + jsonObj.result.data[i].vout?.n as string\n              if(key in rdtx) continue\n              const result = (key in txChange.transactions)\n              if(!result || JSON.stringify(txChange.transactions[key])!=JSON.stringify(jsonObj.result.data[i])){\n                (txChange as any).transactions[key] = jsonObj.result.data[i]\n                changes = true;\n              }\n            }\n            if(depositHash === \"\" && Object.keys(txChange.transactions).length > 0){\n              setDepositHash(Object.keys(txChange.transactions)[0])\n            }\n            if(changes){\n              setTx(txChange)\n            }\n        }\n    }})\n  }\n\n  const updateHash = ((hash: string) => {\n    setDepositHash(hash)\n  })\n\n  useEffect(() => {\n    const interval = setInterval(() => {\n      updateTx()\n    }, 3000);\n    return () => clearInterval(interval);\n  }, [depositHash]);\n\n\n\n   return (\n    <>\n      <PaperHeader>\n        <PaperNav>\n            <IconButton onClick={handlePreviousStepClick}>\n              <BackArrowIcon />\n            </IconButton>\n        </PaperNav>\n        <PaperTitle>{paperTitle}</PaperTitle>\n        <PaperActions>\n          \n        </PaperActions>\n      </PaperHeader>\n      <PaperContent bottomPadding>\n        {showTransactionStatus && (\n          <MintTransactionStatus\n            tx={tx}\n            depositHash={depositHash}\n            updateHash={updateHash}\n            rdtx={rdtx}\n            setRdtx={setRdtx}\n          />\n        )}\n        {!walletConnected && (\n          <>\n            <PaperSpacerWrapper>\n              <CenteringSpacedBox>\n                <WalletConnectionProgress />\n              </CenteringSpacedBox>\n            </PaperSpacerWrapper>\n            <ActionButton onClick={handleWalletPickerOpen}>\n              Connect Wallet\n            </ActionButton>\n          </>\n        )}\n      </PaperContent>\n      {walletConnected && (\n        <>\n          <Divider />\n          <PaperContent darker topPadding bottomPadding>\n            <TransactionFees\n              chain={chain}\n              currency={feeCurrency}\n              type={TxType.MINT}\n              address={tx.userAddress}\n            />\n          </PaperContent>\n        </>\n      )}\n      \n  \n      <Debug it={{ tx, txState: txState }} />\n    </>\n  );\n};\n\ntype OnMachineSendReadyFn = (\n  send: ReturnType<typeof useMintMachine>[1]\n) => void;\n\ntype MintTransactionStatusProps = {\n  tx: GatewaySession;\n  depositHash?: string;\n  updateHash: (arg0: string) => void\n  rdtx: any\n  setRdtx: any\n};\n\nconst MintTransactionStatus: FunctionComponent<MintTransactionStatusProps> = ({\n  tx,\n  depositHash = \"\",\n  updateHash,\n  rdtx,\n  setRdtx\n}) => {\n  const chain = useSelector($chain);\n  const renNetwork = useSelector($renNetwork);\n  const { account } = useSelectedChainWallet();\n\n  const [state, setState] = useState(\"restoringDeposit\" as string)\n  const {\n    currentIndex,\n    currentHash,\n    total,\n    handlePrev,\n    handleNext,\n  } = useDepositPagination(tx, depositHash, updateHash);\n\n\n\n  var SigDict: { [id: string]: SignatureMessage; } = {}\n\n  const { showNotification, closeNotification } = useNotifications();\n  const [signatures, setSignatures] = useState(SigDict)\n  const [timeOut, setTimeOut] = useState(0)\n  let timeoutTimer: any = undefined\n\n  const timeoutFunc = () =>\n  {\n    setTimeOut(timeOut+1)\n  }\n\n  useEffect(() => {\n    // here we decide on the transaction status\n    const dep: DepositEntry = tx.transactions[depositHash]\n    console.log(dep)\n    if(timeoutTimer!==undefined){\n      clearTimeout(timeoutTimer)\n      timeoutTimer = undefined\n    }\n\n    if(dep){\n      const confs = dep?.good || false\n      if(!confs) \n        setState(\"srcSettling\")\n      else {\n        if(depositHash in signatures){\n          console.log(rdtx)\n          console.log(depositHash)\n          if(depositHash in rdtx){\n            setState(\"completed\")\n          }else{\n            setState(\"accepted\")\n          }\n        }else{\n            setState(\"srcConfirmed\")\n            submitSignRequest()\n            timeoutTimer = setTimeout(timeoutFunc, 12000)\n        }\n        \n      }\n    }\n  },[tx, depositHash, signatures, rdtx, timeOut]);\n  \n\n\n  const submitToBridge = async() => {\n      console.log(\"Submitting via Wallet Provider\")\n      const siggy = signatures[depositHash]\n      if(siggy['signatures'] == undefined) return\n      const r = '0x' + siggy['signatures'][0]['r'] || ''\n      const s = '0x' + siggy['signatures'][0]['s'] || ''\n      const v = siggy['signatures'][0]['recovery_id']==\"00\" ? 0 : 1\n      console.log(tx.destAddress, depositHash.split(\":\")[0], parseInt(depositHash.split(\":\")[1]), activeDeposit?.vout?.value_satoshi || 0, tx.sourceAsset, r, s, v + 27)\n      let res: any = await getSignatures(tx.destAddress, depositHash.split(\":\")[0], parseInt(depositHash.split(\":\")[1]), activeDeposit?.vout?.value_satoshi || 0, tx.sourceAsset, r, s, v + 27)\n      if(res.err!==null && res.err?.code != 0) {\n        console.log(res.err?.message)\n        showNotification(res.err?.message as string || \"\", {\n          variant: \"error\",\n          persist: false,\n        });\n      }else{\n        console.log(res);\n        let rdCopy = JSON.parse(JSON.stringify(rdtx))\n        rdCopy[depositHash] = res.result\n        setRdtx(rdCopy)\n      }\n  }\n\n  const submitSignRequest = async() => {\n    console.log(\"Submitting Signing Request\")\n    getKeySignatures(tx.destAddress, (activeDeposit?.vout?.txid || \"\").replace(\"0x\",\"\"), activeDeposit?.vout?.n || 0, tx.destChain).then((sigs) => {\n      if(sigs && sigs?.status == 1){\n        let sigCopy = JSON.parse(JSON.stringify(signatures))\n        sigCopy[depositHash] = sigs\n        setSignatures(sigCopy)\n      }\n    }).catch((err) => {})\n  }\n\n  useEffect(() => {\n    let key = 0;\n    if (total > 1) {\n      key = showNotification(<MultipleDepositsMessage />, {\n        variant: \"warning\",\n        persist: true,\n      }) as number;\n    }\n    return () => {\n      if (key) {\n        closeNotification(key);\n      }\n    };\n  }, [showNotification, closeNotification, total]);\n\n  const [wrongAddressDialogOpened, setWrongAddressDialogOpened] = useState(\n    false\n  );\n  const handleCloseWrongAddressDialog = useCallback(() => {\n    setWrongAddressDialogOpened(false);\n  }, []);\n\n  useEffect(() => {\n    if (\n      account &&\n      tx.userAddress &&\n      account.toLowerCase() !== tx.userAddress.toLowerCase()\n    ) {\n      setWrongAddressDialogOpened(true);\n    } else {\n      setWrongAddressDialogOpened(false);\n    }\n  }, [account, tx.userAddress, tx]);\n\n  const activeDeposit = useMemo<\n    DepositEntry\n   | null>(() => {\n    if ((tx?.transactions === undefined)) {\n      return null;\n    }\n    const deposit = tx.transactions[currentHash || depositHash];\n    if (!deposit){\n      return null;\n    }\n    return deposit;\n  }, [currentHash, tx, depositHash]);\n\n  const {getSignatures} = useRedeem()\n\n\n  // In order to enable quick restoration, we need to persist the deposit transaction\n  // We persist via querystring, so lets check if the transaction is present\n  // and update otherwise\n  const location = useLocation();\n  const history = useHistory();\n\n  useEffect(() => {\n    if (!location.search) return;\n    const queryTx = parseTxQueryString(location.search);\n    const deposit = (queryTx?.transactions || {})[currentHash];\n    // If we have detected a deposit, but there is no deposit in the querystring\n    // update the queryString to have the deposit\n    // TODO: to enable quick resume, we may want to ask users to update their bookmarks\n    if (activeDeposit && !deposit) {\n      history.replace({\n        pathname: paths.MINT_TRANSACTION,\n        search: \"?\" + createTxQueryString(tx),\n      });\n    }\n  }, [currentHash, depositHash, location, activeDeposit, tx, history]);\n\n  const { mintCurrencyConfig } = getLockAndMintParams(\n    tx,\n    currentHash\n  );\n  const accountExplorerLink = getAddressExplorerLink(\n    chain,\n    renNetwork,\n    account\n  );\n\n  return (\n    <>\n      {activeDeposit ? (\n        <DepositWrapper>\n          <MintTransactionDepositStatus\n            tx={tx}\n            deposit={activeDeposit}\n            depositHash={depositHash}\n            state={state}\n            submitter={submitToBridge}\n            mintHash={rdtx[depositHash]}\n          />\n          {total > 1 && (\n            <>\n              <DepositPrevButton\n                onClick={handlePrev}\n                disabled={currentIndex === 0}\n              />\n              <DepositNextButton\n                onClick={handleNext}\n                disabled={currentIndex === total - 1}\n              />\n            </>\n          )}\n        </DepositWrapper>\n      ) : (\n        <MintDepositToStatus tx={tx} />\n      )}\n    \n\n      <WrongAddressWarningDialog\n        open={wrongAddressDialogOpened}\n        address={account}\n        addressExplorerLink={accountExplorerLink}\n        currency={mintCurrencyConfig.short}\n        onAlternativeAction={handleCloseWrongAddressDialog}\n      />\n      <Debug\n        it={{\n          depositHash,\n          pagination: { currentIndex, currentHash, total },\n          activeDeposit,\n          total,\n          currentIndex,\n          currentHash,\n        }}\n      />\n    </>\n  );\n};\n\ntype MintTransactionDepositStatusProps = {\n  tx: GatewaySession;\n  deposit: DepositEntry;\n  depositHash: string;\n  state: string;\n  submitter: ()=>void\n  mintHash: string;\n};\n\n\nexport const MintTransactionDepositStatus: FunctionComponent<MintTransactionDepositStatusProps> = ({\n  tx,\n  deposit,\n  depositHash,\n  state,\n  submitter,\n  mintHash,\n}) => {\n  const history = useHistory();\n  const location = useLocation();\n \n\n  console.debug(tx.id, depositHash, state);\n  switch (state) {\n    case \"srcSettling\":\n      return (\n        <MintDepositConfirmationStatus tx={tx} depositHash={depositHash} />\n      );\n    case \"srcConfirmed\": // source sourceChain confirmations ok, but renVM still doesn't accept it\n      return <ProgressStatus reason=\"Generating Signatures\" />;\n    case \"errorAccepting\":\n    case \"errorSubmitting\":\n    case \"claiming\":\n    case \"accepted\": // RenVM accepted it, it can be submitted to ethereum\n      return (\n        <MintDepositAcceptedStatus\n          tx={tx}\n          depositHash={depositHash}\n          submitting={state === \"claiming\"}\n          submittingError={\n            state === \"errorSubmitting\" || state === \"errorAccepting\"\n          }\n          onSubmit={submitter}\n        />\n      );\n    case \"destInitiated\": // final txHash means its done or check if wallet balances went up\n      return (\n        <DestinationPendingStatus\n          tx={tx}\n          depositHash={depositHash}\n          submitting={true}\n        />\n      );\n    case \"completed\":\n      return <MintCompletedStatus tx={tx} depositHash={depositHash} mintHash={mintHash} chain={tx.destChain}/>;\n    case \"restoringDeposit\":\n      return <ProgressStatus reason=\"Restoring deposit\" />;\n    default:\n      return <ProgressStatus reason=\"This is just weird\" />;\n  }\n};\n","import React, { FunctionComponent, useCallback, useState } from \"react\";\nimport { RouteComponentProps } from \"react-router\";\nimport { Route } from \"react-router-dom\";\nimport { paths } from \"../../pages/routes\";\nimport { usePageTitle } from \"../../providers/TitleProviders\";\nimport { TransactionTypeTabs } from \"../transactions/components/TransactionTypeTabs\";\nimport { useSetCurrentTxId } from \"../transactions/transactionsHooks\";\nimport { TxConfigurationStep } from \"../transactions/transactionsUtils\";\nimport { MintFeesStep } from \"./steps/MintFeesStep\";\nimport { MintInitialStep } from \"./steps/MintInitialStep\";\nimport { MintProcessStep } from \"./steps/MintProcessStep\";\n\nconst MintConfiguration: FunctionComponent<RouteComponentProps> = () => {\n  const [step, setStep] = useState(TxConfigurationStep.INITIAL);\n\n  // clear the current tx so that history starts processing again\n  useSetCurrentTxId(\"\");\n\n  const onInitialNext = useCallback(() => {\n    setStep(TxConfigurationStep.FEES);\n  }, []);\n  const onFeesPrev = useCallback(() => {\n    setStep(TxConfigurationStep.INITIAL);\n  }, []);\n\n  return (\n    <>\n      {step === TxConfigurationStep.INITIAL && (\n        <>\n          <TransactionTypeTabs />\n          <MintInitialStep onNext={onInitialNext} />\n        </>\n      )}\n      {step === TxConfigurationStep.FEES && (\n        <MintFeesStep onPrev={onFeesPrev} />\n      )}\n    </>\n  );\n};\n\nexport const MintFlow: FunctionComponent<RouteComponentProps> = ({ match }) => {\n  usePageTitle(\"Minting\");\n  return (\n    <>\n      <Route exact path={paths.MINT} component={MintConfiguration} />\n      <Route exact path={paths.MINT_TRANSACTION} component={MintProcessStep} />\n    </>\n  );\n};\n","import { Box, Typography, useTheme } from \"@material-ui/core\";\nimport { GatewaySession } from \"@renproject/ren-tx\";\nimport React, { FunctionComponent, useCallback } from \"react\";\nimport { useDispatch } from \"react-redux\";\nimport { useHistory } from \"react-router-dom\";\nimport { useEffectOnce } from \"react-use\";\nimport {\n  ActionButton,\n  ActionButtonWrapper,\n} from \"../../../components/buttons/Buttons\";\nimport { Link } from \"../../../components/links/Links\";\nimport {\n  BigDoneIcon,\n  ProgressWithContent,\n  ProgressWrapper,\n  TransactionStatusInfo,\n} from \"../../../components/progress/ProgressHelpers\";\nimport { Debug } from \"../../../components/utils/Debug\";\nimport { paths } from \"../../../pages/routes\";\nimport { useNotifications } from \"../../../providers/Notifications\";\nimport { useSetPaperTitle } from \"../../../providers/TitleProviders\";\nimport { useBrowserNotifications } from \"../../notifications/notificationsUtils\";\nimport {\n  GeneralErrorDialog,\n  SubmitErrorDialog,\n} from \"../../transactions/components/TransactionsHelpers\";\nimport { resetRelease } from \"../releaseSlice\";\nimport { getBurnAndReleaseParams } from \"../releaseUtils\";\n\nexport const a = 1;\n\ntype ReleaseProgressStatusProps = {\n  tx: GatewaySession;\n  onSubmit?: () => void;\n  onReload?: () => void;\n  submittingError?: boolean;\n  generalError?: boolean;\n  submitting?: boolean;\n  pending?: boolean;\n};\n\nexport const ReleaseProgressStatus: FunctionComponent<ReleaseProgressStatusProps> = ({\n  tx,\n  onSubmit,\n  onReload,\n  submitting = false,\n  submittingError,\n  generalError,\n  pending = false,\n}) => {\n  useSetPaperTitle(\"Submit\");\n  const theme = useTheme();\n  const {\n    burnChainConfig,\n    releaseCurrencyConfig,\n    burnTxHash,\n    burnTxLink,\n  } = getBurnAndReleaseParams(tx);\n  const { MainIcon } = burnChainConfig;\n\n  const handleSubmit = useCallback(() => {\n    if (onSubmit) {\n      onSubmit();\n    }\n  }, [onSubmit]);\n\n  const buttonSubmitting = pending || submitting;\n\n  return (\n    <>\n      <ProgressWrapper>\n        <ProgressWithContent\n          color={theme.customColors.skyBlue}\n          processing={buttonSubmitting}\n        >\n          {pending ? (\n            <TransactionStatusInfo\n              status=\"Pending\"\n              chain={burnChainConfig.full}\n              address={\n                <Link\n                  color=\"primary\"\n                  underline=\"hover\"\n                  href={burnTxLink}\n                  target=\"_blank\"\n                >\n                  {burnTxHash}\n                </Link>\n              }\n            />\n          ) : (\n            <MainIcon fontSize=\"inherit\" color=\"inherit\" />\n          )}\n        </ProgressWithContent>\n      </ProgressWrapper>\n      {!pending && (\n        <Typography variant=\"body1\" align=\"center\" gutterBottom>\n          To receive your {releaseCurrencyConfig.short}, submit a release\n          transaction to {burnChainConfig.full} via your Web3 Wallet.\n        </Typography>\n      )}\n      <ActionButtonWrapper>\n        <ActionButton onClick={handleSubmit} disabled={buttonSubmitting}>\n          {buttonSubmitting ? \"Submitting\" : \"Submit\"} to {burnChainConfig.full}\n          {buttonSubmitting && \"...\"}\n        </ActionButton>\n      </ActionButtonWrapper>\n      <SubmitErrorDialog open={Boolean(submittingError)} onAction={onReload} />\n      <GeneralErrorDialog open={Boolean(generalError)} onAction={onReload} />\n    </>\n  );\n};\n\ntype ReleaseCompletedStatusProps = {\n  tx: GatewaySession;\n  onReturn?: () => void;\n};\n\ntype ReleaseShortcutCompletedStatusProps = {\n  txid: string;\n  amount: number;\n  chain: string;\n  onPrev?: () => void;\n  onReturn?: () => void;\n};\n\nexport const ReleaseCompletedStatus: FunctionComponent<ReleaseCompletedStatusProps> = ({\n  tx,\n}) => {\n  useSetPaperTitle(\"Completed\");\n  const dispatch = useDispatch();\n  const history = useHistory();\n  const {\n    releaseChainConfig,\n    releaseCurrencyConfig,\n    burnChainConfig,\n    burnTxLink,\n    releaseTxLink,\n    releaseAddressLink,\n  } = getBurnAndReleaseParams(tx);\n  const handleReturn = useCallback(() => {\n    history.push(paths.RELEASE);\n    dispatch(resetRelease());\n  }, [dispatch, history]);\n\n  const notificationMessage = `Successfully released ${tx.targetAmount} ${releaseCurrencyConfig.short}`;\n  const { showNotification } = useNotifications();\n  const { showBrowserNotification } = useBrowserNotifications();\n  useEffectOnce(() => {\n    showNotification(\n      <span>\n        {notificationMessage}{\" \"}\n        <Link external href={releaseTxLink || releaseAddressLink}>\n          View {releaseChainConfig.full}{\" \"}\n          {releaseTxLink ? \"transaction\" : \"address\"}\n        </Link>\n      </span>\n    );\n    showBrowserNotification(notificationMessage);\n  });\n\n  return (\n    <>\n      <ProgressWrapper>\n        <ProgressWithContent>\n          <BigDoneIcon />\n        </ProgressWithContent>\n      </ProgressWrapper>\n      <ActionButtonWrapper>\n        <ActionButton onClick={handleReturn}>Back to Start</ActionButton>\n      </ActionButtonWrapper>\n      <Box display=\"flex\" justifyContent=\"space-between\" flexWrap=\"wrap\" py={2}>\n        <Link\n          external\n          color=\"primary\"\n          variant=\"button\"\n          underline=\"hover\"\n          href={releaseTxLink || releaseAddressLink}\n        >\n          {releaseChainConfig.full} {releaseTxLink ? \"transaction\" : \"address\"}\n        </Link>\n        <Link\n          external\n          color=\"primary\"\n          variant=\"button\"\n          underline=\"hover\"\n          href={burnTxLink}\n        >\n          {burnChainConfig.full} transaction\n        </Link>\n      </Box>\n      <Debug it={{ tx }} />\n    </>\n  );\n};\n\n\nexport const ReleaseShortcutCompletedStatus: FunctionComponent<ReleaseShortcutCompletedStatusProps> = ({\n  txid,\n  amount,\n  chain,\n  onPrev\n}) => {\n  useSetPaperTitle(\"Completed\");\n  const dispatch = useDispatch();\n  const history = useHistory();\n  const handleReturn = useCallback(() => {\n    if(onPrev)\n    \tonPrev();\n    dispatch(resetRelease());\n  }, [dispatch, history]);\n  const notificationMessage = `Successfully released`;\n  const { showNotification } = useNotifications();\n  const { showBrowserNotification } = useBrowserNotifications();\n  let releaseTxLink: string;\n  if(chain == \"ethereum\"){\n    releaseTxLink=\"https://etherscan.io/tx/\" + txid\n  }else{\n    releaseTxLink=\"https://bscscan.com/tx/\" + txid\n  }  \n  useEffectOnce(() => {\n    showNotification(\n      <span>\n        {notificationMessage}{\" \"}\n        <Link external href={releaseTxLink}>\n          View Transaction\n        </Link>\n      </span>\n    );\n    showBrowserNotification(notificationMessage);\n  });\n\n  return (\n    <>\n      <ProgressWrapper>\n        <ProgressWithContent>\n          <BigDoneIcon />\n        </ProgressWithContent>\n      </ProgressWrapper>\n      <ActionButtonWrapper>\n        <ActionButton onClick={handleReturn}>Back to Start</ActionButton>\n      </ActionButtonWrapper>\n      <Box display=\"flex\" justifyContent=\"space-between\" flexWrap=\"wrap\" py={2}>\n        <Link\n          external\n          color=\"primary\"\n          variant=\"button\"\n          underline=\"hover\"\n          href={releaseTxLink}\n        >\n          View Transaction on Block Explorer\n        </Link>\n      </Box>\n\n    </>\n  );\n};\n","export const releaseTooltips = {\n  releasing: \"The amount and asset you're releasing before fees are applied.\",\n  from: \"The blockchain you are releasing the asset from.\",\n  to: \"The wallet address you're receiving the assets to.\",\n};\n","import { Divider, IconButton, Typography } from \"@material-ui/core\";\nimport React, {\n  FunctionComponent,\n  useCallback,\n  useEffect,\n  useMemo,\n  useState,\n} from \"react\";\nimport {getLogs} from \"../../../services/bridge\"\n\nimport {\n  ReleaseShortcutCompletedStatus,\n  ReleaseProgressStatus,\n} from '../components/ReleaseStatuses'\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { useHistory } from \"react-router-dom\";\nimport { useNotifications } from \"../../../providers/Notifications\";\n\nimport {\n  ActionButton,\n  ActionButtonWrapper,\n  TransactionDetailsButton,\n} from \"../../../components/buttons/Buttons\";\nimport { NumberFormatText } from \"../../../components/formatting/NumberFormatText\";\nimport { BackArrowIcon } from \"../../../components/icons/RenIcons\";\nimport {\n  PaperActions,\n  PaperContent,\n  PaperHeader,\n  PaperNav,\n  PaperTitle,\n} from \"../../../components/layout/Paper\";\nimport { CenteredProgress, ProgressWithContent, ProgressWrapper } from \"../../../components/progress/ProgressHelpers\";\nimport {validate, Network} from '../releaseAddressValidator'\nimport {\n  AssetInfo,\n  BigAssetAmount,\n  BigAssetAmountWrapper,\n  LabelWithValue,\n  MiddleEllipsisText,\n  SpacedDivider,\n} from \"../../../components/typography/TypographyHelpers\";\nimport { paths } from \"../../../pages/routes\";\nimport { db } from \"../../../services/database/database\";\nimport {\n  getChainConfig,\n  getCurrencyConfig,\n  toReleasedCurrency,\n} from \"../../../utils/assetConfigs\";\nimport { useFetchFees } from \"../../fees/feesHooks\";\nimport { getTransactionFees } from \"../../fees/feesUtils\";\nimport { $renNetwork } from \"../../network/networkSlice\";\nimport { TransactionFees } from \"../../transactions/components/TransactionFees\";\nimport {\n  addTransaction,\n  setCurrentTxId,\n} from \"../../transactions/transactionsSlice\";\nimport {useBurn, useToken} from \"../../wallet/walletHooks\"\nimport {\n  createTxQueryString,\n  LocationTxState,\n  TxConfigurationStepProps,\n  TxType,\n} from \"../../transactions/transactionsUtils\";\nimport {\n  useAuthRequired,\n  useSelectedChainWallet,\n} from \"../../wallet/walletHooks\";\nimport {\n  $multiwalletChain,\n  $wallet,\n  setWalletPickerOpened,\n} from \"../../wallet/walletSlice\";\nimport { releaseTooltips } from \"../components/ReleaseHelpers\";\nimport { $release } from \"../releaseSlice\";\nimport {\n  createReleaseTransaction,\n  preValidateReleaseTransaction,\n} from \"../releaseUtils\";\nimport { releaseChainClassMap } from \"../../../services/rentx\";\nimport { SmallWrapper, MediumWrapper } from \"../../../components/layout/LayoutHelpers\";\nimport { orangeLight } from \"../../../theme/colors\";\n\nexport const ReleaseFeesStep: FunctionComponent<TxConfigurationStepProps> = ({\n  onPrev,\n}) => {\n  useAuthRequired(true);\n  const dispatch = useDispatch();\n  const history = useHistory();\n  const { account, walletConnected } = useSelectedChainWallet();\n  const [releasingInitialized, setReleasingInitialized] = useState(false);\n  const [releaseTxId, setReleaseTxId] = useState(\"\");\n  const [ethconf, setEthconf] = useState({});\n  const { currency, address, amount } = useSelector($release);\n  const network = useSelector($renNetwork);\n  const {\n    chain,\n    signatures: { signature },\n  } = useSelector($wallet);\n  const renChain = useSelector($multiwalletChain);\n  const { fees, pending } = useFetchFees(currency, TxType.BURN);\n  const {getBurn} = useBurn()\n\n  const currencyConfig = getCurrencyConfig(currency);\n  const chainConfig = getChainConfig(chain);\n  const destinationCurrency = toReleasedCurrency(currency);\n  \n  const destinationCurrencyConfig = getCurrencyConfig(destinationCurrency);\n  const { MainIcon } = destinationCurrencyConfig;\n  const tx = useMemo(\n    () =>\n      createReleaseTransaction({\n        currency: currency,\n        destAddress: address,\n        userAddress: account,\n        sourceChain: renChain,\n        network: network,\n      }),\n    [currency, address, account, renChain, network]\n  );\n  const canInitializeReleasing = preValidateReleaseTransaction(tx);\n  const { showNotification, closeNotification } = useNotifications();\n\n  const handleConfirm = useCallback(async() => {\n    setReleasingInitialized(true);\n    if (walletConnected) {\n      let res: any = await getBurn(address, amount, tx.sourceAsset)\n      console.log(res)\n      if(res.err!==null && res.err?.code != 0) {\n        setReleasingInitialized(false);\n        showNotification(res.err?.message as string || \"\", {\n          variant: \"error\",\n          persist: false,\n        });\n      }else{\n        setReleasingInitialized(false);\n        setReleaseTxId(res.result); // TODO: DO METAFUCK MAGIC HERE!\n      }\n    } else {\n      setReleasingInitialized(false);\n      dispatch(setWalletPickerOpened(true));\n    }\n  }, [dispatch, canInitializeReleasing, walletConnected]);\n  const targetCurrency = toReleasedCurrency(currency);\n  const releaseCurrencyConfig = getCurrencyConfig(targetCurrency);\n  const releaseChainConfig = getChainConfig(releaseCurrencyConfig.sourceChain);\n  const validateAddress = useMemo(() => {\n     // TODO: improve this\n     return validate(address, Network.mainnet)\n\n  }, [releaseChainConfig.rentxName, network, address]);\n\n  var getter = () => { \n    if (releaseTxId!=\"\" && ((ethconf as any)?.Executed || false) == false) {\n      getLogs(releaseTxId, chain==\"BSCC\"?\"binance\":\"ethereum\").then((jsonObj) => {\n        setEthconf(jsonObj)\n        const intervalObj = setTimeout(() => getter(), 3000);\n      }).catch(() => {\n        const intervalObj = setTimeout(() => getter(), 3000);\n      })\n      \n    }\n  }\n  useEffect(() => {\n    if (releaseTxId!=\"\") {\n      getter()\n    }\n  }, [releaseTxId]);\n\n if (releaseTxId!=\"\")\n  if (((ethconf as any)?.Executed || false) == true) {\n  return (\n    <>\n    <PaperHeader>\n        <PaperNav>\n          <IconButton onClick={onPrev}>\n            <BackArrowIcon />\n          </IconButton>\n        </PaperNav>\n        <PaperTitle>All Done</PaperTitle>\n        <PaperActions />\n      </PaperHeader>\n      <PaperContent bottomPadding>\n      <ReleaseShortcutCompletedStatus txid={releaseTxId} amount={amount} chain={tx.sourceChain} onPrev={onPrev}/>\n      </PaperContent>\n    </>)\n  } else {\n    return (\n      <>\n      <PaperHeader>\n          \n        </PaperHeader>\n        <PaperContent bottomPadding>\n\n      <ProgressWrapper>\n        <ProgressWithContent\n          color={orangeLight}\n          confirmations={(ethconf as any)?.Confirmations || 0}\n          targetConfirmations={5}\n        >\n          <MainIcon fontSize=\"inherit\" color=\"inherit\" />\n        </ProgressWithContent>\n      </ProgressWrapper>\n      <SmallWrapper>\n        <Typography variant=\"body1\" align=\"center\">\n          {(ethconf as any)?.Confirmations || 0} of {5} confirmations\n        </Typography>\n      </SmallWrapper>\n      <MediumWrapper>\n      <Typography variant=\"body1\" align=\"center\">\n      Please wait until your transaction has been confirmed on the {chain==\"BSCC\"?\"Binance\":\"Ethereum\"} Blockchain. Do not close this window, as your DFI  will be released after this step has completed.\n      </Typography>\n      </MediumWrapper>\n      </PaperContent>\n      </>)\n  }\n else return (\n     <>\n      <PaperHeader>\n        <PaperNav>\n          <IconButton onClick={onPrev}>\n            <BackArrowIcon />\n          </IconButton>\n        </PaperNav>\n        <PaperTitle>Fees & Confirm</PaperTitle>\n        <PaperActions />\n      </PaperHeader>\n\n      <PaperContent bottomPadding>\n        <BigAssetAmountWrapper>\n          <BigAssetAmount\n            value={\n              <NumberFormatText\n                value={amount}\n                spacedSuffix={currencyConfig.short}\n              />\n            }\n          />\n        </BigAssetAmountWrapper>\n        <Typography variant=\"body1\" gutterBottom>\n          Details\n        </Typography>\n        <LabelWithValue\n          label=\"Releasing\"\n          labelTooltip={releaseTooltips.releasing}\n          value={\n            <NumberFormatText\n              value={amount}\n              spacedSuffix={currencyConfig.short}\n            />\n          }\n        />\n        <LabelWithValue\n          label=\"From\"\n          labelTooltip={releaseTooltips.from}\n          value={chainConfig.full}\n        />\n        <LabelWithValue\n          label=\"To\"\n          labelTooltip={releaseTooltips.to}\n          value={<MiddleEllipsisText hoverable>{address}</MiddleEllipsisText>}\n        />\n        <SpacedDivider />\n        <Typography variant=\"body1\" gutterBottom>\n          Fees\n        </Typography>\n        <TransactionFees\n          chain={chain}\n          currency={currency}\n          type={TxType.BURN}\n          hideButton={true}\n        />\n      </PaperContent>\n      <Divider />\n      <PaperContent darker topPadding bottomPadding>\n        <ActionButtonWrapper>\n          <ActionButton onClick={handleConfirm} disabled={releasingInitialized || amount<=0.01 || !validateAddress}>\n            {!walletConnected\n              ? \"Connect Wallet\"\n              : releasingInitialized\n              ? \"Confirming...\"\n              : \"Confirm\"}\n          </ActionButton>\n        </ActionButtonWrapper>\n      </PaperContent>\n    </>\n  );\n};\n","import {\n  OutlinedInputProps,\n  styled,\n  TextField,\n  TextFieldProps,\n} from \"@material-ui/core\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport React, { FunctionComponent } from \"react\";\n\nexport const useStyles = makeStyles((theme) => ({\n  root: {\n    fontSize: 13,\n    // border: `1px solid ${theme.palette.primary.main}`,\n    // borderRadius: 20,\n    // padding: 18,\n  },\n  input: {\n    paddingTop: 10,\n    fontSize: 13,\n  },\n}));\n\nexport const OutlinedTextField: FunctionComponent<TextFieldProps> = (props) => {\n  const { input, ...classes } = useStyles();\n  return (\n    <TextField\n      classes={classes}\n      variant=\"outlined\"\n      InputProps={\n        { notched: false, classes: { root: input } } as OutlinedInputProps\n      }\n      fullWidth\n      {...props}\n    />\n  );\n};\n\nexport const OutlinedTextFieldWrapper = styled(\"div\")({\n  minHeight: 75,\n});\n\nexport const BigOutlinedTextFieldWrapper = styled(\"div\")({\n  marginTop: 40,\n  marginBottom: 10,\n});\n\nexport const SmallOutlinedTextFieldWrapper = styled(\"div\")({\n  marginTop: 0,\n  marginBottom: 25,\n});\n","import { Divider, Fade, Typography } from \"@material-ui/core\";\nimport React, { FunctionComponent, useCallback, useMemo } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport {\n  ActionButton,\n  ActionButtonWrapper,\n} from \"../../../components/buttons/Buttons\";\nimport {\n  AssetDropdown,\n  AssetDropdownWrapper,\n} from \"../../../components/dropdowns/AssetDropdown\";\nimport { NumberFormatText } from \"../../../components/formatting/NumberFormatText\";\nimport {\n  OutlinedTextField,\n  BigOutlinedTextFieldWrapper,SmallOutlinedTextFieldWrapper\n} from \"../../../components/inputs/OutlinedTextField\";\nimport {\n  BigCurrencyInput,\n  BigCurrencyInputWrapper,\n} from \"../../../components/inputs/BigCurrencyInput\";\nimport { PaperContent } from \"../../../components/layout/Paper\";\nimport { Link } from \"../../../components/links/Links\";\nimport { CenteredProgress } from \"../../../components/progress/ProgressHelpers\";\nimport { TooltipWithIcon } from \"../../../components/tooltips/TooltipWithIcon\";\nimport {\n  AssetInfo,\n  LabelWithValue,\n} from \"../../../components/typography/TypographyHelpers\";\nimport { releaseChainClassMap } from \"../../../services/rentx\";\nimport {\n  getChainConfig,\n  getCurrencyConfig,\n  supportedBurnChains,\n  supportedReleaseCurrencies,\n  toReleasedCurrency,\n} from \"../../../utils/assetConfigs\";\nimport { useFetchFees } from \"../../fees/feesHooks\";\nimport { getTransactionFees } from \"../../fees/feesUtils\";\nimport { $renNetwork } from \"../../network/networkSlice\";\nimport { useRenNetworkTracker } from \"../../transactions/transactionsHooks\";\nimport {\n  isMinimalAmount,\n  TxConfigurationStepProps,\n  TxType,\n} from \"../../transactions/transactionsUtils\";\nimport { useSelectedChainWallet } from \"../../wallet/walletHooks\";\nimport {\n  $wallet,\n  setChain,\n  setWalletPickerOpened,\n} from \"../../wallet/walletSlice\";\nimport { getAssetBalance, useFetchBalances } from \"../../wallet/walletUtils\";\nimport {\n  $release,\n  setReleaseAddress,\n  setReleaseCurrency,\n  setReleaseAmount,\n} from \"../releaseSlice\";\nimport validate, { Network } from \"../releaseAddressValidator\";\n\nexport const ReleaseInitialStep: FunctionComponent<TxConfigurationStepProps> = ({\n  onNext,\n}) => {\n  const dispatch = useDispatch();\n  const { walletConnected } = useSelectedChainWallet();\n  const { chain, balances } = useSelector($wallet);\n  const network = useSelector($renNetwork);\n  const { currency, address, amount } = useSelector($release);\n  const balance = getAssetBalance(balances, currency);\n  useRenNetworkTracker(currency);\n  useFetchBalances(supportedReleaseCurrencies);\n  const { fees, pending } = useFetchFees(currency, TxType.BURN);\n \n\n  const handleChainChange = useCallback(\n    (event) => {\n      dispatch(setChain(event.target.value));\n    },\n    [dispatch]\n  );\n  const handleCurrencyChange = useCallback(\n    (event) => {\n      dispatch(setReleaseCurrency(event.target.value));\n    },\n    [dispatch]\n  );\n \n  const handleAddressChange = useCallback(\n    (event) => {\n      dispatch(setReleaseAddress(event.target.value));\n    },\n    [dispatch]\n  );\n  \n  const handleAmountChange = useCallback(\n    (event) => {\n      dispatch(setReleaseAmount(event.target.value));\n    },\n    [dispatch]\n  );\n\n  \n\n  const targetCurrency = toReleasedCurrency(currency);\n  const currencyConfig = getCurrencyConfig(currency);\n  const releaseCurrencyConfig = getCurrencyConfig(targetCurrency);\n  const { MainIcon } = releaseCurrencyConfig;\n  const releaseChainConfig = getChainConfig(releaseCurrencyConfig.sourceChain);\n  \n  const validateAddress = useMemo(() => {\n    // TODO: improve this\n    return validate(address, Network.mainnet)\n\n }, [releaseChainConfig.rentxName, network, address]);\n  \n  const basicCondition =\n    address &&\n    validateAddress &&\n    !pending;\n  const hasBalance = balance !== null;\n  let enabled;\n  if (walletConnected) {\n    enabled = basicCondition && amount>0.1; // TODO: also check balance here\n  } else {\n    enabled = basicCondition && amount>0.1;\n  }\n  const showMinimalAmountError =\n    walletConnected && !pending;\n\n  const handleNextStep = useCallback(() => {\n    if (!walletConnected) {\n      dispatch(setWalletPickerOpened(true));\n    }\n    if (onNext && basicCondition && hasBalance) {\n      onNext();\n    }\n  }, [dispatch, onNext, walletConnected, basicCondition, hasBalance]);\n  return (\n    <>\n      <PaperContent>\n        <AssetDropdownWrapper>\n          <AssetDropdown\n            label=\"Chain\"\n            mode=\"chain\"\n            available={supportedBurnChains}\n            value={chain}\n            onChange={handleChainChange}\n          />\n        </AssetDropdownWrapper>\n        <AssetDropdownWrapper>\n          <AssetDropdown\n            label=\"Asset\"\n            mode=\"send\"\n            available={supportedReleaseCurrencies}\n            balances={balances}\n            value={currency}\n            onChange={handleCurrencyChange}\n          />\n        </AssetDropdownWrapper>\n       \n        <BigOutlinedTextFieldWrapper>\n          <OutlinedTextField\n            error={!!address && !validateAddress}\n            placeholder={`Enter a Destination ${releaseChainConfig.full} Address`}\n            label=\"Releasing to\"\n            onChange={handleAddressChange}\n            value={address}\n          />\n        </BigOutlinedTextFieldWrapper>\n        <SmallOutlinedTextFieldWrapper>\n          <OutlinedTextField\n            error={!!address && !validateAddress}\n            placeholder={`Enter an Amount`}\n            label=\"Amount to Burn/Transfer\"\n            onChange={handleAmountChange}\n            \n\n          />\n        </SmallOutlinedTextFieldWrapper>\n      </PaperContent>\n      <Divider />\n      <PaperContent darker topPadding bottomPadding>\n        <ActionButtonWrapper>\n          <ActionButton\n            onClick={handleNextStep}\n            disabled={walletConnected ? !enabled : false}\n          >\n            {walletConnected ? \"Next\" : \"Connect Wallet\"}\n          </ActionButton>\n        </ActionButtonWrapper>\n      </PaperContent>\n    </>\n  );\n};\n","import {\n  Button,\n  ClickAwayListener,\n  Tooltip,\n  Typography,\n} from \"@material-ui/core\";\nimport React, { FunctionComponent } from \"react\";\nimport {\n  ActionButton,\n  ActionButtonWrapper,\n  ToggleIconButton,\n  ToggleIconButtonProps,\n} from \"../../../components/buttons/Buttons\";\nimport { PaperContent } from \"../../../components/layout/Paper\";\nimport {\n  NestedDrawer,\n  NestedDrawerActions,\n  NestedDrawerContent,\n  NestedDrawerWrapper,\n} from \"../../../components/modals/BridgeModal\";\n\ntype BrowserNotificationsDrawerProps = {\n  open: boolean;\n  onClose: () => void;\n  onEnable: () => void;\n};\n\nexport const BrowserNotificationsDrawer: FunctionComponent<BrowserNotificationsDrawerProps> = ({\n  open,\n  onClose,\n  onEnable,\n}) => {\n  return (\n    <NestedDrawer title=\" \" open={open} onClose={onClose}>\n      <NestedDrawerWrapper>\n        <NestedDrawerContent>\n          <PaperContent topPadding>\n            <Typography variant=\"h5\" align=\"center\" gutterBottom>\n              Enable browser notifications\n            </Typography>\n            <Typography\n              variant=\"subtitle1\"\n              align=\"center\"\n              color=\"textSecondary\"\n              gutterBottom\n            >\n              It will let you track transaction progress.\n            </Typography>\n          </PaperContent>\n        </NestedDrawerContent>\n        <NestedDrawerActions>\n          <PaperContent bottomPadding>\n            <ActionButtonWrapper>\n              <Button variant=\"text\" color=\"primary\" onClick={onClose}>\n                Do not enable\n              </Button>\n            </ActionButtonWrapper>\n            <ActionButtonWrapper>\n              <ActionButton onClick={onEnable}>\n                Enable Browser Notifications\n              </ActionButton>\n            </ActionButtonWrapper>\n          </PaperContent>\n        </NestedDrawerActions>\n      </NestedDrawerWrapper>\n    </NestedDrawer>\n  );\n};\n\ntype BrowserNotificationButtonProps = ToggleIconButtonProps & {\n  onTooltipClose: () => void;\n  tooltipOpened: boolean;\n};\n\nexport const BrowserNotificationButton: FunctionComponent<BrowserNotificationButtonProps> = ({\n  pressed,\n  onClick,\n  onTooltipClose,\n  tooltipOpened,\n}) => {\n  return (\n    <ClickAwayListener onClickAway={onTooltipClose}>\n      <Tooltip\n        onClose={onTooltipClose}\n        open={tooltipOpened}\n        disableFocusListener\n        disableHoverListener\n        disableTouchListener\n        title=\"Turn off browser notifications in your browser settings.\"\n      >\n        <span>\n          <ToggleIconButton\n            pressed={pressed}\n            variant=\"notifications\"\n            onClick={onClick}\n          />\n        </span>\n      </Tooltip>\n    </ClickAwayListener>\n  );\n};\n","import {\n  Button,\n  Divider,\n  ListItemIcon,\n  makeStyles,\n  MenuItem,\n  MenuItemProps,\n  Typography,\n} from \"@material-ui/core\";\nimport { GatewaySession } from \"@renproject/ren-tx\";\nimport classNames from \"classnames\";\nimport React, { FunctionComponent, useCallback, useState } from \"react\";\nimport {\n  ActionButton,\n  ActionButtonWrapper,\n  RedButton,\n} from \"../../../components/buttons/Buttons\";\nimport { CircleIcon } from \"../../../components/icons/IconHelpers\";\nimport {\n  AddIcon,\n  CustomSvgIconComponent,\n  DeleteIcon,\n  TxSettingsIcon,\n} from \"../../../components/icons/RenIcons\";\nimport {\n  OutlinedTextField,\n  OutlinedTextFieldWrapper,\n} from \"../../../components/inputs/OutlinedTextField\";\nimport { PaperContent } from \"../../../components/layout/Paper\";\nimport { externalLinkAttributes } from \"../../../components/links/Links\";\nimport {\n  BridgeModalTitle,\n  NestedDrawer,\n  NestedDrawerActions,\n  NestedDrawerContent,\n  NestedDrawerWrapper,\n} from \"../../../components/modals/BridgeModal\";\n\nconst useTransactionMenuItemStyles = makeStyles((theme) => ({\n  root: {\n    padding: \"8px 20px\",\n    fontSize: 12,\n  },\n  iconWrapper: {\n    minWidth: 32,\n  },\n}));\n\ntype TransactionMenuItemProps = MenuItemProps & {\n  Icon: CustomSvgIconComponent;\n};\n\nexport const TransactionMenuItem: FunctionComponent<TransactionMenuItemProps> = ({\n  onClick,\n  Icon,\n  children,\n  className,\n  button,\n  ...rest\n}) => {\n  const styles = useTransactionMenuItemStyles();\n  return (\n    <MenuItem\n      dense\n      onClick={onClick}\n      className={classNames(styles.root, className)}\n      {...rest}\n    >\n      <ListItemIcon className={styles.iconWrapper}>\n        <CircleIcon Icon={Icon} fontSize=\"small\" variant=\"outlined\" />\n      </ListItemIcon>\n      <Typography variant=\"inherit\">{children}</Typography>\n    </MenuItem>\n  );\n};\n\nconst useTransactionMenuStyles = makeStyles((theme) => ({\n  root: {\n    fontSize: 12,\n  },\n  modalTitle: {\n    padding: `12px 20px`,\n  },\n  titleIconWrapper: {\n    minWidth: 32,\n  },\n  menuItems: {\n    paddingTop: 6,\n    minHeight: 150,\n  },\n  transferId: {\n    paddingBottom: 10,\n  },\n}));\n\nexport type UpdateTxFn = (amount: number, vOut: number, txHash: string) => void;\n\ntype TransactionMenuProps = {\n  open: boolean;\n  onClose: () => void;\n  onDeleteTx: () => void;\n  onUpdateTx?: UpdateTxFn;\n  tx: GatewaySession;\n};\n\nexport const TransactionMenu: FunctionComponent<TransactionMenuProps> = ({\n  open,\n  onClose,\n  onDeleteTx,\n  onUpdateTx,\n  tx,\n}) => {\n  const styles = useTransactionMenuStyles();\n  const handleClose = useCallback(() => {\n    if (onClose) {\n      onClose();\n    }\n  }, [onClose]);\n  const [confirmOpen, setConfirmOpen] = useState(false);\n  const handleConfirmClose = useCallback(() => {\n    setConfirmOpen(false);\n  }, []);\n  const handleDeleteWithConfirm = useCallback(() => {\n    setConfirmOpen(true);\n  }, []);\n\n  const [updateOpen, setUpdateOpen] = useState(false);\n  const handleUpdateClose = useCallback(() => {\n    setUpdateOpen(false);\n  }, []);\n  const handleUpdateOpen = useCallback(() => {\n    setUpdateOpen(true);\n  }, []);\n\n  return (\n    <>\n      <NestedDrawer open={open} onClose={handleClose} className={styles.root}>\n        <BridgeModalTitle className={styles.modalTitle} onClose={handleClose}>\n          <ListItemIcon className={styles.titleIconWrapper}>\n            <CircleIcon\n              Icon={TxSettingsIcon}\n              fontSize=\"small\"\n              variant=\"solid\"\n            />\n          </ListItemIcon>\n          <Typography variant=\"inherit\">Transaction Menu</Typography>\n        </BridgeModalTitle>\n        <NestedDrawerWrapper>\n          <NestedDrawerContent>\n            <div className={styles.menuItems}>\n              <TransactionMenuItem Icon={AddIcon} onClick={handleUpdateOpen}>\n                Insert/update transaction\n              </TransactionMenuItem>\n              <TransactionMenuItem\n                Icon={DeleteIcon}\n                onClick={handleDeleteWithConfirm}\n              >\n                Delete transaction\n              </TransactionMenuItem>\n            </div>\n          </NestedDrawerContent>\n          <NestedDrawerActions>\n            <PaperContent paddingVariant=\"medium\" className={styles.transferId}>\n              <Typography variant=\"inherit\">Transfer ID: {tx.id}</Typography>\n            </PaperContent>\n            <Divider />\n            <PaperContent bottomPadding topPadding paddingVariant=\"medium\">\n              <Button\n                variant=\"outlined\"\n                size=\"small\"\n                href=\"https://renprotocol.typeform.com/to/YdmFyB\"\n                {...externalLinkAttributes}\n              >\n                Report an Issue\n              </Button>\n            </PaperContent>\n          </NestedDrawerActions>\n        </NestedDrawerWrapper>\n      </NestedDrawer>\n      <ConfirmTransactionDeletionDrawer\n        open={confirmOpen}\n        onClose={handleConfirmClose as any}\n        onDeleteTx={onDeleteTx}\n      />\n      {onUpdateTx && (\n        <UpdateTransactionDrawer\n          open={updateOpen}\n          onClose={handleUpdateClose}\n          onUpdateTx={onUpdateTx}\n        />\n      )}\n    </>\n  );\n};\n\ntype ConfirmTransactionDeletionDrawerProps = {\n  open: boolean;\n  onClose: () => void;\n  onDeleteTx: () => void;\n};\n\nexport const ConfirmTransactionDeletionDrawer: FunctionComponent<ConfirmTransactionDeletionDrawerProps> = ({\n  open,\n  onClose,\n  onDeleteTx,\n}) => {\n  const [deleting, setDeleting] = useState(false);\n  const handleDeleteTx = useCallback(() => {\n    setDeleting(true);\n    onDeleteTx();\n  }, [onDeleteTx]);\n  return (\n    <NestedDrawer title=\"Delete a Transaction\" open={open} onClose={onClose}>\n      <NestedDrawerWrapper>\n        <NestedDrawerContent>\n          <PaperContent topPadding>\n            <Typography variant=\"h5\" align=\"center\" gutterBottom>\n              Are you sure?\n            </Typography>\n            <Typography\n              variant=\"body2\"\n              align=\"center\"\n              color=\"textSecondary\"\n              gutterBottom\n            >\n              If you have already sent your assets you will lose them forever if\n              you remove the transaction.\n            </Typography>\n          </PaperContent>\n        </NestedDrawerContent>\n        <NestedDrawerActions>\n          <PaperContent bottomPadding>\n            <ActionButtonWrapper>\n              <RedButton\n                variant=\"text\"\n                color=\"inherit\"\n                startIcon={<DeleteIcon />}\n                onClick={handleDeleteTx}\n                disabled={deleting}\n              >\n                {deleting ? \"Removing...\" : \"Remove\"} Transaction\n              </RedButton>\n            </ActionButtonWrapper>\n            <ActionButtonWrapper>\n              <ActionButton onClick={onClose} disabled={deleting}>\n                Cancel\n              </ActionButton>\n            </ActionButtonWrapper>\n          </PaperContent>\n        </NestedDrawerActions>\n      </NestedDrawerWrapper>\n    </NestedDrawer>\n  );\n};\n\ntype UpdateTransactionDrawerProps = {\n  open: boolean;\n  onClose: () => void;\n  onUpdateTx: UpdateTxFn;\n};\n\nconst isValidInteger = (amount: string) => {\n  return Number.isInteger(Number(amount));\n};\n\nexport const UpdateTransactionDrawer: FunctionComponent<UpdateTransactionDrawerProps> = ({\n  open,\n  onClose,\n  onUpdateTx,\n}) => {\n  const [amount, setAmount] = useState(\"\");\n  const [vout, setVout] = useState(\"\");\n  const [hash, setHash] = useState(\"\");\n  const [updating, setUpdating] = useState(false);\n  const valid = amount && vout && hash;\n  const handleAmountChange = useCallback((event) => {\n    const newValue = event.target.value;\n    if (isValidInteger(newValue)) {\n      setAmount(newValue);\n    }\n  }, []);\n  const handleVoutChange = useCallback((event) => {\n    const newValue = event.target.value;\n    if (isValidInteger(newValue)) {\n      setVout(newValue);\n    }\n  }, []);\n  const handleHashChange = useCallback((event) => {\n    setHash(event.target.value);\n  }, []);\n\n  const handleUpdateTx = useCallback(() => {\n    setUpdating(true);\n    onUpdateTx(Number(amount), Number(vout), hash);\n  }, [onUpdateTx, hash, vout, amount]);\n\n  return (\n    <NestedDrawer title=\"Update Transaction Hash\" open={open} onClose={onClose}>\n      <NestedDrawerWrapper>\n        <NestedDrawerContent>\n          <PaperContent topPadding>\n            <OutlinedTextFieldWrapper>\n              <OutlinedTextField\n                label=\"Amount (sats)\"\n                value={amount}\n                onChange={handleAmountChange}\n                placeholder=\"Enter amount in sats\"\n              />\n            </OutlinedTextFieldWrapper>\n            <OutlinedTextFieldWrapper>\n              <OutlinedTextField\n                label=\"Transaction Hash\"\n                value={hash}\n                onChange={handleHashChange}\n                placeholder=\"Enter transaction hash\"\n              />\n            </OutlinedTextFieldWrapper>\n            <OutlinedTextFieldWrapper>\n              <OutlinedTextField\n                label=\"vOut\"\n                value={vout}\n                onChange={handleVoutChange}\n                placeholder=\"Enter transaction vOut\"\n              />\n            </OutlinedTextFieldWrapper>\n          </PaperContent>\n        </NestedDrawerContent>\n        <NestedDrawerActions>\n          <PaperContent bottomPadding>\n            <ActionButtonWrapper>\n              <RedButton\n                variant=\"text\"\n                color=\"inherit\"\n                onClick={handleUpdateTx}\n                disabled={updating || !valid}\n              >\n                {updating ? \"Updating...\" : \"Update\"} transaction\n              </RedButton>\n            </ActionButtonWrapper>\n            <ActionButtonWrapper>\n              <ActionButton onClick={onClose} disabled={updating}>\n                Cancel\n              </ActionButton>\n            </ActionButtonWrapper>\n          </PaperContent>\n        </NestedDrawerActions>\n      </NestedDrawerWrapper>\n    </NestedDrawer>\n  );\n};\n","import { useMultiwallet } from \"@renproject/multiwallet-ui\";\nimport {\n  burnMachine,\n  BurnMachineContext,\n  BurnMachineEvent,\n  BurnMachineSchema,\n  GatewaySession,\n} from \"@renproject/ren-tx\";\nimport { useMachine } from \"@xstate/react\";\nimport { useCallback, useEffect } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { Interpreter, State } from \"xstate\";\nimport { env } from \"../../constants/environmentVariables\";\nimport { db } from \"../../services/database/database\";\nimport { getRenJs } from \"../../services/renJs\";\nimport { burnChainMap, releaseChainMap } from \"../../services/rentx\";\nimport { $renNetwork } from \"../network/networkSlice\";\nimport { updateTransaction } from \"../transactions/transactionsSlice\";\nimport { cloneTx } from \"../transactions/transactionsUtils\";\n\nexport const useBurnMachine = (burnTransaction: GatewaySession) => {\n  const tx = cloneTx(burnTransaction);\n  const { enabledChains } = useMultiwallet();\n  const network = useSelector($renNetwork);\n  const providers = Object.entries(enabledChains).reduce(\n    (c, n) => ({\n      ...c,\n      [n[0]]: n[1].provider,\n    }),\n    {}\n  );\n  const machineHook = useMachine(burnMachine, {\n    context: {\n      tx,\n      providers,\n      sdk: getRenJs(network),\n      fromChainMap: burnChainMap,\n      toChainMap: releaseChainMap,\n      // If we already have a transaction, we need to autoSubmit\n      // to check the tx status\n      autoSubmit: !!Object.values(burnTransaction.transactions)[0],\n    },\n    devTools: env.XSTATE_DEVTOOLS,\n  });\n\n  useReleaseTransactionPersistence(machineHook[2]);\n\n  return machineHook;\n};\n\nexport type BurnMachineSchemaState = keyof BurnMachineSchema[\"states\"];\n\nexport const useReleaseTransactionPersistence = (\n  service: Interpreter<BurnMachineContext, any, BurnMachineEvent>\n) => {\n\n};\n","import { Divider, IconButton, } from '@material-ui/core'\nimport { BurnMachineSchema, GatewaySession } from '@renproject/ren-tx'\nimport React, {\n  FunctionComponent,\n  useCallback,\n  useEffect,\n  useState,\n} from 'react'\nimport { useDispatch, useSelector } from 'react-redux'\nimport { RouteComponentProps, useHistory, useLocation } from 'react-router-dom'\nimport {\n  ActionButton,\n  ToggleIconButton,\n} from '../../../components/buttons/Buttons'\nimport { NumberFormatText } from '../../../components/formatting/NumberFormatText'\nimport { BackArrowIcon } from '../../../components/icons/RenIcons'\nimport {\n  CenteringSpacedBox,\n  PaperSpacerWrapper,\n} from '../../../components/layout/LayoutHelpers'\nimport {\n  PaperActions,\n  PaperContent,\n  PaperHeader,\n  PaperNav,\n  PaperTitle,\n} from '../../../components/layout/Paper'\nimport {\n  LabelWithValue,\n  MiddleEllipsisText,\n  SpacedDivider,\n} from '../../../components/typography/TypographyHelpers'\nimport { Debug } from '../../../components/utils/Debug'\nimport { WalletStatus } from '../../../components/utils/types'\nimport { WalletConnectionProgress } from '../../../components/wallet/WalletHelpers'\nimport { paths } from '../../../pages/routes'\nimport { usePageTitle, usePaperTitle } from '../../../providers/TitleProviders'\nimport { getChainConfigByRentxName } from '../../../utils/assetConfigs'\n\nimport {\n  BrowserNotificationButton,\n  BrowserNotificationsDrawer,\n} from '../../notifications/components/NotificationsHelpers'\nimport {\n  useBrowserNotifications,\n  useBrowserNotificationsConfirmation,\n} from '../../notifications/notificationsUtils'\nimport { TransactionFees } from '../../transactions/components/TransactionFees'\nimport { TransactionMenu } from '../../transactions/components/TransactionMenu'\nimport { ProgressStatus } from '../../transactions/components/TransactionsHelpers'\nimport {\n  useSetCurrentTxId,\n  useTransactionDeletion,\n} from '../../transactions/transactionsHooks'\nimport {\n  createTxQueryString,\n  getTxPageTitle,\n  TxType,\n  useTxParam,\n} from '../../transactions/transactionsUtils'\nimport {\n  useAuthRequired,\n  useSelectedChainWallet,\n} from '../../wallet/walletHooks'\nimport {\n  $chain,\n  setChain,\n  setWalletPickerOpened,\n} from '../../wallet/walletSlice'\nimport {\n  ReleaseCompletedStatus,\n  ReleaseProgressStatus,\n} from '../components/ReleaseStatuses'\nimport { useBurnMachine } from '../releaseHooks'\nimport { getBurnAndReleaseParams } from '../releaseUtils'\n\nexport const ReleaseProcessStep: FunctionComponent<RouteComponentProps> = ({\n  history,\n  location,\n}) => {\n  useAuthRequired(true);\n  const dispatch = useDispatch();\n  const { status } = useSelectedChainWallet();\n  const walletConnected = status === WalletStatus.CONNECTED;\n  const chain = useSelector($chain);\n  const [reloading, setReloading] = useState(false);\n  const { tx: parsedTx, txState } = useTxParam();\n  const [tx, setTx] = useState<GatewaySession>(parsedTx as GatewaySession); // TODO Partial<GatewaySession>\n  useSetCurrentTxId(tx.id);\n\n  usePageTitle(getTxPageTitle(tx));\n  const [paperTitle, setPaperTitle] = usePaperTitle();\n  useEffect(() => {\n    if (!walletConnected) {\n      setPaperTitle(\"Resume Transaction\");\n    }\n  }, [walletConnected, setPaperTitle]);\n\n  useEffect(() => {\n    if (txState?.reloadTx) {\n      setTx(parsedTx as GatewaySession);\n      setReloading(true);\n      history.replace({ ...location, state: undefined });\n      setTimeout(() => {\n        setReloading(false);\n      }, 1000);\n    }\n  }, [history, location, txState, parsedTx]);\n\n  const handlePreviousStepClick = useCallback(() => {\n    history.goBack();\n  }, [history]);\n  const sourceChain = parsedTx?.sourceChain;\n\n  const {\n    menuOpened,\n    handleMenuOpen,\n    handleMenuClose,\n    handleDeleteTx,\n  } = useTransactionDeletion(tx);\n\n  const {\n    modalOpened,\n    handleModalOpen,\n    handleModalClose,\n    tooltipOpened,\n    handleTooltipClose,\n  } = useBrowserNotificationsConfirmation();\n\n  const { enabled, handleEnable } = useBrowserNotifications(handleModalClose);\n\n  useEffect(() => {\n    if (sourceChain) {\n      const bridgeChainConfig = getChainConfigByRentxName(sourceChain);\n      dispatch(setChain(bridgeChainConfig.symbol));\n    }\n  }, [dispatch, sourceChain]);\n\n  const handleWalletPickerOpen = useCallback(() => {\n    dispatch(setWalletPickerOpened(true));\n  }, [dispatch]);\n\n  const {\n    burnCurrencyConfig,\n    burnChainConfig,\n    releaseCurrencyConfig,\n  } = getBurnAndReleaseParams(tx);\n  \n\n  return (\n    <>\n      <PaperHeader>\n        <PaperNav>\n          {txState?.newTx && (\n            <IconButton onClick={handlePreviousStepClick}>\n              <BackArrowIcon />\n            </IconButton>\n          )}\n        </PaperNav>\n        <PaperTitle>{paperTitle}</PaperTitle>\n        <PaperActions>\n          <BrowserNotificationButton\n            pressed={enabled}\n            onClick={handleModalOpen}\n            tooltipOpened={tooltipOpened}\n            onTooltipClose={handleTooltipClose}\n          />\n          <ToggleIconButton\n            variant=\"settings\"\n            onClick={handleMenuOpen}\n            pressed={menuOpened}\n          />\n        </PaperActions>\n      </PaperHeader>\n      <PaperContent bottomPadding>\n        {reloading && <ProgressStatus processing />}\n        {walletConnected && !reloading && <ReleaseTransactionStatus tx={tx} />}\n        {!walletConnected && (\n          <>\n            <PaperSpacerWrapper>\n              <CenteringSpacedBox>\n                <WalletConnectionProgress />\n              </CenteringSpacedBox>\n            </PaperSpacerWrapper>\n            <ActionButton onClick={handleWalletPickerOpen}>\n              Connect Wallet\n            </ActionButton>\n          </>\n        )}\n      </PaperContent>\n      {walletConnected && (\n        <>\n          <Divider />\n          <PaperContent darker topPadding bottomPadding>\n            <LabelWithValue\n              label=\"Releasing\"\n              value={\n                <NumberFormatText\n                  value={0}\n                  spacedSuffix={burnCurrencyConfig.short}\n                />\n              }\n              valueEquivalent={\n                <NumberFormatText\n                  value={0}\n                  prefix=\"$\"\n                  decimalScale={2}\n                  fixedDecimalScale\n                />\n              }\n            />\n            <LabelWithValue label=\"From\" value={burnChainConfig.full} />\n            <LabelWithValue\n              label=\"To\"\n              value={\n                <MiddleEllipsisText hoverable>\n                  {tx.destAddress}\n                </MiddleEllipsisText>\n              }\n            />\n            <SpacedDivider />\n            <TransactionFees\n              chain={chain}\n              currency={burnCurrencyConfig.symbol}\n              type={TxType.BURN}\n            />\n            <Debug it={{ parsedTx, txState: txState }} />\n          </PaperContent>\n        </>\n      )}\n      <BrowserNotificationsDrawer\n        open={modalOpened}\n        onClose={handleModalClose}\n        onEnable={handleEnable}\n      />\n      <TransactionMenu\n        tx={tx}\n        open={menuOpened}\n        onClose={handleMenuClose}\n        onDeleteTx={handleDeleteTx}\n      />\n      <Debug it={{ tooltipOpened, parsedTx, txState: txState }} />\n    </>\n  );\n};\n\ntype ReleaseTransactionStatusProps = {\n  tx: GatewaySession;\n};\n\nconst ReleaseTransactionStatus: FunctionComponent<ReleaseTransactionStatusProps> = ({\n  tx,\n}) => {\n  const history = useHistory();\n  const location = useLocation();\n  const [current, send, service] = useBurnMachine(tx);\n  useEffect(\n    () => () => {\n      console.info(\"stopping tx machine\");\n      service.stop();\n    },\n    [service]\n  );\n\n  const [submitting, setSubmitting] = useState(false);\n  const [timeoutError, setTimeoutError] = useState(false);\n  const handleSubmit = useCallback(() => {\n    setSubmitting(true);\n    send({ type: \"SUBMIT\" });\n  }, [send]);\n  const handleReload = useCallback(() => {\n    history.replace({\n      ...location,\n      state: {\n        txState: {\n          reloadTx: true,\n        },\n      },\n    });\n  }, [history, location]);\n\n  useEffect(() => {\n    if (current.value === \"srcSettling\") {\n      history.replace({\n        pathname: paths.RELEASE_TRANSACTION,\n        search: \"?\" + createTxQueryString(current.context.tx),\n      });\n    }\n  }, [history, current.value, current.context.tx]);\n\n  // const forceState = \"errorReleasing\";\n  const state = current.value as keyof BurnMachineSchema[\"states\"];\n  console.debug(tx.id, state);\n  switch (state) {\n    // switch (forceState as keyof BurnMachineSchema[\"states\"]) {\n    case \"created\":\n      return (\n        <ReleaseProgressStatus\n          tx={tx}\n          onSubmit={handleSubmit}\n          submitting={submitting}\n          submittingError={timeoutError}\n          onReload={handleReload}\n        />\n      );\n    case \"errorBurning\":\n    case \"errorReleasing\":\n    case \"srcSettling\":\n      return (\n        <ReleaseProgressStatus\n          tx={current.context.tx}\n          pending\n          generalError={state !== \"srcSettling\"}\n          onReload={handleReload}\n        />\n      );\n    case \"srcConfirmed\":\n      return <ProgressStatus reason=\"Submitting to RenVM\" />;\n    case \"accepted\":\n      return <ProgressStatus reason=\"Releasing from RenVM\" />;\n    case \"destInitiated\":\n      return <ReleaseCompletedStatus tx={current.context.tx} />;\n    default:\n      return <ProgressStatus />;\n  }\n};\n","import React, { FunctionComponent, useCallback, useState } from 'react'\nimport { RouteComponentProps } from 'react-router'\nimport { Route } from 'react-router-dom'\nimport { paths } from '../../pages/routes'\nimport { usePageTitle } from '../../providers/TitleProviders'\nimport { TransactionTypeTabs } from '../transactions/components/TransactionTypeTabs'\nimport { TxConfigurationStep } from '../transactions/transactionsUtils'\nimport { ReleaseFeesStep } from './steps/ReleaseFeesStep'\nimport { ReleaseInitialStep } from './steps/ReleaseInitialStep'\nimport { ReleaseProcessStep } from './steps/ReleaseProcessStep'\n\nconst ReleaseConfiguration: FunctionComponent<RouteComponentProps> = () => {\n  const [step, setStep] = useState(TxConfigurationStep.INITIAL);\n  const onInitialNext = useCallback(() => {\n    setStep(TxConfigurationStep.FEES);\n  }, []);\n  const onFeesPrev = useCallback(() => {\n    setStep(TxConfigurationStep.INITIAL);\n  }, []);\n\n  return (\n    <>\n      {step === TxConfigurationStep.INITIAL && (\n        <>\n          <TransactionTypeTabs />\n          <ReleaseInitialStep onNext={onInitialNext} />\n        </>\n      )}\n      {step === TxConfigurationStep.FEES && (\n        <ReleaseFeesStep onPrev={onFeesPrev} />\n      )}\n    </>\n  );\n};\n\nexport const ReleaseFlow: FunctionComponent = () => {\n  usePageTitle(\"Releasing\");\n  return (\n    <>\n      <Route exact path={paths.RELEASE} component={ReleaseConfiguration} />\n      <Route\n        exact\n        path={paths.RELEASE_TRANSACTION}\n        component={ReleaseProcessStep}\n      />\n    </>\n  );\n};\n","import { RenNetwork } from \"@renproject/interfaces\";\nimport queryString from \"query-string\";\nimport { useEffect } from \"react\";\nimport { useDispatch } from \"react-redux\";\nimport { useLocation } from \"react-router-dom\";\nimport { setRenNetwork } from \"./networkSlice\";\n\nexport const supportedParamNetworks = [\n  RenNetwork.Mainnet,\n  RenNetwork.Testnet,\n  RenNetwork.TestnetVDot3,\n  RenNetwork.MainnetVDot3,\n];\n\nexport const useSetNetworkFromParam = () => {\n  const location = useLocation();\n  const dispatch = useDispatch();\n  const parsed = queryString.parse(location.search);\n\n  useEffect(() => {\n    const network = parsed.network as RenNetwork;\n    if (network) {\n      if (supportedParamNetworks.indexOf(network) > -1)\n        dispatch(setRenNetwork(parsed.network as RenNetwork));\n    }\n  }, [dispatch, parsed.network]);\n};\n","import {\n  Box,\n  TablePagination,\n  TablePaginationProps,\n  useTheme,\n} from \"@material-ui/core\";\nimport IconButton from \"@material-ui/core/IconButton\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport FirstPageIcon from \"@material-ui/icons/FirstPage\";\nimport KeyboardArrowLeft from \"@material-ui/icons/KeyboardArrowLeft\";\nimport KeyboardArrowRight from \"@material-ui/icons/KeyboardArrowRight\";\nimport LastPageIcon from \"@material-ui/icons/LastPage\";\nimport React, { FunctionComponent } from \"react\";\nimport { NavigateNextIcon, NavigatePrevIcon } from \"../icons/RenIcons\";\n\nconst useSimplePaginationActionsStyles = makeStyles((theme) => ({\n  root: {\n    flexShrink: 0,\n    marginLeft: theme.spacing(2.5),\n  },\n  button: {\n    color: theme.palette.common.black,\n  },\n}));\n\ntype TablePaginationActionsProps = {\n  count: number;\n  page: number;\n  rowsPerPage: number;\n  onChangePage: (\n    event: React.MouseEvent<HTMLButtonElement>,\n    newPage: number\n  ) => void;\n};\n\nfunction SimplePaginationActions(props: TablePaginationActionsProps) {\n  const styles = useSimplePaginationActionsStyles();\n  const theme = useTheme();\n  const { count, page, rowsPerPage, onChangePage } = props;\n\n  const handleFirstPageButtonClick = (\n    event: React.MouseEvent<HTMLButtonElement>\n  ) => {\n    onChangePage(event, 0);\n  };\n\n  const handleBackButtonClick = (\n    event: React.MouseEvent<HTMLButtonElement>\n  ) => {\n    onChangePage(event, page - 1);\n  };\n\n  const handleNextButtonClick = (\n    event: React.MouseEvent<HTMLButtonElement>\n  ) => {\n    onChangePage(event, page + 1);\n  };\n\n  const handleLastPageButtonClick = (\n    event: React.MouseEvent<HTMLButtonElement>\n  ) => {\n    onChangePage(event, Math.max(0, Math.ceil(count / rowsPerPage) - 1));\n  };\n\n  return (\n    <div className={styles.root}>\n      <IconButton\n        className={styles.button}\n        onClick={handleFirstPageButtonClick}\n        disabled={page === 0}\n        aria-label=\"first page\"\n      >\n        {theme.direction === \"rtl\" ? <LastPageIcon /> : <FirstPageIcon />}\n      </IconButton>\n      <IconButton\n        className={styles.button}\n        onClick={handleBackButtonClick}\n        disabled={page === 0}\n        aria-label=\"previous page\"\n      >\n        {theme.direction === \"rtl\" ? (\n          <KeyboardArrowRight />\n        ) : (\n          <KeyboardArrowLeft />\n        )}\n      </IconButton>\n      <IconButton\n        className={styles.button}\n        onClick={handleNextButtonClick}\n        disabled={page >= Math.ceil(count / rowsPerPage) - 1}\n        aria-label=\"next page\"\n      >\n        {theme.direction === \"rtl\" ? (\n          <KeyboardArrowLeft />\n        ) : (\n          <KeyboardArrowRight />\n        )}\n      </IconButton>\n      <IconButton\n        className={styles.button}\n        onClick={handleLastPageButtonClick}\n        disabled={page >= Math.ceil(count / rowsPerPage) - 1}\n        aria-label=\"last page\"\n      >\n        {theme.direction === \"rtl\" ? <FirstPageIcon /> : <LastPageIcon />}\n      </IconButton>\n    </div>\n  );\n}\n\nconst useSimplestPaginationActionsStyles = makeStyles((theme) => ({\n  root: {\n    flexShrink: 0,\n  },\n  button: {\n    padding: 1,\n    fontSize: 16,\n    marginTop: -3,\n    color: theme.palette.common.black,\n  },\n}));\n\nfunction SimplestPaginationActions(props: TablePaginationActionsProps) {\n  const styles = useSimplestPaginationActionsStyles();\n  const theme = useTheme();\n  const { count, page, rowsPerPage, onChangePage } = props;\n\n  const handleBackButtonClick = (\n    event: React.MouseEvent<HTMLButtonElement>\n  ) => {\n    onChangePage(event, page - 1);\n  };\n\n  const handleNextButtonClick = (\n    event: React.MouseEvent<HTMLButtonElement>\n  ) => {\n    onChangePage(event, page + 1);\n  };\n\n  return (\n    <div className={styles.root}>\n      <IconButton\n        className={styles.button}\n        onClick={handleBackButtonClick}\n        disabled={page === 0}\n        aria-label=\"previous page\"\n      >\n        {theme.direction === \"rtl\" ? (\n          <NavigateNextIcon fontSize=\"inherit\" />\n        ) : (\n          <NavigatePrevIcon fontSize=\"inherit\" />\n        )}\n      </IconButton>\n      <IconButton\n        className={styles.button}\n        onClick={handleNextButtonClick}\n        disabled={page >= Math.ceil(count / rowsPerPage) - 1}\n        aria-label=\"next page\"\n      >\n        {theme.direction === \"rtl\" ? (\n          <NavigatePrevIcon fontSize=\"inherit\" />\n        ) : (\n          <NavigateNextIcon fontSize=\"inherit\" />\n        )}\n      </IconButton>\n    </div>\n  );\n}\n\nconst useSimplePaginationStyles = makeStyles((theme) => ({\n  toolbar: {\n    display: \"flex\",\n    justifyContent: \"space-between\",\n    minHeight: 24,\n    paddingRight: 0,\n    paddingLeft: 0,\n    \"&:nth-child(2)\": {\n      display: \"none\",\n    },\n  },\n  spacer: {\n    display: \"none\",\n  },\n  caption: {\n    fontSize: 14,\n    marginRight: 2,\n  },\n}));\n\nexport const SimplePagination: FunctionComponent<TablePaginationProps> = (\n  props\n) => {\n  const classes = useSimplePaginationStyles();\n  return (\n    <TablePagination\n      component={Box}\n      classes={classes}\n      rowsPerPageOptions={[4]}\n      ActionsComponent={SimplePaginationActions}\n      {...props}\n    />\n  );\n};\n\nconst simplestDisplayedRows = ({\n  count,\n  page,\n}: {\n  count: number;\n  page: number;\n}) => `${page + 1} of ${count}`;\n\nconst useSimplestPaginationStyles = makeStyles((theme) => ({\n  toolbar: {\n    display: \"inline-flex\",\n    justifyContent: \"space-between\",\n    minHeight: 16,\n    paddingRight: 0,\n    paddingLeft: 0,\n    \"&:nth-child(2)\": {\n      display: \"none\",\n    },\n  },\n  spacer: {\n    display: \"none\",\n  },\n  caption: {\n    fontSize: 12,\n  },\n}));\n\nexport const SimplestPagination: FunctionComponent<TablePaginationProps> = ({\n  rowsPerPage,\n  ...props\n}) => {\n  const classes = useSimplestPaginationStyles();\n  return (\n    <TablePagination\n      component={Box}\n      classes={classes}\n      rowsPerPage={rowsPerPage}\n      rowsPerPageOptions={[rowsPerPage]}\n      labelRowsPerPage={<></>}\n      labelDisplayedRows={simplestDisplayedRows}\n      ActionsComponent={SimplestPaginationActions}\n      {...props}\n    />\n  );\n};\n\nconst useShowEntryStyles = makeStyles({\n  show: {},\n  hide: {\n    display: \"none\",\n  },\n});\n\ntype ShowEntryProps = {\n  when: boolean;\n};\n\nexport const ShowEntry: FunctionComponent<ShowEntryProps> = ({\n  when,\n  children,\n}) => {\n  const styles = useShowEntryStyles();\n  return <div className={when ? styles.show : styles.hide}>{children}</div>;\n};\n","import { Chip, styled, Typography } from \"@material-ui/core\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport React, { FunctionComponent, useCallback, useState } from \"react\";\nimport { TxEntryStatus } from \"../../features/transactions/transactionsUtils\";\nimport { BridgeChain } from \"../../utils/assetConfigs\";\nimport { SmallActionButton } from \"../buttons/Buttons\";\nimport { Link } from \"../links/Links\";\nimport { SimplePagination } from \"../pagination/SimplePagination\";\nimport { TransactionStatusIndicator } from \"../progress/ProgressHelpers\";\nimport { TransactionStatusType } from \"../utils/types\";\n\ntype TransactionType = \"mint\" | \"release\";\n\nexport type Transaction = {\n  date: string;\n  time: string;\n  type: TransactionType;\n  status: TransactionStatusType;\n};\n\nconst standardPaddings = {\n  paddingLeft: 30,\n  paddingRight: 30,\n};\n\nconst useTransactionsHeaderStyles = makeStyles((theme) => ({\n  root: {\n    ...standardPaddings,\n    paddingTop: 20,\n    background: theme.customColors.greyHeaderBackground,\n    display: \"flex\",\n    justifyContent: \"space-between\",\n    alignItems: \"center\",\n  },\n  header: {},\n  actions: {\n    display: \"flex\",\n    alignItems: \"center\",\n  },\n}));\n\nexport const TransactionsContent = styled(\"div\")(({ theme }) => ({\n  ...standardPaddings,\n}));\n\ntype TransactionsHeaderProps = {\n  title?: string;\n};\n\nexport const TransactionsHeader: FunctionComponent<TransactionsHeaderProps> = ({\n  title,\n  children,\n}) => {\n  const styles = useTransactionsHeaderStyles();\n  return (\n    <div className={styles.root}>\n      <Typography variant=\"h6\">{title}</Typography>\n      <div className={styles.actions}>{children}</div>\n    </div>\n  );\n};\n\nconst useTransactionsStatusHeaderStyles = makeStyles((theme) => ({\n  root: {\n    ...standardPaddings,\n    paddingTop: 12,\n    paddingBottom: 6,\n    background: theme.customColors.greyHeaderBackground,\n    borderBottom: `1px solid ${theme.palette.divider}`,\n  },\n  title: {\n    fontWeight: theme.typography.fontWeightBold,\n    lineHeight: 1.2,\n  },\n}));\n\nexport const TransactionsStatusHeader: FunctionComponent<TransactionsHeaderProps> = ({\n  title,\n}) => {\n  const styles = useTransactionsStatusHeaderStyles();\n  return (\n    <div className={styles.root}>\n      {title && (\n        <Typography variant=\"overline\" className={styles.title}>\n          {title}\n        </Typography>\n      )}\n    </div>\n  );\n};\n\nexport const TransactionsPaginationWrapper = styled(\"div\")(({ theme }) => ({\n  ...standardPaddings,\n  paddingTop: 10,\n  paddingBottom: 10,\n  backgroundColor: theme.customColors.greyHeaderBackground,\n}));\n\nexport const useTransactionEntryStyles = makeStyles((theme) => ({\n  root: {\n    ...standardPaddings,\n    paddingTop: 18,\n    paddingBottom: 18,\n    borderBottom: `1px solid ${theme.palette.divider}`,\n    display: \"flex\",\n    justifyContent: \"space-between\",\n    alignItems: \"center\",\n  },\n  details: {\n    alignSelf: \"flex-start\",\n  },\n  datetime: {},\n  date: {\n    marginRight: 6,\n  },\n  time: {\n    marginRight: 32,\n  },\n  multiple: {\n    display: \"inline-flex\",\n    marginRight: 6,\n  },\n  multipleLabel: {\n    marginRight: 16,\n  },\n  multiplePagination: {},\n  description: {\n    marginTop: 3,\n    marginBottom: 3,\n  },\n  title: {\n    fontSize: 15,\n  },\n  links: {},\n  expired: {\n    fontSize: 14,\n    display: \"inline-block\",\n    marginRight: 8,\n  },\n  link: {\n    fontSize: 14,\n    display: \"inline-block\",\n    marginRight: 24,\n    \"&:last-child\": {\n      marginRight: 0,\n    },\n  },\n  tooltipIcon: {\n    fontSize: 15,\n    marginBottom: -2,\n    marginRight: 2,\n  },\n  actions: {\n    flexGrow: 1,\n    paddingRight: 20,\n    display: \"flex\",\n    justifyContent: \"flex-end\",\n  },\n  status: {},\n}));\n\ntype TransactionEntryProps = {\n  chain: BridgeChain;\n  status: TxEntryStatus;\n  confirmations?: number;\n};\n\nexport const TransactionEntry: FunctionComponent<TransactionEntryProps> = ({\n  confirmations,\n}) => {\n  const styles = useTransactionEntryStyles();\n  return (\n    <div className={styles.root}>\n      <div className={styles.details}>\n        <div className={styles.datetime}>\n          <Chip size=\"small\" label=\"04/02/20\" className={styles.date} />\n          <Chip size=\"small\" label=\"23:45:32 UTC\" />\n        </div>\n        <div className={styles.description}>\n          <Typography variant=\"body2\" className={styles.title}>\n            Mint 0.9877 renBTC on Ethereum\n          </Typography>\n        </div>\n        <div className={styles.links}>\n          <Link href=\"\" external color=\"primary\" className={styles.link}>\n            Bitcoin transaction\n          </Link>\n          <Link href=\"\" external color=\"primary\" className={styles.link}>\n            Ethereum transaction\n          </Link>\n        </div>\n      </div>\n      <div className={styles.actions}>\n        <SmallActionButton>Submit</SmallActionButton>\n      </div>\n      <div className={styles.status}>\n        <TransactionStatusIndicator confirmations={confirmations} />\n      </div>\n    </div>\n  );\n};\n\nexport const TransactionsGrid: FunctionComponent<any> = () => {\n  const pending = 3;\n  const completed = 2;\n\n  const [page, setPage] = useState(0);\n  const handleChangePage = useCallback((event: unknown, newPage: number) => {\n    setPage(newPage);\n  }, []);\n\n  const itemsCount = 15;\n  const itemsPerPage = 4;\n  return (\n    <div>\n      <TransactionsHeader title=\"Transactions\" />\n      <TransactionsStatusHeader title={`Pending (${pending})`} />\n      <div>\n        <TransactionEntry\n          chain={BridgeChain.BTCC}\n          status={TxEntryStatus.COMPLETED}\n          confirmations={2}\n        />\n        <TransactionEntry\n          chain={BridgeChain.BSCC}\n          status={TxEntryStatus.PENDING}\n        />\n      </div>\n      <TransactionsStatusHeader title={`Completed (${completed})`} />\n      <div>\n        <TransactionEntry\n          chain={BridgeChain.BTCC}\n          status={TxEntryStatus.COMPLETED}\n        />\n        <TransactionEntry\n          chain={BridgeChain.BSCC}\n          status={TxEntryStatus.COMPLETED}\n        />\n      </div>\n      <TransactionsPaginationWrapper>\n        <SimplePagination\n          count={itemsCount}\n          rowsPerPage={itemsPerPage}\n          page={page}\n          onChangePage={handleChangePage}\n        />\n      </TransactionsPaginationWrapper>\n    </div>\n  );\n};\n","import { Chip, styled, Tooltip, Typography } from \"@material-ui/core\";\nimport React, { FunctionComponent, useCallback, useEffect } from \"react\";\nimport { useDispatch } from \"react-redux\";\nimport { useHistory } from \"react-router-dom\";\nimport { SmallActionButton } from \"../../../components/buttons/Buttons\";\nimport {\n  CompletedIcon,\n  EmptyIcon,\n  TooltipIcon,\n} from \"../../../components/icons/RenIcons\";\nimport { Link } from \"../../../components/links/Links\";\nimport { SimplestPagination } from \"../../../components/pagination/SimplePagination\";\nimport { TransactionStatusIndicator } from \"../../../components/progress/ProgressHelpers\";\nimport { useTransactionEntryStyles } from \"../../../components/transactions/TransactionsGrid\";\nimport { Debug } from \"../../../components/utils/Debug\";\nimport { paths } from \"../../../pages/routes\";\nimport { getFormattedDateTime } from \"../../../utils/dates\";\nimport { TransactionItemProps } from \"../../transactions/components/TransactionsHelpers\";\nimport { setTxHistoryOpened } from \"../../transactions/transactionsSlice\";\nimport {\n  createTxQueryString,\n  isTransactionCompleted,\n  TxEntryStatus,\n  TxPhase,\n} from \"../../transactions/transactionsUtils\";\nimport { setChain } from \"../../wallet/walletSlice\";\nimport { useDepositPagination, useMintMachine } from \"../mintHooks\";\nimport { resetMint } from \"../mintSlice\";\nimport { getLockAndMintParams, isMintTransactionCompleted } from \"../mintUtils\";\n\nexport const MintTransactionEntryResolver: FunctionComponent<TransactionItemProps> = ({\n  tx,\n  isActive,\n}) => {\n  const dispatch = useDispatch();\n  const history = useHistory();\n\n  const handleContinue = useCallback(() => {\n    history.push({\n      pathname: paths.MINT_TRANSACTION,\n      search: \"?\" + createTxQueryString(tx),\n      state: {\n        txState: {\n          reloadTx: true,\n        },\n      },\n    });\n    dispatch(setTxHistoryOpened(false));\n  }, [dispatch, history, tx]);\n\n  if (isMintTransactionCompleted(tx) || isActive) {\n    return (\n      <MintTransactionEntry\n        tx={tx}\n        isActive={isActive}\n        onContinue={handleContinue}\n      />\n    );\n  }\n  return <MintTransactionEntryMachine tx={tx} />;\n};\n\nexport const MintTransactionEntryMachine: FunctionComponent<TransactionItemProps> = ({\n  tx,\n}) => {\n  const dispatch = useDispatch();\n  const history = useHistory();\n  const [current, , service] = useMintMachine(tx);\n  useEffect(\n    () => () => {\n      service.stop();\n    },\n    [service]\n  );\n\n  // const deposit = Object.values(current.context.depositMachines || {})[0];\n  // all machines are automatically persisted\n  /* useMintTransactionPersistence(\n   *   current.context.tx,\n   *   (deposit?.state.value || \"\") as DepositMachineSchemaState\n   * );\n   */\n  const handleFinish = useCallback(() => {\n    history.push({\n      pathname: paths.MINT_TRANSACTION,\n      search: \"?\" + createTxQueryString(tx),\n      state: {\n        txState: {\n          reloadTx: true,\n        },\n      },\n    });\n    dispatch(setTxHistoryOpened(false));\n  }, [dispatch, history, tx]);\n\n  return (\n    <MintTransactionEntry tx={current.context.tx} onContinue={handleFinish} />\n  );\n};\n\nconst WarningChip = styled(Chip)(({ theme }) => ({\n  color: theme.customColors.alertWarning,\n  backgroundColor: theme.customColors.alertWarningBackground,\n}));\n\nexport const MintTransactionEntry: FunctionComponent<TransactionItemProps> = ({\n  tx,\n  isActive,\n  onContinue,\n}) => {\n  const dispatch = useDispatch();\n  const history = useHistory();\n  const styles = useTransactionEntryStyles();\n\n  const {\n    handleNext,\n    handlePrev,\n    currentIndex,\n    currentHash,\n    total,\n  } = useDepositPagination(tx, \"\", (string) => {});\n\n  const {\n    lockChainConfig,\n    lockConfirmations,\n    lockTargetConfirmations,\n    lockTxLink,\n    lockTxAmount,\n    mintCurrencyConfig,\n    mintChainConfig,\n    mintTxLink,\n    meta: { status, phase, createdTimestamp, transactionsCount },\n  } = getLockAndMintParams(tx, currentHash);\n\n  const handleRestart = useCallback(() => {\n    const {\n      lockCurrencyConfig,\n      mintChainConfig,\n      suggestedAmount,\n    } = getLockAndMintParams(tx, currentHash);\n    dispatch(setTxHistoryOpened(false));\n    dispatch(\n      resetMint({\n        currency: lockCurrencyConfig.symbol,\n      })\n    );\n    dispatch(setChain(mintChainConfig.symbol));\n    history.push({\n      pathname: paths.MINT,\n    });\n  }, [dispatch, history, tx, currentHash]);\n\n  const { date, time } = getFormattedDateTime(createdTimestamp);\n\n  let StatusIcon = EmptyIcon;\n  if (status === TxEntryStatus.COMPLETED) {\n    StatusIcon = CompletedIcon;\n  } else if (phase === TxPhase.LOCK) {\n    StatusIcon = lockChainConfig.Icon;\n  } else if (phase === TxPhase.MINT) {\n    StatusIcon = mintChainConfig.Icon;\n  }\n\n  const handlePageChange = useCallback(\n    (event: any, newPage: number) => {\n      newPage > currentIndex ? handleNext() : handlePrev();\n    },\n    [currentIndex, handleNext, handlePrev]\n  );\n\n  const handleContinue = useCallback(() => {\n    if (onContinue) {\n      onContinue(currentHash);\n    }\n  }, [currentHash, onContinue]);\n\n  const params = getLockAndMintParams(tx, currentHash);\n  return (\n    <>\n      <Debug\n        wrapper\n        it={{\n          currentHash,\n          currentIndex,\n          tx,\n          params,\n          completed: isTransactionCompleted(tx),\n        }}\n      />\n      <div className={styles.root}>\n        <div className={styles.details}>\n          <div className={styles.datetime}>\n            <Chip size=\"small\" label={date} className={styles.date} />\n            <Chip size=\"small\" label={time} className={styles.time} />\n            {transactionsCount > 1 && (\n              <div className={styles.multiple}>\n                <WarningChip\n                  size=\"small\"\n                  className={styles.multipleLabel}\n                  label=\"Multiple deposits\"\n                />\n                <SimplestPagination\n                  className={styles.multiplePagination}\n                  count={total}\n                  rowsPerPage={1}\n                  page={currentIndex}\n                  onChangePage={handlePageChange}\n                />\n              </div>\n            )}\n          </div>\n          <div className={styles.description}>\n            <Typography variant=\"body2\" className={styles.title}>\n              Mint {lockTxAmount || tx.targetAmount} {mintCurrencyConfig.short}{\" \"}\n              on {mintChainConfig.full}\n            </Typography>\n          </div>\n          <div className={styles.links}>\n            {lockTxLink && (\n              <Link\n                href={lockTxLink}\n                external\n                color=\"primary\"\n                underline=\"hover\"\n                className={styles.link}\n              >\n                {lockChainConfig.full} transaction\n              </Link>\n            )}\n            {status === TxEntryStatus.EXPIRED && (\n              <>\n                <Typography\n                  variant=\"body2\"\n                  color=\"textSecondary\"\n                  display=\"inline\"\n                  className={styles.expired}\n                >\n                  <Tooltip title=\"This Gateway Address has expired. Gateway Addresses are only valid for 24 hours. If you have sent funds to this Gateway Address but have not submitted them to the destination chain then they are lost forever.\">\n                    <span>\n                      <TooltipIcon\n                        fontSize=\"inherit\"\n                        color=\"inherit\"\n                        className={styles.tooltipIcon}\n                      />\n                    </span>\n                  </Tooltip>\n                  Expired\n                </Typography>\n                <Link\n                  color=\"primary\"\n                  underline=\"hover\"\n                  className={styles.link}\n                  onClick={handleRestart}\n                >\n                  Restart transaction\n                </Link>\n              </>\n            )}\n            {mintTxLink && (\n              <Link\n                href={mintTxLink}\n                external\n                color=\"primary\"\n                underline=\"hover\"\n                className={styles.link}\n              >\n                {mintChainConfig.full} transaction\n              </Link>\n            )}\n          </div>\n        </div>\n        <div className={styles.actions}>\n          {isActive && (\n            <Typography color=\"primary\" variant=\"body2\">\n              Currently viewing\n            </Typography>\n          )}\n          {!isActive && status === TxEntryStatus.ACTION_REQUIRED && (\n            <SmallActionButton onClick={handleContinue}>\n              {phase === TxPhase.LOCK ? \"Continue\" : \"Finish\"} mint\n            </SmallActionButton>\n          )}\n          {!isActive &&\n            status === TxEntryStatus.PENDING &&\n            lockConfirmations < lockTargetConfirmations && (\n              <Typography color=\"primary\" variant=\"body2\">\n                {lockConfirmations}/{lockTargetConfirmations} Confirmations\n              </Typography>\n            )}\n        </div>\n        <div className={styles.status}>\n          <TransactionStatusIndicator\n            needsAction={status === TxEntryStatus.ACTION_REQUIRED}\n            Icon={StatusIcon}\n            showConfirmations={phase === TxPhase.LOCK}\n            confirmations={lockConfirmations}\n            targetConfirmations={lockTargetConfirmations}\n          />\n        </div>\n      </div>\n    </>\n  );\n};\n","import { Chip, Typography } from '@material-ui/core'\nimport React, { FunctionComponent, useCallback, useEffect } from 'react'\nimport { useDispatch } from 'react-redux'\nimport { useHistory } from 'react-router-dom'\nimport { SmallActionButton } from '../../../components/buttons/Buttons'\nimport { CompletedIcon, EmptyIcon } from '../../../components/icons/RenIcons'\nimport { Link } from '../../../components/links/Links'\nimport { TransactionStatusIndicator } from '../../../components/progress/ProgressHelpers'\nimport { useTransactionEntryStyles } from '../../../components/transactions/TransactionsGrid'\nimport { Debug } from '../../../components/utils/Debug'\nimport { paths } from '../../../pages/routes'\nimport { getFormattedDateTime } from '../../../utils/dates'\nimport { TransactionItemProps } from '../../transactions/components/TransactionsHelpers'\nimport { setTxHistoryOpened } from '../../transactions/transactionsSlice'\nimport {\n  createTxQueryString,\n  isTransactionCompleted,\n  TxEntryStatus,\n  TxPhase,\n} from '../../transactions/transactionsUtils'\nimport { useBurnMachine, } from '../releaseHooks'\nimport { getBurnAndReleaseParams, isReleaseTransactionCompleted, } from '../releaseUtils'\n\nexport const ReleaseTransactionEntryResolver: FunctionComponent<TransactionItemProps> = ({\n  tx,\n  isActive,\n}) => {\n  if (isReleaseTransactionCompleted(tx) || isActive) {\n    return <ReleaseTransactionEntry tx={tx} isActive={isActive} />;\n  }\n  return <ReleaseTransactionEntryMachine tx={tx} />;\n};\n\nexport const ReleaseTransactionEntryMachine: FunctionComponent<TransactionItemProps> = ({\n  tx,\n}) => {\n  const dispatch = useDispatch();\n  const history = useHistory();\n  const [current, , service] = useBurnMachine(tx);\n  useEffect(\n    () => () => {\n      service.stop();\n    },\n    [service]\n  );\n\n  const handleFinish = useCallback(() => {\n    history.push({\n      pathname: paths.RELEASE_TRANSACTION,\n      search: \"?\" + createTxQueryString(tx),\n      state: {\n        txState: {\n          reloadTx: true,\n        },\n      },\n    });\n    dispatch(setTxHistoryOpened(false));\n  }, [dispatch, history, tx]);\n\n  return (\n    <ReleaseTransactionEntry\n      tx={current.context.tx}\n      onContinue={handleFinish}\n    />\n  );\n};\n\nexport const ReleaseTransactionEntry: FunctionComponent<TransactionItemProps> = ({\n  tx,\n  onContinue,\n  isActive,\n}) => {\n  const styles = useTransactionEntryStyles();\n  const {\n    burnChainConfig,\n    burnTxLink,\n    releaseCurrencyConfig,\n    releaseChainConfig,\n    releaseAddressLink,\n    meta: { status, phase, createdTimestamp },\n  } = getBurnAndReleaseParams(tx);\n\n  const { date, time } = getFormattedDateTime(createdTimestamp);\n\n  let StatusIcon = EmptyIcon;\n  if (status === TxEntryStatus.COMPLETED) {\n    StatusIcon = CompletedIcon;\n  } else if (phase === TxPhase.BURN) {\n    StatusIcon = burnChainConfig.Icon;\n  }\n\n  const handleContinue = useCallback(() => {\n    if (onContinue) {\n      onContinue();\n    }\n  }, [onContinue]);\n\n  const params = getBurnAndReleaseParams(tx);\n  return (\n    <>\n      <Debug\n        wrapper\n        it={{ tx, params, completed: isTransactionCompleted(tx) }}\n      />\n      <Debug disable it={{ meta: params.meta }} />\n      <div className={styles.root}>\n        <div className={styles.details}>\n          <div className={styles.datetime}>\n            <Chip size=\"small\" label={date} className={styles.date} />\n            <Chip size=\"small\" label={time} />\n          </div>\n          <div className={styles.description}>\n            <Typography variant=\"body2\" className={styles.title}>\n              Release {tx.targetAmount} {releaseCurrencyConfig.short} to{\" \"}\n              {releaseChainConfig.full}\n            </Typography>\n          </div>\n          <div className={styles.links}>\n            {status === TxEntryStatus.EXPIRED && phase === TxPhase.BURN && (\n              <Typography variant=\"body2\" color=\"error\" className={styles.link}>\n                Transaction expired\n              </Typography>\n            )}\n            {burnTxLink && (\n              <Link\n                href={burnTxLink}\n                external\n                color=\"primary\"\n                underline=\"hover\"\n                className={styles.link}\n              >\n                {burnChainConfig.full} transaction\n              </Link>\n            )}\n            {releaseAddressLink && (\n              <Link\n                href={releaseAddressLink}\n                external\n                color=\"primary\"\n                underline=\"hover\"\n                className={styles.link}\n              >\n                {releaseChainConfig.full} address\n              </Link>\n            )}\n          </div>\n        </div>\n        <div className={styles.actions}>\n          {isActive && (\n            <Typography color=\"primary\" variant=\"body2\">\n              Currently viewing\n            </Typography>\n          )}\n          {!isActive && status === TxEntryStatus.ACTION_REQUIRED && (\n            <SmallActionButton onClick={handleContinue}>\n              Finish release\n            </SmallActionButton>\n          )}\n        </div>\n        <div className={styles.status}>\n          <TransactionStatusIndicator\n            needsAction={status === TxEntryStatus.ACTION_REQUIRED}\n            Icon={StatusIcon}\n            showConfirmations={phase === TxPhase.BURN}\n          />\n        </div>\n      </div>\n    </>\n  );\n};\n","import { Dialog, makeStyles } from \"@material-ui/core\";\nimport { DialogProps } from \"@material-ui/core/Dialog/Dialog\";\nimport React, { FunctionComponent } from \"react\";\n\nconst useTransactionHistoryDialogStyles = makeStyles({\n  paper: {\n    marginTop: 0, // 82,\n  },\n  container: {\n    paddingTop: 68\n  }\n});\n\nexport const TransactionHistoryDialog: FunctionComponent<DialogProps> = (\n  props\n) => {\n  const classes = useTransactionHistoryDialogStyles();\n  return <Dialog maxWidth=\"sm\" fullWidth classes={classes} {...props} />;\n};\n","import { Box, Typography } from \"@material-ui/core\";\nimport React, {\n  FunctionComponent,\n  useCallback,\n  useEffect,\n  useMemo,\n  useState,\n} from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport {\n  ActionButton,\n  ActionButtonWrapper,\n} from \"../../components/buttons/Buttons\";\nimport { AssetDropdown } from \"../../components/dropdowns/AssetDropdown\";\nimport {\n  BigTopWrapper,\n  BigWrapper,\n  CenteringSpacedBox,\n  MediumWrapper,\n  PaperSpacerWrapper,\n} from \"../../components/layout/LayoutHelpers\";\nimport {\n  ShowEntry,\n  SimplePagination,\n} from \"../../components/pagination/SimplePagination\";\nimport { CenteredProgress } from \"../../components/progress/ProgressHelpers\";\nimport {\n  TransactionsContent,\n  TransactionsHeader,\n  TransactionsPaginationWrapper,\n  TransactionsStatusHeader,\n} from \"../../components/transactions/TransactionsGrid\";\nimport { WalletConnectionProgress } from \"../../components/wallet/WalletHelpers\";\nimport { db } from \"../../services/database/database\";\nimport {\n  bridgeChainToRenChain,\n  getChainConfig,\n  supportedMintDestinationChains,\n} from \"../../utils/assetConfigs\";\nimport { isFirstVowel } from \"../../utils/strings\";\nimport { MintTransactionEntryResolver } from \"../mint/components/MintHistoryHelpers\";\nimport { ReleaseTransactionEntryResolver } from \"../release/components/ReleaseHistoryHelpers\";\nimport {\n  useAuthentication,\n  useSelectedChainWallet,\n} from \"../wallet/walletHooks\";\nimport {\n  $wallet,\n  setChain,\n  setWalletPickerOpened,\n} from \"../wallet/walletSlice\";\nimport { TransactionHistoryDialog } from \"./components/TransactionHistoryHelpers\";\nimport {\n  $currentTxId,\n  $orderedTransactions,\n  $transactionsData,\n  $txHistoryOpened,\n  BridgeTransaction,\n  setTransactions,\n  setTxHistoryOpened,\n  setTxsPending,\n} from \"./transactionsSlice\";\nimport { isTransactionCompleted, TxType } from \"./transactionsUtils\";\n\nexport const TransactionHistory: FunctionComponent = () => {\n  const dispatch = useDispatch();\n  const { account, walletConnected } = useSelectedChainWallet();\n  const { isAuthenticated } = useAuthentication();\n  const { chain, user } = useSelector($wallet);\n  const allTransactions = useSelector($orderedTransactions);\n  const { txsPending } = useSelector($transactionsData);\n  const opened = useSelector($txHistoryOpened);\n  const activeTxId = useSelector($currentTxId);\n\n  useEffect(() => {\n    if (!walletConnected) {\n      return;\n    }\n    if (!isAuthenticated) {\n      dispatch(setTxsPending(true));\n    }\n    if (isAuthenticated) {\n      db.getTxs(account)\n        .then((txsData) => {\n          // Only load txs for the correct chain, in case the address is valid on multiple chains\n          // (this will happen when using metamask for both bsc and eth)\n          dispatch(\n            setTransactions(\n              (txsData as Array<BridgeTransaction>).filter(\n                (x) =>\n                  // FIXME: remove the split between \"BridgeChain\" and \"RenChain\"\n                  x.sourceChain === bridgeChainToRenChain(chain) ||\n                  x.destChain === bridgeChainToRenChain(chain)\n              )\n            )\n          );\n          dispatch(setTxsPending(false));\n        })\n        .catch(console.error);\n    }\n  }, [dispatch, walletConnected, isAuthenticated, user, account, chain]);\n\n  const chainConfig = getChainConfig(chain);\n  const handleWalletPickerOpen = useCallback(() => {\n    dispatch(setWalletPickerOpened(true));\n  }, [dispatch]);\n\n  const handleChainChange = useCallback(\n    (event) => {\n      dispatch(setChain(event.target.value));\n    },\n    [dispatch]\n  );\n\n  const handleClose = useCallback(() => {\n    dispatch(setTxHistoryOpened(false));\n  }, [dispatch]);\n\n  const all = allTransactions.length;\n\n  const [page, setPage] = useState(0);\n  const handleChangePage = useCallback((event: unknown, newPage: number) => {\n    setPage(newPage);\n  }, []);\n\n  const itemsCount = all;\n  const itemsPerPage = 4;\n\n  const showTransactions = walletConnected && !txsPending;\n\n  const { pendingTxsCount, completedTxsCount } = useMemo(() => {\n    const pendingTxsCount = allTransactions.filter(\n      (tx) => !isTransactionCompleted(tx)\n    ).length;\n    const completedTxsCount = allTransactions.filter((tx) =>\n      isTransactionCompleted(tx)\n    ).length;\n    return { pendingTxsCount, completedTxsCount };\n  }, [allTransactions]);\n\n  return (\n    <TransactionHistoryDialog\n      open={opened}\n      onBackdropClick={handleClose}\n      keepMounted\n    >\n      <TransactionsHeader title=\"Transactions\">\n        <Box mr={1}>\n          <Typography variant=\"subtitle2\">Viewing: </Typography>\n        </Box>\n        <AssetDropdown\n          mode=\"chain\"\n          condensed\n          available={supportedMintDestinationChains}\n          value={chain}\n          onChange={handleChainChange}\n        />\n      </TransactionsHeader>\n      {(!walletConnected || txsPending) && (\n        <>\n          <TransactionsStatusHeader />\n          <TransactionsContent>\n            <BigTopWrapper>\n              {!walletConnected && (\n                <>\n                  <MediumWrapper>\n                    <Typography variant=\"body1\" align=\"center\">\n                      Please connect{\" \"}\n                      {isFirstVowel(chainConfig.full) ? \"an\" : \"a\"}{\" \"}\n                      {chainConfig.full} compatible wallet to view transactions\n                    </Typography>\n                  </MediumWrapper>\n                  <BigWrapper>\n                    <MediumWrapper>\n                      <CenteringSpacedBox>\n                        <WalletConnectionProgress />\n                      </CenteringSpacedBox>\n                    </MediumWrapper>\n                    <ActionButtonWrapper>\n                      <ActionButton onClick={handleWalletPickerOpen}>\n                        Connect Wallet\n                      </ActionButton>\n                    </ActionButtonWrapper>\n                  </BigWrapper>\n                </>\n              )}\n              {txsPending && (\n                <BigWrapper>\n                  <CenteredProgress color=\"primary\" size={100} />\n                </BigWrapper>\n              )}\n            </BigTopWrapper>\n          </TransactionsContent>\n        </>\n      )}\n      {showTransactions && (\n        <>\n          <div>\n            {allTransactions.map((tx, index) => {\n              const startIndex = page * itemsPerPage;\n              const endIndex = startIndex + itemsPerPage;\n              const indexIsInCurrentPage =\n                index >= startIndex && index < endIndex;\n\n              const isFirstShown = index === startIndex;\n              const isPreviousDifferent =\n                index > 0 &&\n                isTransactionCompleted(tx) &&\n                !isTransactionCompleted(allTransactions[index - 1]);\n              const showHeader = isFirstShown || isPreviousDifferent;\n              const isCurrentCompleted = isTransactionCompleted(tx);\n              const title = isCurrentCompleted\n                ? `Completed (${completedTxsCount})`\n                : `Pending (${pendingTxsCount})`;\n\n              const Header = <TransactionsStatusHeader title={title} />;\n\n              if (tx.type === TxType.MINT) {\n                return (\n                  <ShowEntry when={indexIsInCurrentPage} key={tx.id}>\n                    {showHeader && Header}\n                    <MintTransactionEntryResolver\n                      tx={tx}\n                      isActive={activeTxId === tx.id}\n                    />\n                  </ShowEntry>\n                );\n              } else {\n                return (\n                  <ShowEntry when={indexIsInCurrentPage} key={tx.id}>\n                    {showHeader && Header}\n                    <ReleaseTransactionEntryResolver\n                      tx={tx}\n                      isActive={activeTxId === tx.id}\n                    />\n                  </ShowEntry>\n                );\n              }\n            })}\n          </div>\n          {allTransactions.length === 0 && (\n            <PaperSpacerWrapper>\n              <Typography variant=\"body2\" align=\"center\" color=\"textSecondary\">\n                You have no transactions with this account.\n              </Typography>\n            </PaperSpacerWrapper>\n          )}\n          <TransactionsPaginationWrapper>\n            <SimplePagination\n              count={itemsCount}\n              rowsPerPage={itemsPerPage}\n              page={page}\n              onChangePage={handleChangePage}\n            />\n          </TransactionsPaginationWrapper>\n        </>\n      )}\n    </TransactionHistoryDialog>\n  );\n};\n","import queryString from \"query-string\";\n\nimport { env } from \"./environmentVariables\";\n\nexport const featureFlags = {\n  enableBSCMetamask:\n    env.BSC_MM_ENABLED ||\n    queryString.parse(window.location.search).bscMetamaskEnabled,\n  enableMEWConnect:\n    env.MEWCONNECT_ENABLED ||\n    queryString.parse(window.location.search).MEWConnectEnabled,\n  enableWalletConnect:\n    env.WALLETCONNECT_ENABLED ||\n    queryString.parse(window.location.search).walletConnectEnabled,\n};\n","import { RenNetwork } from \"@renproject/interfaces\";\nimport { BinanceSmartChainInjectedConnector } from \"@renproject/multiwallet-binancesmartchain-injected-connector\";\nimport { EthereumInjectedConnector } from \"@renproject/multiwallet-ethereum-injected-connector\";\nimport { EthereumMEWConnectConnector } from \"@renproject/multiwallet-ethereum-mewconnect-connector\";\nimport { EthereumWalletConnectConnector } from \"@renproject/multiwallet-ethereum-walletconnect-connector\";\nimport { MultiwalletProvider as RenMultiwalletProvider } from \"@renproject/multiwallet-ui\";\nimport React, { FunctionComponent } from \"react\";\nimport {\n  BinanceConnectorInfo,\n} from \"../../components/wallet/WalletHelpers\";\nimport { env } from \"../../constants/environmentVariables\";\nimport { featureFlags } from \"../../constants/featureFlags\";\nimport { RenChain } from \"../../utils/assetConfigs\";\n\nconst networkMapping: Record<number, RenNetwork[]> = {\n  1: [RenNetwork.Mainnet],\n  42: [RenNetwork.Testnet, RenNetwork.TestnetVDot3],\n};\n\nexport const renNetworkToEthNetwork = (id: RenNetwork): number | undefined => {\n  const entry = Object.entries(networkMapping).find(([_, x]) => x.includes(id));\n  if (!entry) return entry;\n  return parseInt(entry[0]);\n};\n\nexport const ethNetworkToRenNetwork = (id: string | number): RenNetwork => {\n  const index = Number(id);\n  return networkMapping[index]?.[0] || RenNetwork.Testnet;\n};\n\nexport const walletPickerModalConfig = (targetEthChainId: number) => ({\n  chains: {\n    [RenChain.ethereum]: [\n      {\n        name: \"Metamask\",\n        logo: \"https://avatars1.githubusercontent.com/u/11744586?s=60&v=4s\",\n        connector: new EthereumInjectedConnector({\n          debug: env.DEV,\n          networkIdMapper: ethNetworkToRenNetwork,\n        }),\n      },\n      ...(featureFlags.enableMEWConnect\n        ? [\n            {\n              name: \"MEW\",\n              logo:\n                \"https://avatars1.githubusercontent.com/u/24321658?s=60&v=4s\",\n              connector: new EthereumMEWConnectConnector({\n                debug: env.DEV,\n                rpc: {\n                  42: `wss://kovan.infura.io/ws/v3/${env.INFURA_ID}`,\n                  1: `wss://mainnet.infura.io/ws/v3/${env.INFURA_ID}`,\n                },\n                chainId: targetEthChainId,\n              }),\n            },\n          ]\n        : []),\n      ...(featureFlags.enableWalletConnect\n        ? [\n            {\n              name: \"WalletConnect\",\n              logo:\n                \"https://avatars0.githubusercontent.com/u/37784886?s=60&v=4\",\n              connector: new EthereumWalletConnectConnector({\n                rpc: {\n                  42: `https://kovan.infura.io/v3/${env.INFURA_ID}`,\n                  1: `wss://mainnet.infura.io/ws/v3/${env.INFURA_ID}`,\n                },\n                qrcode: true,\n                debug: true,\n              }),\n            },\n          ]\n        : []),\n    ],\n    [RenChain.binanceSmartChain]: [\n      ...(featureFlags.enableBSCMetamask\n        ? [\n            {\n              name: \"Metamask\",\n              logo:\n                \"https://avatars2.githubusercontent.com/u/45615063?s=60&v=4\",\n              connector: (() => {\n                const connector = new BinanceSmartChainInjectedConnector({\n                  debug: true,\n                });\n                connector.getProvider = () => (window as any).ethereum;\n                return connector;\n              })(),\n            },\n          ]\n        : []),\n    ],\n  },\n});\n\nexport const MultiwalletProvider: FunctionComponent = ({ children }) => {\n  return <RenMultiwalletProvider>{children}</RenMultiwalletProvider>;\n};\n","import {\n  Button,\n  Divider,\n  Drawer,\n  ListItem,\n  Menu,\n  Box,\n  MenuItem,\n  Typography,\n  useTheme,\n} from \"@material-ui/core\";\nimport IconButton from \"@material-ui/core/IconButton\";\nimport CloseIcon from \"@material-ui/icons/Close\";\nimport MenuIcon from \"@material-ui/icons/Menu\";\nimport {\n  MultiwalletProvider,\n  useMultiwallet,\n  WalletPickerModal,\n  WalletPickerProps,\n} from \"@renproject/multiwallet-ui\";\nimport classNames from \"classnames\";\nimport React, {\n  FunctionComponent,\n  useCallback,\n  useEffect,\n  useMemo,\n  useState,\n} from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { useDebounce, useWindowSize } from \"react-use\";\nimport { env } from \"../constants/environmentVariables\";\nimport { $renNetwork } from \"../features/network/networkSlice\";\nimport { useSetNetworkFromParam } from \"../features/network/networkUtils\";\nimport { TransactionHistory } from \"../features/transactions/TransactionHistory\";\nimport {\n  $transactionsData,\n  $transactionsNeedsAction,\n  setTxHistoryOpened,\n} from \"../features/transactions/transactionsSlice\";\nimport { useSubNetworkName } from \"../features/ui/uiHooks\";\nimport {\n  useAuthentication,\n  useSelectedChainWallet,\n  useSyncMultiwalletNetwork,\n  useWallet,\n  useWeb3Signatures,\n} from \"../features/wallet/walletHooks\";\nimport {\n  $authRequired,\n  $multiwalletChain,\n  $walletPickerOpened,\n  setWalletPickerOpened,\n} from \"../features/wallet/walletSlice\";\nimport {\n  renNetworkToEthNetwork,\n  walletPickerModalConfig,\n} from \"../providers/multiwallet/Multiwallet\";\nimport { TransactionHistoryMenuIconButton } from \"../components/buttons/Buttons\";\nimport { Debug } from \"../components/utils/Debug\";\nimport {\n  useWalletPickerStyles,\n  WalletChainLabel,\n  WalletConnectingInfo,\n  WalletConnectionStatusButton,\n  WalletEntryButton,\n  WalletWrongNetworkInfo,\n} from \"../components/wallet/WalletHelpers\";\nimport { Footer } from \"../components/layout/Footer\";\nimport {\n  MobileLayout,\n  MainLayoutVariantProps,\n  useMobileLayoutStyles,\n} from \"../components/layout/MobileLayout\";\nimport { BridgeLogoIcon } from \"../components/icons/RenIcons\";\nimport { Link } from \"react-router-dom\";\n\nexport const MainLayout: FunctionComponent<MainLayoutVariantProps> = ({\n  children,\n}) => {\n  const styles = useMobileLayoutStyles();\n  const dispatch = useDispatch();\n  useSetNetworkFromParam();\n  useSyncMultiwalletNetwork();\n  useWeb3Signatures();\n  const {\n    authenticate,\n    isAuthenticated,\n    isAuthenticating,\n  } = useAuthentication();\n  const {\n    status,\n    account,\n    walletConnected,\n    deactivateConnector,\n    symbol,\n  } = useSelectedChainWallet();\n  const { txHistoryOpened } = useSelector($transactionsData);\n  const txsNeedsAction = useSelector($transactionsNeedsAction);\n\n  const authRequired = useSelector($authRequired);\n  const [authWarningOpened, setAuthWarningOpened] = useState(false);\n  useDebounce(\n    () => {\n      const shouldAuthWarningOpened =\n        walletConnected &&\n        !isAuthenticated &&\n        !isAuthenticating &&\n        (authRequired || txHistoryOpened);\n\n      setAuthWarningOpened(shouldAuthWarningOpened);\n    },\n    1000, // the authentication process takes a few seconds\n    [walletConnected, isAuthenticated, authRequired, txHistoryOpened]\n  );\n  // const authWarningOpened =\n  //   walletConnected && !isAuthenticated && (authRequired || txHistoryOpened);\n\n  const [mobileMenuOpen, setMobileMenuOpen] = useState(true);\n  const handleMobileMenuClose = useCallback(() => {\n    setMobileMenuOpen(false);\n  }, []);\n  const handleMobileMenuOpen = useCallback(() => {\n    setMobileMenuOpen(true);\n  }, []);\n  const { width } = useWindowSize();\n  const theme = useTheme();\n  useEffect(() => {\n    if (width > theme.breakpoints.values[\"sm\"]) {\n      setMobileMenuOpen(false);\n    }\n  }, [width, theme.breakpoints]);\n\n  const handleTxHistoryToggle = useCallback(() => {\n    dispatch(setTxHistoryOpened(!txHistoryOpened));\n  }, [dispatch, txHistoryOpened]);\n\n  const multiwalletChain = useSelector($multiwalletChain);\n  const walletPickerOpen = useSelector($walletPickerOpened);\n  const renNetwork = useSelector($renNetwork);\n  const pickerClasses = useWalletPickerStyles();\n  const [\n    walletMenuAnchor,\n    setWalletMenuAnchor,\n  ] = React.useState<null | HTMLElement>(null);\n  const handleWalletPickerClose = useCallback(() => {\n    dispatch(setWalletPickerOpened(false));\n  }, [dispatch]);\n  const handleWalletMenuClose = useCallback(() => {\n    setWalletMenuAnchor(null);\n  }, []);\n\n  const handleWalletButtonClick = useCallback(\n    (event: React.MouseEvent<HTMLElement>) => {\n      if (walletConnected) {\n        setWalletMenuAnchor(event.currentTarget);\n      } else {\n        dispatch(setWalletPickerOpened(true));\n      }\n    },\n    [dispatch, walletConnected]\n  );\n\n  const handleDisconnectWallet = useCallback(() => {\n    deactivateConnector();\n    handleWalletMenuClose();\n  }, [deactivateConnector, handleWalletMenuClose]);\n  const walletPickerOptions = useMemo(() => {\n    const options: WalletPickerProps<any, any> = {\n      targetNetwork: renNetwork,\n      chain: multiwalletChain,\n      onClose: handleWalletPickerClose,\n      pickerClasses,\n      // DefaultInfo: DebugComponentProps,\n      ConnectingInfo: WalletConnectingInfo,\n      WrongNetworkInfo: WalletWrongNetworkInfo,\n      WalletEntryButton,\n      WalletChainLabel,\n      config: walletPickerModalConfig(renNetworkToEthNetwork(renNetwork) || 1),\n    };\n    return options;\n  }, [multiwalletChain, handleWalletPickerClose, pickerClasses, renNetwork]);\n\n  const debugWallet = useWallet(multiwalletChain); //remove\n  const debugMultiwallet = useMultiwallet(); //remove\n  const debugNetworkName = useSubNetworkName();\n\n  const drawerId = \"main-menu-mobile\";\n  const showTxIndicator = walletConnected && txsNeedsAction;\n\n  const ToolbarMenu = (\n    <>\n      <div className={styles.desktopMenu}>\n        <WalletConnectionStatusButton\n          onClick={handleWalletButtonClick}\n          hoisted={txHistoryOpened}\n          status={status}\n          account={account}\n          wallet={symbol}\n        />\n        <WalletPickerModal\n          open={walletPickerOpen}\n          options={walletPickerOptions}\n        />\n      </div>\n      <div className={styles.mobileMenu}>\n        <IconButton\n          aria-label=\"show more\"\n          aria-controls={drawerId}\n          aria-haspopup=\"true\"\n          onClick={handleMobileMenuOpen}\n          color=\"inherit\"\n        >\n          <MenuIcon />\n        </IconButton>\n      </div>\n    </>\n  );\n  const DrawerMenu = (\n    <Drawer\n      anchor=\"right\"\n      id={drawerId}\n      keepMounted\n      open={mobileMenuOpen}\n      onClose={handleMobileMenuClose}\n      PaperProps={{ className: styles.drawerPaper }}\n    >\n      <div className={styles.drawerHeader}>\n        <IconButton\n          aria-label=\"close\"\n          className={styles.drawerClose}\n          onClick={handleMobileMenuClose}\n        >\n          <CloseIcon />\n        </IconButton>\n      </div>\n      <Divider />\n      <ListItem\n        divider\n        className={styles.drawerListItem}\n        button\n        onClick={handleWalletButtonClick}\n      >\n        <WalletConnectionStatusButton\n          className={styles.mobileMenuButton}\n          mobile\n          status={status}\n          account={account}\n          wallet={symbol}\n        />\n      </ListItem>\n      <ListItem\n        divider\n        className={styles.drawerListItem}\n        button\n        onClick={handleTxHistoryToggle}\n      >\n        <Button className={styles.mobileMenuButton} component=\"div\">\n          <TransactionHistoryMenuIconButton\n            className={styles.mobileTxHistory}\n            indicator={showTxIndicator}\n          />\n          <span>View Transactions</span>\n        </Button>\n      </ListItem>\n      <ListItem\n        className={classNames(\n          styles.drawerListItem,\n          styles.drawerFooterListItem\n        )}\n      >\n        <Footer mobile />\n      </ListItem>\n    </Drawer>\n  );\n\n  const WalletLogo = (\n    <Link to=\"/welcome\"><Box display=\"inline-block\" p={3}>\n          <BridgeLogoIcon width=\"auto\" height=\"auto\"/>\n    </Box></Link>\n  );\n\n  const WalletMenu = (\n    <Menu\n      id=\"wallet-menu\"\n      getContentAnchorEl={null}\n      anchorEl={walletMenuAnchor}\n      keepMounted\n      open={Boolean(walletMenuAnchor)}\n      onClose={handleWalletMenuClose}\n      anchorOrigin={{ vertical: \"bottom\", horizontal: \"left\" }}\n      transformOrigin={{ vertical: \"top\", horizontal: \"left\" }}\n    >\n      <MenuItem onClick={handleDisconnectWallet}>\n        <Typography color=\"error\">Disconnect wallet</Typography>\n      </MenuItem>\n    </Menu>\n  );\n\n  return (\n    <MobileLayout\n      ToolbarMenu={ToolbarMenu}\n      DrawerMenu={DrawerMenu}\n      WalletMenu={WalletMenu}\n      Logo={WalletLogo}\n    >\n      {children}\n      <TransactionHistory />\n      <Debug\n        it={{\n          isAuthenticated,\n          debugNetworkName,\n          debugWallet,\n          debugMultiwallet,\n          env,\n        }}\n      />\n    </MobileLayout>\n  );\n};\n\nexport const ConnectedMainLayout: FunctionComponent = ({ children }) => (\n  <MultiwalletProvider>\n    <MainLayout>{children}</MainLayout>\n  </MultiwalletProvider>\n);\n","import React, { FunctionComponent } from 'react'\nimport { useSelector } from 'react-redux'\nimport { RouteComponentProps } from 'react-router'\nimport { Route } from 'react-router-dom'\nimport { BridgePaperWrapper, BridgePurePaper, } from '../components/layout/Paper'\nimport { storageKeys } from '../constants/constants'\nimport { MintFlow } from '../features/mint/MintFlow'\nimport { ReleaseFlow } from '../features/release/ReleaseFlow'\nimport { $ui } from '../features/ui/uiSlice'\nimport { PaperTitleProvider } from '../providers/TitleProviders'\nimport { ConnectedMainLayout } from './MainLayout'\nimport { paths } from './routes'\n\nconst MainPage: FunctionComponent<RouteComponentProps> = ({\n  history,\n  location,\n}) => {\n  if (!localStorage.getItem(storageKeys.TERMS_AGREED)) {\n    history.replace(paths.WELCOME);\n  }\n  if (location.pathname === \"/\") {\n    history.replace(paths.WELCOME);\n  }\n  //useExchangeRates();\n  //useGasPrices(); TODODO\n  const { paperShaking } = useSelector($ui);\n  return (\n    <>\n      <ConnectedMainLayout>\n        <PaperTitleProvider>\n          <BridgePaperWrapper>\n            <BridgePurePaper shaking={paperShaking}>\n              <Route path={paths.MINT} component={MintFlow} />\n              <Route path={paths.RELEASE} component={ReleaseFlow} />\n            </BridgePurePaper>\n          </BridgePaperWrapper>\n        </PaperTitleProvider>\n      </ConnectedMainLayout>\n    </>\n  );\n};\n\nexport default MainPage;\n"],"sourceRoot":""}