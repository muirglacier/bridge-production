{"version":3,"sources":["services/bridge.ts","components/layout/Paper.tsx","features/transactions/components/TransactionTypeTabs.tsx","services/database/firebase/firebaseUtils.ts","services/database/firebase/firebase.ts","components/utils/types.ts","services/database/database.ts","utils/strings.ts","services/wallets/bsc.ts","features/release/releaseAddressValidator.ts","features/wallet/walletHooks.ts","features/transactions/transactionsHooks.ts","components/inputs/InputHelpers.tsx","components/utils/Debug.tsx","features/fees/feesHooks.ts","utils/formatters.ts","components/formatting/NumberFormatText.tsx","components/modals/BridgeModal.tsx","features/transactions/components/TransactionsHelpers.tsx","features/mint/components/MintHelpers.tsx","features/transactions/components/TransactionFees.tsx","features/ui/uiHooks.ts","features/mint/steps/MintFeesStep.tsx","features/wallet/walletUtils.ts","components/dropdowns/AssetDropdown.tsx","features/mint/steps/MintInitialStep.tsx","components/wallet/WalletHelpers.tsx","features/notifications/notificationsUtils.ts","features/mint/components/MintStatuses.tsx","features/mint/components/MultipleDepositsHelpers.tsx","features/mint/steps/MintProcessStep.tsx","features/mint/mintHooks.ts","features/mint/MintFlow.tsx","features/release/components/ReleaseStatuses.tsx","features/release/components/ReleaseHelpers.tsx","features/release/steps/ReleaseFeesStep.tsx","components/inputs/OutlinedTextField.tsx","features/release/steps/ReleaseInitialStep.tsx","features/notifications/components/NotificationsHelpers.tsx","features/transactions/components/TransactionMenu.tsx","features/release/releaseHooks.ts","features/release/steps/ReleaseProcessStep.tsx","features/release/ReleaseFlow.tsx","features/network/networkUtils.ts","constants/featureFlags.ts","providers/multiwallet/Multiwallet.tsx","pages/MainLayout.tsx","pages/MainPage.tsx"],"names":["defichain","bip32","public","private","messagePrefix","pubKeyHash","scriptHash","wif","strToSatoshi","val","sts","getTransactionN","address","txid","Promise","resolve","reject","a","getTxOutsWhale","objTx","console","log","data","length","forEach","element","scriptPubKey","script","type","recoveredAddress","hex","bitcoin","fromOutputScript","Buffer","from","toLowerCase","vt","n","satoshi","value","buildUrl","destChain","env","ETHEREUM_BACKEND_ENDPOINT","BSC_BACKEND_ENDPOINT","getDepositAddress","userAddress","url","settings","method","fetch","then","res","json","getDeposits","getKeySignatures","getLogs","useBridgePaperStyles","makeStyles","theme","root","maxWidth","margin","position","overflow","BridgePurePaper","shaking","className","props","classes","shakingStyles","useShakingStyles","resolvedClassName","classNames","Paper","BridgePaperWrapper","styled","marginTop","SMALL_PADDING","getPadding","variant","usePaperContentStyles","paddingLeft","paddingVariant","paddingRight","top","paddingTop","bottom","paddingBottom","darker","backgroundColor","customColors","whiteDarker","PaperContent","topPadding","bottomPadding","children","styles","PaperHeader","display","justifyContent","alignItems","PaperNav","justifySelf","minWidth","PaperActions","marginLeft","marginRight","PaperTitle","textAlign","width","useSpacedContentStyles","minHeight","rootSmaller","SpacedPaperContent","smaller","rest","TransactionTypeTabs","history","useHistory","path","useRouteMatch","onTabChange","useCallback","event","newPath","push","Tabs","onChange","indicatorColor","Tab","label","paths","MINT","RELEASE","require","createOrUpdateProfileData","db","uid","doc","collection","get","docData","exists","update","updated","firebase","firestore","Timestamp","fromDate","Date","now","set","signatures","error","signInOrRegister","id","signature","token","functions","httpsCallable","signed","account","Error","auth","signInWithCustomToken","user","getFirebaseUser","currentUser","signOut","rawSignature","FIREBASE_KEY","warn","initializeApp","apiKey","authDomain","window","location","hostname","projectId","FIREBASE_PROJECT_ID","WalletStatus","addTx","tx","localWeb3Address","fsSignature","timestamps","dbTx","created","walletSignature","createdSeconds","seconds","JSON","stringify","catch","e","updateTx","deleteTx","deleted","getTx","parse","getTxs","where","fsDataSnapshot","fsTransactions","empty","getUser","this","trimAddress","chars","start","slice","end","split","Network","AddressType","useWallet","chain","useMultiwallet","enabledChains","targetNetwork","activateConnector","setTargetNetwork","status","provider","symbol","isMetaMask","BridgeWallet","METAMASKW","chainId","indexOf","BINANCESMARTW","isMewConnect","isMEWConnect","MEWCONNECTW","UNKNOWNW","resolveWallet","deactivateConnector","connector","deactivate","walletConnected","CONNECTED","useSelectedChainWallet","multiwalletChain","useSelector","$multiwalletChain","ABI","useWeb3","useMemo","Web3","sendRedeemTxHook","web3","targetAddress","amount","bridge","r","s","v","currentProvider","connection","eth","Contract","SS","ETH_CONTRACT_ADDRESS","BSC_CONTRACT_ADDRESS","methods","mintToken","send","on","addBinanceChainHook","request","params","chainName","nativeCurrency","name","decimals","rpcUrls","blockExplorerUrls","err","added","addEthereumChainHook","sendBurnTxHook","burnToken","toString","useRedeem","dispatch","useDispatch","getSignatures","toUpperCase","result","code","message","useToken","getToken","sendAsync","options","ETH_TOKEN_ADDRESS","BSC_TOKEN_ADDRESS","image","addTokenHook","useAddBsc","chainname","updateBsc","useSignatures","debug","useAuthRequired","authRequired","useEffect","setAuthRequired","useRenNetworkTracker","currency","renChain","renNetwork","$renNetwork","networkMapping","getCurrencyConfig","networkMappings","newNetwork","isTestnetNetwork","testnet","isMainnetNetwork","mainnet","setRenNetwork","useSetCurrentTxId","currentId","$currentTxId","setCurrentTxId","CheckboxWrapper","useStyles","background","wrapper","height","wrapperEnabled","off","DEV","DebugWrapper","enabled","useState","show","setShow","toggleShow","onClick","getCircularReplacer","seen","WeakSet","key","has","add","Debug","it","force","disable","target","noClick","stopPropagation","DebugComponentProps","useFetchFees","txType","mint","burn","lock","release","fees","pending","numberFormatOptions","thousandSeparator","allowLeadingZeros","allowNegative","allowedDecimalSeparators","NumberFormatText","spacedSuffix","suffix","resolvedSuffix","displayType","useBridgeModalTitleStyles","dialogTitle","borderBottom","palette","divider","titleWrapper","flexGrow","title","customContentWrapper","closeButtonWrapper","closeButton","color","grey","prevButtonWrapper","prevButton","BridgeModalTitle","onClose","onPrev","disableTypography","IconButton","aria-label","fontSize","Typography","BridgeModal","open","Dialog","useNestedDrawerStyles","backdrop","right","left","zIndex","positioner","paper","flexDirection","NestedDrawerWrapper","NestedDrawerContent","NestedDrawerActions","NestedDrawer","Backdrop","ProgressStatus","marginBottom","reason","processing","useTheme","usePaperTitle","setTitle","primary","main","ErrorIconWrapper","lineHeight","textLight","ErrorDialog","actionText","onAction","align","gutterBottom","component","SubmitErrorDialog","GeneralErrorDialog","external","href","links","BUGS_LOG","underline","WarningDialog","mainActionText","onMainAction","mainActionDisabled","alternativeActionText","onAlternativeAction","alternativeActionDisabled","showMainAction","disabled","WrongAddressWarningDialog","addressExplorerLink","mintTooltips","DepositWrapper","MultipleDepositsMessage","TransactionFees","hideButton","targetChainConfig","getChainConfig","getTransactionFees","renVMFee","networkFee","renVMFeeAmount","sourceCurrency","TxType","toReleasedCurrency","sourceCurrencyConfig","sourceCurrencyChainConfig","sourceChain","tooltips","getFeeTooltips","mintFee","releaseFee","fromGwei","labelTooltip","renVmFee","decimalScale","full","sourceChainMinerFee","short","renCurrencyChainFee","hoverable","useSubNetworkName","flow","useLocation","pathname","useLocationFlow","$chain","mintCurrency","$mintCurrency","releaseCurrency","$releaseCurrency","BridgeChain","ETHC","renCurrency","toMintedCurrency","ethTestnet","EthTestnet","KOVAN","MintFeesStep","chainNativeCurrencyConfig","mintingInitialized","setMintingInitialized","$mint","$wallet","network","currentSessionCount","$currentSessionCount","destinationChainConfig","GreyIcon","destinationChainNativeCurrencyConfig","mintDynamicTooltips","acknowledge","mintedCurrency","ackChecked","setAckChecked","touched","setTouched","showAckError","handleAckCheckboxChange","checked","shake","timeout","setPaperShaking","setTimeout","useShakePaper","createMintTransaction","destAddress","mintedCurrencyChain","dayIndex","txValid","preValidateMintTransaction","canInitializeMinting","handleConfirm","setWalletPickerOpened","onMintTxCreated","destination","jsonObj","gatewayAddress","addTransaction","MINT_TRANSACTION","search","createTxQueryString","state","txState","newTx","creatingMintTx","setCreatingMintTx","finally","strvalue","Divider","FormControl","FormControlLabel","control","Checkbox","FormLabel","htmlFor","TooltipWithIcon","useFetchBalances","currencySymbols","bridgeChain","bridgeChainConfig","Chain","mintChainClassMap","rentxName","resetBalances","fetchAssetBalance","currencyConfig","chainMapping","isSupportedByCurrentNetwork","getBalance","balance","toNumber","useDebounce","currencySymbol","sourceCurrencySymbol","addOrUpdateBalance","getAssetBalance","balances","balanceEntry","find","entry","getOptions","mode","Object","values","chainsConfig","currenciesConfig","iconStyles","useCondensedSelectStyles","select","useAssetDropdownStyles","borderRadius","shape","border","grayLight","inputRoot","supplementalText","iconWrapper","listIcon","assetName","assetFullName","listSubheader","pointerEvents","listSubheaderLabel","AssetDropdown","available","condensed","condensedSelectClasses","availabilityFilter","option","includes","createAvailabilityFilter","valueRenderer","selected","getOptionBySymbol","Icon","EmptyCircleIcon","MainIcon","getAssetData","Box","Select","undefined","renderValue","displayEmpty","MenuProps","anchorOrigin","vertical","horizontal","getContentAnchorEl","ListSubheader","filter","map","MenuItem","AssetDropdownWrapper","MintInitialStep","onNext","recoverOpened","setRecoverOpened","recoverTxId","setRecoverTxId","recoverError","setRecoverError","recoverGood","setRecoverGood","recoverProcessing","setRecoverProcessing","setSignatures","nnn","setNnn","handleRecover","preventDefault","handleRecoverClose","handleCurrencyChange","setMintCurrency","handleChainChange","setChain","handleNextStep","handleRecoverFinal","siggy","handleRecoverNext","signmsg","blame","fail_reason","mintedCurrencySymbol","supportedLockCurrencies","supportedMintDestinationChains","DialogContent","mb","Alert","severity","mt","TextField","autoFocus","style","useWalletPickerStyles","body","padding","header","headerTitle","headerCloseIcon","button","chainTitle","textTransform","useWalletEntryButtonStyles","alignContent","icon","WalletEntryButton","logo","iconClassName","walletConfig","getWalletConfigByRentxName","Button","size","fullWidth","WalletChainLabel","chainConfig","getChainConfigByRentxName","WalletConnectingInfo","walletSymbol","getWalletConfig","labels","initialTitle","actionTitle","initialMessage","actionMessage","getLabels","useTimeout","passed","isPassed","skyBlueLight","useWalletConnectionProgressStyles","WalletConnectionProgress","redLighter","WalletWrongNetworkInfo","subNetworkName","networkName","getNetworkConfigByRentxName","updateEth","AddBscMetamask","ret","createIndicatorClass","createPulseAnimation","pulsingStyles","pulsingKeyframes","useWalletConnectionIndicatorStyles","success","info","warning","WalletConnectionIndicator","classNameProp","connected","wrongNetwork","WRONG_NETWORK","disconnected","DISCONNECTED","connecting","CONNECTING","useWalletConnectionStatusButtonStyles","common","white","borderColor","boxShadow","defaultShadow","hoisted","tooltip","indicator","indicatorMobile","WalletConnectionStatusButton","wallet","mobile","indicatorClassName","indicatorMobileClassName","accountClassName","hoistedClassName","getWalletConnectionLabel","trimmedAddress","buttonProps","useBrowserNotifications","onEnabled","Notification","permission","handleEnable","requestPermission","showBrowserNotification","onclick","MintDepositToStatus","getLockAndMintParams","lockCurrencyConfig","lockChainConfig","suggestedAmount","mintAddressLink","useSetPaperTitle","orangeLight","Grow","in","getPaymentLink","content","MintDepositConfirmationStatus","depositHash","lockTxHash","lockTxLink","lockTxAmount","lockConfirmations","lockTargetConfirmations","dep","lockProcessingTime","transactions","confirmations","confirmed","targetConfirmations","link","MintDepositAcceptedStatus","onSubmit","onReload","submitting","submittingError","useSetActionRequired","mintChainConfig","notificationMessage","showNotification","useNotifications","useEffectOnce","skyBlue","DestinationPendingStatus","mintTxLink","mintTxHash","MintCompletedStatus","mintHash","mintCurrencyConfig","conversionTotal","handleReturn","resetMint","showNotifications","flexWrap","py","useBigNavButtonStyles","transition","cursor","dark","opacity","hidden","BigNavButton","direction","rootClassName","NavigatePrevIcon","NavigateNextIcon","ButtonBase","DepositPrevButton","DepositNextButton","MintProcessStep","useLocalStorage","rdtx","setRdtx","useTxParam","parsedTx","depositN","setDepositHash","setTx","usePageTitle","getTxPageTitle","paperTitle","setPaperTitle","handlePreviousStepClick","goBack","handleWalletPickerOpen","showTransactionStatus","replace","feeCurrency","getCurrencyConfigByRentxName","sourceAsset","interval","setInterval","txChange","changes","i","vout","keys","clearInterval","updateHash","hash","MintTransactionStatus","setState","depositSourceHash","sortedDeposits","orderedHashes","deposit","total","initial","currentHash","setCurrentHash","currentIndex","nextHash","prevHash","handleNext","handlePrev","useDepositPagination","closeNotification","timeOut","setTimeOut","timeoutTimer","timeoutFunc","clearTimeout","good","submitSignRequest","submitToBridge","parseInt","activeDeposit","value_satoshi","persist","rdCopy","sigs","sigCopy","wrongAddressDialogOpened","setWrongAddressDialogOpened","handleCloseWrongAddressDialog","queryTx","parseTxQueryString","accountExplorerLink","getAddressExplorerLink","submitter","pagination","MintTransactionDepositStatus","MintConfiguration","TxConfigurationStep","INITIAL","step","setStep","onInitialNext","FEES","onFeesPrev","MintFlow","match","exact","ReleaseProgressStatus","generalError","getBurnAndReleaseParams","burnChainConfig","releaseCurrencyConfig","burnTxHash","burnTxLink","handleSubmit","buttonSubmitting","Boolean","ReleaseCompletedStatus","releaseChainConfig","releaseTxLink","releaseAddressLink","resetRelease","targetAmount","ReleaseShortcutCompletedStatus","sha256","payload","createHash","digest","addressTypes","p2pkh","p2sh","getAddressInfo","decoded","prefix","substr","bech32","decode","df","tb","bcrt","regtest","witnessVersion","words","fromWords","p2wpkh","p2tr","p2wsh","parseBech32","base58_to_binary","version","checksum","expectedChecksum","some","index","Number","addressType","validate","addressInfo","releaseTooltips","ReleaseFeesStep","releasingInitialized","setReleasingInitialized","releaseTxId","setReleaseTxId","ethconf","setEthconf","$release","BURN","getBurn","amount_bgint","BigInt","utils","toWei","useBurn","destinationCurrency","createReleaseTransaction","canInitializeReleasing","preValidateReleaseTransaction","targetCurrency","validateAddress","getter","Executed","Confirmations","input","OutlinedTextField","InputProps","notched","OutlinedTextFieldWrapper","BigOutlinedTextFieldWrapper","SmallOutlinedTextFieldWrapper","ReleaseInitialStep","supportedReleaseCurrencies","setReleaseCurrency","handleAddressChange","setReleaseAddress","handleAmountChange","setReleaseAmount","basicCondition","hasBalance","DefiTx","overflowWrap","supportedBurnChains","placeholder","BrowserNotificationsDrawer","onEnable","BrowserNotificationButton","pressed","onTooltipClose","tooltipOpened","ClickAwayListener","onClickAway","Tooltip","disableFocusListener","disableHoverListener","disableTouchListener","useTransactionMenuItemStyles","TransactionMenuItem","dense","ListItemIcon","useTransactionMenuStyles","modalTitle","titleIconWrapper","menuItems","transferId","TransactionMenu","onDeleteTx","onUpdateTx","handleClose","confirmOpen","setConfirmOpen","handleConfirmClose","handleDeleteWithConfirm","updateOpen","setUpdateOpen","handleUpdateClose","handleUpdateOpen","TxSettingsIcon","AddIcon","DeleteIcon","externalLinkAttributes","ConfirmTransactionDeletionDrawer","deleting","setDeleting","handleDeleteTx","startIcon","isValidInteger","isInteger","UpdateTransactionDrawer","setAmount","setVout","setHash","updating","setUpdating","valid","newValue","handleVoutChange","handleHashChange","handleUpdateTx","useReleaseTransactionPersistence","service","ReleaseProcessStep","reloading","setReloading","reloadTx","menuOpened","setMenuOpened","handleMenuClose","handleMenuOpen","removeTransaction","useTransactionDeletion","modalOpened","setModalOpened","setTooltipOpened","handleTooltipClose","handleModalOpen","handleModalClose","useBrowserNotificationsConfirmation","burnCurrencyConfig","valueEquivalent","fixedDecimalScale","ReleaseTransactionStatus","burnTransaction","cloneTx","providers","entries","reduce","c","machineHook","useMachine","burnMachine","context","sdk","getRenJs","fromChainMap","burnChainMap","toChainMap","releaseChainMap","autoSubmit","devTools","XSTATE_DEVTOOLS","useBurnMachine","current","stop","setSubmitting","timeoutError","handleReload","RELEASE_TRANSACTION","ReleaseConfiguration","ReleaseFlow","supportedParamNetworks","RenNetwork","Mainnet","Testnet","TestnetVDot3","MainnetVDot3","featureFlags","BSC_MM_ENABLED","queryString","bscMetamaskEnabled","MEWCONNECT_ENABLED","MEWConnectEnabled","WALLETCONNECT_ENABLED","walletConnectEnabled","1","42","renNetworkToEthNetwork","ethNetworkToRenNetwork","walletPickerModalConfig","targetEthChainId","chains","RenChain","ethereum","EthereumInjectedConnector","networkIdMapper","EthereumMEWConnectConnector","rpc","INFURA_ID","EthereumWalletConnectConnector","qrcode","binanceSmartChain","BinanceSmartChainInjectedConnector","getProvider","MainLayout","useMobileLayoutStyles","parsed","useSetNetworkFromParam","useSyncMultiwalletNetwork","useWeb3Signatures","$walletUser","isAuthenticating","$isAuthenticating","isAuthenticated","authenticate","useAuthentication","txHistoryOpened","$transactionsData","$transactionsNeedsAction","$authRequired","setAuthWarningOpened","mobileMenuOpen","setMobileMenuOpen","handleMobileMenuClose","handleMobileMenuOpen","useWindowSize","breakpoints","setTxHistoryOpened","walletPickerOpen","$walletPickerOpened","pickerClasses","React","walletMenuAnchor","setWalletMenuAnchor","handleWalletPickerClose","handleWalletMenuClose","handleWalletButtonClick","currentTarget","handleDisconnectWallet","walletPickerOptions","ConnectingInfo","WrongNetworkInfo","config","debugWallet","debugMultiwallet","debugNetworkName","drawerId","copied","setCopied","handleClick","copyToClipboard","ToolbarMenu","desktopMenu","rightMargin","mobileMenu","aria-controls","aria-haspopup","DrawerMenu","Drawer","anchor","keepMounted","PaperProps","drawerPaper","drawerHeader","drawerClose","ListItem","drawerListItem","mobileMenuButton","drawerFooterListItem","Footer","WalletLogo","to","p","WalletMenu","Menu","anchorEl","transformOrigin","MobileLayout","Logo","ConnectedMainLayout","MainPage","localStorage","getItem","storageKeys","TERMS_AGREED","WELCOME","paperShaking","$ui"],"mappings":"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","file":"static/js/8.8784cb76.chunk.js","sourcesContent":["import { env } from '../constants/environmentVariables'\nimport fetch from 'node-fetch';\nimport * as bitcoin from 'bitcoinjs-lib'\nimport * as sts from 'satoshi-bitcoin-ts'\nimport { VpnKeyTwoTone } from '@material-ui/icons';\nexport class Blame {\n        fail_reason?: string\n}\n\nexport class DepositMessage {\n        status?: number\n        result?: string\n        extra?: string\n        blame?: Blame\n}\n\nexport class Vout {\n  txid?: string\n  n?: number\n  value?: string\n  value_satoshi?: number\n}\n\nexport class TxOutWhaleScript{\n  type?: string\n  hex?: string\n}\nexport class TxOutWhale{\n  id?: string\n  txid?: string\n  n?: number\n  value?: string\n  tokenId?: number\n  script?: TxOutWhaleScript\n}\n\nexport class TxOutsWhale {\n  data?: TxOutWhale[]\n}\n\n\nexport class DepositEntry {\n        vout?: Vout\n        current_height?: number;\n        tx_height?: number;\n        confirmations?: number\n        good?: boolean\n        good_buffer?: boolean\n        destTxHash?: string\n}\n\nexport class Data {\n  data?: DepositEntry[]\n}\n\nexport class DepositsMessage {\n  status?: number\n  result?: Data\n  extra?: string\n  blame?: Blame\n}\nexport class Log {\n  From?: string\n  To?: string\n  Bridge?: string\n  Value?: number\n  Extradata?: number\n}\nexport class LogsMessage {\n  Confirmations?: number\n  Executed?: boolean\n  Log?: Log\n  DefiTx?: string\n}\n\nexport class Signature {\n  signed_msg?: string\n  r?: string\n  s?: string\n  recovery_id?: string\n}\n\nexport class SignatureMessage {\n  status?: number\n  signatures?: Signature[]\n  blame?: Blame\n}\n\nvar defichain = {\n  bip32: {\n    public: 0x0488b21e,\n    private: 0x0488ade4\n  },\n  messagePrefix: '\\Defichain Signed Message:\\n',\n  pubKeyHash: 0x12,\n  scriptHash: 0x51,\n  wif: 0x80\n}  as bitcoin.networks.Network\n\nexport const pkshToAddress = (scriptPubKey: string) => {\n  var address = bitcoin.address.fromOutputScript(Buffer.from(scriptPubKey, \"hex\"), defichain)\n  return address\n}\n\nexport const strToSatoshi = (val: string) => {\n  return sts.toSatoshi(val)\n}\n\nexport const getTransactionN = (address: string, txid: string) => {\n  return new Promise(async (resolve, reject) => {\n    const objTx = await getTxOutsWhale(txid)\n    console.log(objTx)\n    if ((objTx?.data?.length || 0) == 0){\n        reject(\"This TxID is not known on the Defichain blockchain\")\n    }\n    objTx?.data?.forEach(element => {\n       if ((element?.script?.type || \"\") === \"pubkeyhash\"){\n         let recoveredAddress = pkshToAddress(element?.script?.hex || \"\")\n         console.log(recoveredAddress.toLowerCase(),\"==\",address.toLowerCase())\n         if(recoveredAddress.toLowerCase() === address.toLowerCase()) {\n           var vt: VoutViktor = {n: element?.n, satoshi: element?.value}\n           resolve(vt)\n         }\n       }\n    });\n\n    reject(\"This transaction does not pay into your deposit address\")\n  })\n}\n\n\nexport const buildUrl = (destChain: string) => {\n  if (destChain == \"ethereum\")\n    return env.ETHEREUM_BACKEND_ENDPOINT;\n  else return env.BSC_BACKEND_ENDPOINT;\n}\nexport const getDepositAddress = async (userAddress: string, destChain: string) => {\n  let url = buildUrl(destChain) + \"/deposit/\" + userAddress;\n  let settings = { method: \"Get\" };\n\n  return fetch(url, settings).then(res => res.json() as DepositMessage);\n};\n\nexport type VoutViktor = {\n  n?: number;\n  satoshi?: string;\n};\n\nexport const getTxOutsWhale = async (txid: string) => {\n  let url = \"https://ocean.defichain.com/v0/mainnet/transactions/\" + txid + \"/vouts\"\n  let settings = { method: \"Get\" };\n\n  return fetch(url, settings).then(res => res.json() as TxOutsWhale);\n};\n\nexport const getDeposits = async (userAddress: string, destChain: string) => {\n  let url = buildUrl(destChain) + \"/eligible/\" + userAddress;\n  let settings = { method: \"Get\" };\n  return fetch(url, settings).then(res => res.json() as DepositsMessage);\n};\n\nexport const getKeySignatures = async (userAddress: string, txid: string, n: number, destChain: string) => {\n  let url = buildUrl(destChain) + \"/mint/\" + userAddress + \"/\" + txid + \"/\" + n;\n  console.log(url)\n  let settings = { method: \"Get\" };\n  return fetch(url, settings).then(res => res.json() as SignatureMessage);\n};\n\nexport const getLogs = async (txid: string, destChain: string) => {\n  let url = buildUrl(destChain) + \"/logs/\" + txid;\n  let settings = { method: \"Get\" };\n  return fetch(url, settings).then(res => res.json() as LogsMessage);\n};","import {\n  makeStyles,\n  Paper,\n  PaperProps,\n  styled,\n  Theme,\n} from \"@material-ui/core\";\nimport classNames from \"classnames\";\nimport React, { FunctionComponent } from \"react\";\nimport { useShakingStyles } from \"../../theme/animationUtils\";\n\nconst useBridgePaperStyles = makeStyles((theme) => {\n  return {\n    root: {\n      maxWidth: 400,\n      margin: \"0 auto\",\n      position: \"relative\",\n      overflow: \"hidden\",\n    },\n  };\n});\n\ntype BridgePurePaperProps = PaperProps & {\n  shaking?: boolean;\n};\n\nexport const BridgePurePaper: FunctionComponent<BridgePurePaperProps> = ({\n  shaking,\n  className,\n  ...props\n}) => {\n  const classes = useBridgePaperStyles();\n  const shakingStyles = useShakingStyles();\n  const resolvedClassName = classNames(className, {\n    [shakingStyles.shaking]: shaking,\n  });\n  return <Paper className={resolvedClassName} classes={classes} {...props} />;\n};\n\ntype BridgePaperProps = PaperContentProps & BridgePurePaperProps;\n\n// deprecated - used only in catalog - remove gradually\nexport const BridgePaper: FunctionComponent<BridgePaperProps> = ({\n  topPadding,\n  bottomPadding = true,\n  children,\n  ...rest\n}) => {\n  return (\n    <BridgePurePaper {...rest}>\n      <PaperContent topPadding={topPadding} bottomPadding={bottomPadding}>\n        {children}\n      </PaperContent>\n    </BridgePurePaper>\n  );\n};\n\nexport const BridgePaperWrapper = styled(\"div\")({\n  marginTop: 40,\n});\n\nconst SMALL_PADDING = 10;\nconst MEDIUM_PADDING = 20;\nconst BIG_PADDING = 40;\n\nconst getPadding = (variant: PaddingVariant = \"big\") => {\n  switch (variant) {\n    case \"small\":\n      return SMALL_PADDING;\n    case \"medium\":\n      return MEDIUM_PADDING;\n    case \"big\":\n    default:\n      return BIG_PADDING;\n  }\n};\n\nconst usePaperContentStyles = makeStyles<Theme, PaperContentProps>((theme) => ({\n  root: {\n    paddingLeft: ({ paddingVariant }) => getPadding(paddingVariant),\n    paddingRight: ({ paddingVariant }) => getPadding(paddingVariant),\n  },\n  top: {\n    paddingTop: ({ paddingVariant }) => getPadding(paddingVariant),\n  },\n  bottom: {\n    paddingBottom: ({ paddingVariant }) => getPadding(paddingVariant),\n  },\n  darker: {\n    backgroundColor: theme.customColors.whiteDarker,\n  },\n}));\n\ntype PaddingVariant = \"big\" | \"medium\" | \"small\";\n\nexport type PaperContentProps = {\n  darker?: boolean;\n  topPadding?: boolean;\n  bottomPadding?: boolean;\n  paddingVariant?: PaddingVariant;\n  className?: string;\n};\n\nexport const PaperContent: FunctionComponent<PaperContentProps> = ({\n  topPadding,\n  bottomPadding,\n  darker,\n  paddingVariant,\n  className,\n  children,\n}) => {\n  const styles = usePaperContentStyles({ paddingVariant: paddingVariant });\n  const resolvedClassName = classNames(styles.root, className, {\n    [styles.top]: topPadding,\n    [styles.bottom]: bottomPadding,\n    [styles.darker]: darker,\n  });\n  return <div className={resolvedClassName}>{children}</div>;\n};\n\nexport const PaperHeader = styled(\"header\")({\n  display: \"flex\",\n  justifyContent: \"space-between\",\n  alignItems: \"center\",\n  paddingTop: SMALL_PADDING,\n  paddingBottom: SMALL_PADDING,\n  paddingLeft: SMALL_PADDING,\n  paddingRight: SMALL_PADDING,\n});\n\nexport const PaperNav = styled(\"div\")({\n  justifySelf: \"flex-start\",\n  minWidth: 72,\n});\n\nexport const PaperActions = styled(\"div\")({\n  justifySelf: \"flex-end\",\n  minWidth: 72,\n  \"& > *\": {\n    margin: \"0 4px\",\n    \"&:first-child\": {\n      marginLeft: 0,\n    },\n    \"&:last-child\": {\n      marginRight: 0,\n    },\n  },\n});\n\nexport const PaperTitle = styled(\"div\")({\n  justifySelf: \"center\",\n  textAlign: \"center\",\n  width: \"100%\",\n});\n\nconst useSpacedContentStyles = makeStyles({\n  root: {\n    minHeight: 200,\n  },\n  rootSmaller: {\n    minHeight: 130,\n  },\n});\n\ntype SpacedPaperContentProps = PaperContentProps & {\n  smaller?: boolean;\n};\n\nexport const SpacedPaperContent: FunctionComponent<SpacedPaperContentProps> = ({\n  smaller,\n  ...rest\n}) => {\n  const styles = useSpacedContentStyles();\n  const className = classNames(styles.root, {\n    [styles.rootSmaller]: smaller,\n  });\n  return <PaperContent className={className} {...rest} />;\n};\n","import { Tab, Tabs, TabsProps } from \"@material-ui/core\";\nimport React, { FunctionComponent, useCallback } from \"react\";\nimport { useHistory, useRouteMatch } from \"react-router-dom\";\nimport { paths } from \"../../../pages/routes\";\n\nexport const TransactionTypeTabs: FunctionComponent<TabsProps> = () => {\n  const history = useHistory();\n  const { path } = useRouteMatch();\n  const onTabChange = useCallback(\n    (event: React.ChangeEvent<{}>, newPath: string) => {\n      history.push(newPath);\n    },\n    [history]\n  );\n\n  return (\n    <>\n      <Tabs\n        value={path}\n        onChange={onTabChange}\n        indicatorColor=\"primary\"\n        variant=\"fullWidth\"\n      >\n        <Tab\n          label={\"Pull From Defichain\"}\n          value={paths.MINT}\n        />\n        <Tab\n          label={\"Send To Defichain\"}\n          value={paths.RELEASE}\n        />\n      </Tabs>\n    </>\n  );\n};\n","import firebase from \"firebase/app\";\n\nrequire(\"firebase/auth\");\nrequire(\"firebase/firestore\");\nrequire(\"firebase/functions\");\n\n// Creates a user profile\nconst createOrUpdateProfileData = async (\n  db: firebase.firestore.Firestore,\n  uid: string\n) => {\n  // update user collection\n  const doc = db.collection(\"users\").doc(uid);\n  const docData = await doc.get();\n  try {\n    if (docData.exists) {\n      // add a new signature if needed\n      await doc.update({\n        updated: firebase.firestore.Timestamp.fromDate(new Date(Date.now())),\n      });\n    } else {\n      // create user\n      await doc.set({\n        uid,\n        updated: firebase.firestore.Timestamp.fromDate(new Date(Date.now())),\n        signatures: [],\n      });\n    }\n  } catch (e) {\n    console.error(\"failed to update user profile\", e);\n    throw e;\n  }\n};\n\n// Check if an account exists for the given id and signature,\n// otherwise attempt to register\nconst signInOrRegister = async (\n  id: string,\n  signature: string\n): Promise<firebase.User | null> => {\n  let token: string | null = null;\n  try {\n    const res = await firebase.functions().httpsCallable(\"authenticate\")({\n      signed: signature,\n      account: id,\n    });\n\n    token = res.data.token;\n    if (!token) {\n      throw new Error(\"missing token\");\n    }\n  } catch (e) {\n    console.error(\"Failed to create token\", e);\n    throw e;\n  }\n\n  let user;\n  try {\n    user = token && (await firebase.auth().signInWithCustomToken(token)).user;\n  } catch (e) {\n    // FIXME: we should probably handle wrong signatures here, as it would imply\n    // some sort of corruption or attack.\n    console.error(\"Failed to authenticate with token\", e);\n    throw e;\n  }\n  if (!user) return null;\n  // always create / update profile data\n  await createOrUpdateProfileData(firebase.firestore(), user.uid);\n  return user;\n};\n\n// Check if the user is currently authenticated for the correct address,\n// otherwise attempt to sign in or register for that address\n// TODO: remove \"signature\" and only rely on \"rawSignature\" because\n// only rawSignature can be verified\nexport const getFirebaseUser = async (\n  address: string,\n  signatures: { rawSignature: string; signature: string }\n) => {\n  const { currentUser } = firebase.auth();\n  if (!currentUser || currentUser.uid !== address) {\n    // If the user is logged in with another wallet, sign out first\n    if (currentUser?.uid !== address) {\n      await firebase.auth().signOut();\n    }\n    return signInOrRegister(address, signatures.rawSignature);\n  } else {\n    return currentUser;\n  }\n};\n","import { GatewaySession } from \"@renproject/ren-tx\";\nimport firebase from \"firebase/app\";\nimport { env } from \"../../../constants/environmentVariables\";\n\nimport { Database } from \"../database\";\nimport { getFirebaseUser } from \"./firebaseUtils\";\n\nif (!env.FIREBASE_KEY) {\n  console.warn(`No database key set.`);\n}\n\nfirebase.initializeApp({\n  apiKey: env.FIREBASE_KEY,\n  authDomain: window.location.hostname,\n  projectId: env.FIREBASE_PROJECT_ID,\n});\n\nrequire(\"firebase/firestore\");\n\ntype DbTimestamps = {\n  seconds: number;\n  nanoseconds: number;\n};\n\nexport type DbMeta = {\n  state: string;\n};\n\nexport type DbGatewaySession = GatewaySession & {\n  updated: DbTimestamps;\n  created: DbTimestamps;\n  meta: DbMeta;\n};\n\nexport class FireBase<Transaction extends { id: string }>\n  implements Database<Transaction> {\n  private db: firebase.firestore.Firestore;\n\n  constructor() {\n    this.db = firebase.firestore();\n  }\n\n  public addTx = async (\n    tx: Transaction,\n    localWeb3Address: string,\n    fsSignature: string | null\n  ) => {\n    // add timestamps\n    const timestamps = firebase.firestore.Timestamp.fromDate(\n      new Date(Date.now())\n    ) as DbTimestamps;\n\n    const dbTx = {\n      ...tx,\n      created: timestamps,\n      updated: timestamps,\n    };\n\n    await this.db\n      .collection(\"transactions\")\n      .doc(tx.id)\n      .set({\n        user: localWeb3Address.toLowerCase(),\n        walletSignature: fsSignature,\n        id: tx.id,\n        updated: timestamps,\n        createdSeconds: timestamps.seconds,\n        data: JSON.stringify(dbTx),\n      })\n      .catch((e) => console.error(\"failed to track tx\", e));\n  };\n\n  public updateTx = async (tx: Transaction) => {\n    const timestamps = firebase.firestore.Timestamp.fromDate(\n      new Date(Date.now())\n    );\n    const dbTx = { ...tx, updated: timestamps };\n    try {\n      await this.db\n        .collection(\"transactions\")\n        .doc(tx.id)\n        .update({\n          data: JSON.stringify(dbTx),\n          updated: timestamps,\n        });\n    } catch (e) {\n      console.error(\"failed to update\", e);\n      throw e;\n    }\n  };\n\n  public deleteTx = async (tx: Transaction) => {\n    try {\n      await this.db\n        .collection(\"transactions\")\n        .doc(tx.id)\n        .update({ deleted: true });\n    } catch (e) {\n      console.error(\"failed to delete\", e);\n      throw e;\n    }\n  };\n\n  public getTx = async (tx: Transaction) => {\n    return this.db\n      .collection(\"transactions\")\n      .doc(tx.id)\n      .get()\n      .then((doc) => {\n        if (doc.exists) {\n          const data = doc.data();\n          if (data && !data.deleted) {\n            return JSON.parse(data.data);\n          }\n        }\n        throw new Error(`Tx: ${tx.id} not found`);\n      })\n      .catch((e) => {\n        console.error(\"Failed to get tx\", e);\n        throw e;\n      });\n  };\n\n  public getTxs = async (uid: string): Promise<Transaction[]> => {\n    try {\n      const fsDataSnapshot = await this.db\n        .collection(\"transactions\")\n        .where(\"user\", \"==\", uid.toLowerCase())\n        .get();\n      const fsTransactions: Transaction[] = [];\n      if (!fsDataSnapshot.empty) {\n        fsDataSnapshot.forEach((doc: any) => {\n          const data = doc.data();\n          if (data.deleted) return;\n          const tx: Transaction = JSON.parse(data.data);\n          fsTransactions.push(tx);\n        });\n      }\n      return fsTransactions;\n    } catch (e) {\n      console.error(\"failed to fetch txs\", e);\n      throw e;\n    }\n  };\n\n  public getUser = async (\n    address: string,\n    signatures: { signature: string; rawSignature: string }\n  ) => {\n    const user = await getFirebaseUser(address, signatures);\n    return (\n      user && {\n        uid: user.uid,\n      }\n    );\n  };\n}\n","export type TransactionStatusType = \"completed\" | \"pending\" | \"submitted\";\n\n// multiwallet compatible\nexport enum WalletStatus {\n  DISCONNECTED = \"disconnected\",\n  CONNECTING = \"connecting\",\n  CONNECTED = \"connected\",\n  WRONG_NETWORK = \"wrong_network\",\n}\n\nexport type WalletConnectionStatusType =\n  | \"disconnected\"\n  | \"connecting\"\n  | \"connected\"\n  | \"wrong_network\";\n","import { FireBase } from \"./firebase/firebase\";\n\nexport interface Database<Transaction extends { id: string }> {\n  addTx: (\n    tx: Transaction,\n    localWeb3Address: string,\n    fsSignature: string | null\n  ) => Promise<void>;\n\n  updateTx: (tx: Transaction) => Promise<void>;\n\n  deleteTx: (tx: Transaction) => Promise<void>;\n\n  getTxs: (signature: string) => Promise<Transaction[]>;\n\n  getUser: (\n    address: string,\n    signatures: { rawSignature: string; signature: string }\n  ) => Promise<{ uid: string } | null>;\n}\n\nexport const newDefaultDatabase = <Transaction extends { id: string }>() =>\n  new FireBase<Transaction>();\n\nexport const db = newDefaultDatabase();\n","export const trimAddress = (address?: string, chars = 4) => {\n  if (!address) {\n    return \"\";\n  }\n  if (address.length <= 2 * chars) {\n    return address;\n  }\n  const start = address.slice(0, chars);\n  const end = address.slice(-chars);\n  return `${start}...${end}`;\n};\n\nconst vowels = \"eaiou\".split(\"\");\nexport const isFirstVowel = (str: string) =>\n  Boolean(str) && str.length > 0 && vowels.includes(str.charAt(0).toLowerCase());\n","const connectBinanceChain = () => {\n  if (getBinanceChain() !== \"undefined\") {\n    getBinanceChain().enable().catch(console.error);\n  }\n};\n\nconst getBinanceChain = () => {\n  return (window as any).BinanceChain;\n};\n\nexport const signWithBinanceChain: (msg: string) => Promise<string> = (\n  msg: string\n) =>\n  new Promise((resolve, reject) => {\n    if (!getBinanceChain()) {\n      reject(\"no binance chain\");\n    }\n    getBinanceChain()\n      .request({ method: \"eth_requestAccounts\" })\n      .then((addresses: Array<string>) => {\n        const from = addresses[0];\n        if (!from) return connectBinanceChain();\n        getBinanceChain()\n          .request({\n            method: \"eth_sign\",\n            params: [from, msg],\n          })\n          .then(resolve)\n          .catch(reject);\n      });\n  });\n","import { base58_to_binary } from 'base58-js'\nimport { bech32, bech32m } from 'bech32';\nimport { createHash } from 'sha256-uint8array';\n\nconst sha256 = (payload: Uint8Array) => createHash().update(payload).digest();\n\nenum Network {\n  mainnet = 'mainnet',\n  testnet = 'testnet',\n  regtest = 'regtest',\n}\n\nenum AddressType {\n  p2pkh = 'p2pkh',\n  p2sh = 'p2sh',\n  p2wpkh = 'p2wpkh',\n  p2wsh = 'p2wsh',\n  p2tr = 'p2tr',\n}\n\ntype AddressInfo = {\n  bech32: boolean;\n  network: Network;\n  address: string;\n  type: AddressType;\n};\n\nconst addressTypes: { [key: number]: { type: AddressType; network: Network } } = {\n  0x12: {\n    type: AddressType.p2pkh,\n    network: Network.mainnet,\n  },\n\n\n  0x5a: {\n    type: AddressType.p2sh,\n    network: Network.mainnet,\n  },\n\n};\n\nconst parseBech32 = (address: string): AddressInfo => {\n  let decoded;\n\n  try {\n    //if (address.startsWith('bc1p') || address.startsWith('tb1p') || address.startsWith('bcrt1p')) {\n    //  decoded = bech32m.decode(address);\n    //} else {\n      decoded = bech32.decode(address);\n    //}\n  } catch (error) {\n    throw new Error('Invalid address');\n  }\n\n  const mapPrefixToNetwork: { [key: string]: Network } = {\n    df: Network.mainnet,\n    tb: Network.testnet,\n    bcrt: Network.regtest,\n  };\n\n  const network: Network = mapPrefixToNetwork[decoded.prefix];\n\n  if (network === undefined) {\n    throw new Error('Invalid address');\n  }\n\n  const witnessVersion = decoded.words[0];\n\n  if (witnessVersion < 0 || witnessVersion > 16) {\n    throw new Error('Invalid address');\n  }\n  const data = bech32.fromWords(decoded.words.slice(1));\n\n  let type;\n\n  if (data.length === 20) {\n    type = AddressType.p2wpkh;\n  } else if (witnessVersion === 1) {\n    type = AddressType.p2tr;\n  } else {\n    type = AddressType.p2wsh;\n  }\n\n  return {\n    bech32: true,\n    network,\n    address,\n    type,\n  };\n};\n\nconst getAddressInfo = (address: string): AddressInfo => {\n  let decoded: Uint8Array;\n  const prefix = address.substr(0, 2).toLowerCase();\n\n  if (prefix === 'df' || prefix === 'tb') {\n    return parseBech32(address);\n  }\n\n  try {\n    decoded = base58_to_binary(address);\n  } catch (error) {\n    throw new Error('Invalid address');\n  }\n\n  const { length } = decoded;\n\n  if (length !== 25) {\n    throw new Error('Invalid address');\n  }\n\n  const version = decoded[0];\n\n  const checksum = decoded.slice(length - 4, length);\n  const body = decoded.slice(0, length - 4);\n\n  const expectedChecksum = sha256(sha256(body)).slice(0, 4);\n\n  if (checksum.some((value: number, index: number) => value !== expectedChecksum[index])) {\n    throw new Error('Invalid address');\n  }\n\n  const validVersions = Object.keys(addressTypes).map(Number);\n\n  if (!validVersions.includes(version)) {\n    throw new Error('Invalid address');\n  }\n\n  const addressType = addressTypes[version];\n\n  return {\n    ...addressType,\n    address,\n    bech32: false,\n  };\n};\n\nconst validate = (address: string, network?: Network) => {\n  try {\n    const addressInfo = getAddressInfo(address);\n    console.log(addressInfo)\n    if (network) {\n      return network === addressInfo.network;\n    }\n\n    return true;\n  } catch (error) {\n    return false;\n  }\n};\n\nexport { getAddressInfo, Network, AddressType, validate };\nexport default validate;","import { RenNetwork } from \"@renproject/interfaces\";\nimport { useMultiwallet } from \"@renproject/multiwallet-ui\";\nimport { env } from \"process\";\nimport { env as SS } from \"../../constants/environmentVariables\";\n\nimport { useCallback, useEffect, useMemo } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport Web3 from \"web3\";\nimport { AbiItem } from 'web3-utils'\nimport {\n  WalletConnectionStatusType,\n  WalletStatus,\n} from \"../../components/utils/types\";\nimport { storageKeys } from \"../../constants/constants\";\nimport { db } from \"../../services/database/database\";\nimport { signWithBinanceChain } from \"../../services/wallets/bsc\";\nimport { BridgeWallet, RenChain } from \"../../utils/assetConfigs\";\nimport { $renNetwork } from \"../network/networkSlice\";\nimport {\n  $isAuthenticating,\n  $multiwalletChain,\n  $walletUser,\n  setAuthRequired,\n  setSignatures,\n  settingUser,\n  setUser,\n} from \"./walletSlice\";\n\ntype WalletData = ReturnType<typeof useMultiwallet> & {\n  account: string;\n  status: WalletConnectionStatusType;\n  walletConnected: boolean;\n  provider: any;\n  symbol: BridgeWallet;\n  deactivateConnector: () => void;\n};\n\nconst resolveWallet = (provider: any) => {\n  if (provider?.isMetaMask) {\n    return BridgeWallet.METAMASKW;\n  }\n\n  if (provider?.chainId === \"0x61\" || provider?.chainId?.indexOf(\"Binance\")) {\n    return BridgeWallet.BINANCESMARTW;\n  }\n\n  if (provider?.isMewConnect || provider?.isMEWConnect) {\n    return BridgeWallet.MEWCONNECTW;\n  }\n\n  return BridgeWallet.UNKNOWNW;\n};\n\ntype UseWallet = (chain: string) => WalletData;\n\nexport const useWallet: UseWallet = (chain) => {\n  const {\n    enabledChains,\n    targetNetwork,\n    activateConnector,\n    setTargetNetwork,\n  } = useMultiwallet();\n  const { account = \"\", status = \"disconnected\" } =\n    enabledChains?.[chain] || {};\n  const provider = enabledChains?.[chain]?.provider;\n  const symbol = resolveWallet(provider);\n  const emptyFn = () => {};\n  const deactivateConnector =\n    enabledChains[chain]?.connector.deactivate || emptyFn;\n\n  return {\n    account,\n    status,\n    walletConnected: status === WalletStatus.CONNECTED,\n    provider,\n    symbol,\n    targetNetwork,\n    enabledChains,\n    activateConnector,\n    setTargetNetwork,\n    deactivateConnector,\n  } as WalletData;\n};\n\nexport const useSelectedChainWallet = () => {\n  const multiwalletChain = useSelector($multiwalletChain);\n  return useWallet(multiwalletChain);\n};\n\nexport const useSyncMultiwalletNetwork = () => {\n  const { targetNetwork, setTargetNetwork } = useSelectedChainWallet();\n  const renNetwork = useSelector($renNetwork);\n  useEffect(() => {\n    if (renNetwork !== targetNetwork) {\n      console.info(\"syncing multiwallet with network\", renNetwork);\n      setTargetNetwork(\n        renNetwork.includes(\"mainnet\")\n          ? RenNetwork.Mainnet\n          : renNetwork.includes(\"testnet\")\n          ? RenNetwork.Testnet\n          : renNetwork\n      );\n    }\n  }, [renNetwork, setTargetNetwork, targetNetwork]);\n};\n\nconst SIGN_MESSAGE = \"You are not supposed to do this!!\";\n\nconst ABI = [\n  {\n    \"anonymous\": false,\n    \"inputs\": [\n      {\n        \"indexed\": false,\n        \"internalType\": \"address\",\n        \"name\": \"From\",\n        \"type\": \"address\"\n      },\n      {\n        \"indexed\": false,\n        \"internalType\": \"string\",\n        \"name\": \"To\",\n        \"type\": \"string\"\n      },\n      {\n        \"indexed\": false,\n        \"internalType\": \"string\",\n        \"name\": \"Bridge\",\n        \"type\": \"string\"\n      },\n      {\n        \"indexed\": false,\n        \"internalType\": \"uint256\",\n        \"name\": \"Value\",\n        \"type\": \"uint256\"\n      },\n      {\n        \"indexed\": false,\n        \"internalType\": \"uint256\",\n        \"name\": \"Extradata\",\n        \"type\": \"uint256\"\n      }\n    ],\n    \"name\": \"DepositToDefichain\",\n    \"type\": \"event\"\n  },\n  {\n    \"inputs\": [],\n    \"name\": \"owner\",\n    \"outputs\": [\n      {\n        \"internalType\": \"address\",\n        \"name\": \"\",\n        \"type\": \"address\"\n      }\n    ],\n    \"stateMutability\": \"view\",\n    \"type\": \"function\",\n    \"constant\": true\n  },\n  {\n    \"inputs\": [\n      {\n        \"internalType\": \"bytes\",\n        \"name\": \"\",\n        \"type\": \"bytes\"\n      }\n    ],\n    \"name\": \"spent_outputs\",\n    \"outputs\": [\n      {\n        \"internalType\": \"bool\",\n        \"name\": \"\",\n        \"type\": \"bool\"\n      }\n    ],\n    \"stateMutability\": \"view\",\n    \"type\": \"function\",\n    \"constant\": true\n  },\n  {\n    \"inputs\": [\n      {\n        \"internalType\": \"string\",\n        \"name\": \"\",\n        \"type\": \"string\"\n      }\n    ],\n    \"name\": \"supported_bridges\",\n    \"outputs\": [\n      {\n        \"internalType\": \"address\",\n        \"name\": \"\",\n        \"type\": \"address\"\n      }\n    ],\n    \"stateMutability\": \"view\",\n    \"type\": \"function\",\n    \"constant\": true\n  },\n  {\n    \"inputs\": [\n      {\n        \"internalType\": \"address\",\n        \"name\": \"new_owner\",\n        \"type\": \"address\"\n      }\n    ],\n    \"name\": \"transferOwnership\",\n    \"outputs\": [],\n    \"stateMutability\": \"nonpayable\",\n    \"type\": \"function\"\n  },\n  {\n    \"inputs\": [\n      {\n        \"internalType\": \"string\",\n        \"name\": \"name\",\n        \"type\": \"string\"\n      },\n      {\n        \"internalType\": \"address\",\n        \"name\": \"tokenAddress\",\n        \"type\": \"address\"\n      }\n    ],\n    \"name\": \"addNewToken\",\n    \"outputs\": [],\n    \"stateMutability\": \"nonpayable\",\n    \"type\": \"function\"\n  },\n  {\n    \"inputs\": [\n      {\n        \"internalType\": \"string\",\n        \"name\": \"name\",\n        \"type\": \"string\"\n      }\n    ],\n    \"name\": \"removeToken\",\n    \"outputs\": [],\n    \"stateMutability\": \"nonpayable\",\n    \"type\": \"function\"\n  },\n  {\n    \"inputs\": [\n      {\n        \"internalType\": \"string\",\n        \"name\": \"bridge\",\n        \"type\": \"string\"\n      }\n    ],\n    \"name\": \"haveBridge\",\n    \"outputs\": [\n      {\n        \"internalType\": \"bool\",\n        \"name\": \"\",\n        \"type\": \"bool\"\n      }\n    ],\n    \"stateMutability\": \"view\",\n    \"type\": \"function\",\n    \"constant\": true\n  },\n  {\n    \"inputs\": [\n      {\n        \"internalType\": \"address\",\n        \"name\": \"targetAddress\",\n        \"type\": \"address\"\n      },\n      {\n        \"internalType\": \"uint256\",\n        \"name\": \"txid\",\n        \"type\": \"uint256\"\n      },\n      {\n        \"internalType\": \"uint256\",\n        \"name\": \"n\",\n        \"type\": \"uint256\"\n      },\n      {\n        \"internalType\": \"uint256\",\n        \"name\": \"amount\",\n        \"type\": \"uint256\"\n      },\n      {\n        \"internalType\": \"string\",\n        \"name\": \"bridge\",\n        \"type\": \"string\"\n      }\n    ],\n    \"name\": \"messageToSign\",\n    \"outputs\": [\n      {\n        \"internalType\": \"bytes\",\n        \"name\": \"\",\n        \"type\": \"bytes\"\n      }\n    ],\n    \"stateMutability\": \"pure\",\n    \"type\": \"function\",\n    \"constant\": true\n  },\n  {\n    \"inputs\": [\n      {\n        \"internalType\": \"address\",\n        \"name\": \"targetAddress\",\n        \"type\": \"address\"\n      },\n      {\n        \"internalType\": \"uint256\",\n        \"name\": \"txid\",\n        \"type\": \"uint256\"\n      },\n      {\n        \"internalType\": \"uint256\",\n        \"name\": \"n\",\n        \"type\": \"uint256\"\n      },\n      {\n        \"internalType\": \"uint256\",\n        \"name\": \"amount\",\n        \"type\": \"uint256\"\n      },\n      {\n        \"internalType\": \"string\",\n        \"name\": \"bridge\",\n        \"type\": \"string\"\n      }\n    ],\n    \"name\": \"hashToSign\",\n    \"outputs\": [\n      {\n        \"internalType\": \"bytes32\",\n        \"name\": \"\",\n        \"type\": \"bytes32\"\n      }\n    ],\n    \"stateMutability\": \"pure\",\n    \"type\": \"function\",\n    \"constant\": true\n  },\n  {\n    \"inputs\": [\n      {\n        \"internalType\": \"string\",\n        \"name\": \"targetAddress\",\n        \"type\": \"string\"\n      },\n      {\n        \"internalType\": \"string\",\n        \"name\": \"bridge\",\n        \"type\": \"string\"\n      },\n      {\n        \"internalType\": \"uint256\",\n        \"name\": \"amount\",\n        \"type\": \"uint256\"\n      }\n    ],\n    \"name\": \"burnToken\",\n    \"outputs\": [\n      {\n        \"internalType\": \"uint256\",\n        \"name\": \"\",\n        \"type\": \"uint256\"\n      }\n    ],\n    \"stateMutability\": \"nonpayable\",\n    \"type\": \"function\"\n  },\n  {\n    \"inputs\": [\n      {\n        \"internalType\": \"address\",\n        \"name\": \"targetAddress\",\n        \"type\": \"address\"\n      },\n      {\n        \"internalType\": \"uint256\",\n        \"name\": \"txid\",\n        \"type\": \"uint256\"\n      },\n      {\n        \"internalType\": \"uint256\",\n        \"name\": \"n\",\n        \"type\": \"uint256\"\n      },\n      {\n        \"internalType\": \"uint256\",\n        \"name\": \"amount\",\n        \"type\": \"uint256\"\n      },\n      {\n        \"internalType\": \"string\",\n        \"name\": \"bridge\",\n        \"type\": \"string\"\n      },\n      {\n        \"internalType\": \"bytes32\",\n        \"name\": \"signature_r\",\n        \"type\": \"bytes32\"\n      },\n      {\n        \"internalType\": \"bytes32\",\n        \"name\": \"signature_s\",\n        \"type\": \"bytes32\"\n      },\n      {\n        \"internalType\": \"uint8\",\n        \"name\": \"signature_v\",\n        \"type\": \"uint8\"\n      }\n    ],\n    \"name\": \"whoSignedThis\",\n    \"outputs\": [\n      {\n        \"internalType\": \"address\",\n        \"name\": \"\",\n        \"type\": \"address\"\n      }\n    ],\n    \"stateMutability\": \"pure\",\n    \"type\": \"function\",\n    \"constant\": true\n  },\n  {\n    \"inputs\": [\n      {\n        \"internalType\": \"address\",\n        \"name\": \"targetAddress\",\n        \"type\": \"address\"\n      },\n      {\n        \"internalType\": \"uint256\",\n        \"name\": \"txid\",\n        \"type\": \"uint256\"\n      },\n      {\n        \"internalType\": \"uint256\",\n        \"name\": \"n\",\n        \"type\": \"uint256\"\n      },\n      {\n        \"internalType\": \"uint256\",\n        \"name\": \"amount\",\n        \"type\": \"uint256\"\n      },\n      {\n        \"internalType\": \"string\",\n        \"name\": \"bridge\",\n        \"type\": \"string\"\n      },\n      {\n        \"internalType\": \"bytes32\",\n        \"name\": \"signature_r\",\n        \"type\": \"bytes32\"\n      },\n      {\n        \"internalType\": \"bytes32\",\n        \"name\": \"signature_s\",\n        \"type\": \"bytes32\"\n      },\n      {\n        \"internalType\": \"uint8\",\n        \"name\": \"signature_v\",\n        \"type\": \"uint8\"\n      }\n    ],\n    \"name\": \"mintToken\",\n    \"outputs\": [],\n    \"stateMutability\": \"nonpayable\",\n    \"type\": \"function\"\n  },\n  {\n    \"inputs\": [\n      {\n        \"internalType\": \"address\",\n        \"name\": \"in_signer\",\n        \"type\": \"address\"\n      }\n    ],\n    \"name\": \"initialize_gateway\",\n    \"outputs\": [],\n    \"stateMutability\": \"nonpayable\",\n    \"type\": \"function\"\n  },\n  {\n    \"inputs\": [\n      {\n        \"internalType\": \"address\",\n        \"name\": \"new_signer\",\n        \"type\": \"address\"\n      }\n    ],\n    \"name\": \"newSigner\",\n    \"outputs\": [],\n    \"stateMutability\": \"nonpayable\",\n    \"type\": \"function\"\n  },\n  {\n    \"inputs\": [\n      {\n        \"internalType\": \"uint256\",\n        \"name\": \"amount\",\n        \"type\": \"uint256\"\n      }\n    ],\n    \"name\": \"precisionRebase\",\n    \"outputs\": [\n      {\n        \"internalType\": \"uint256\",\n        \"name\": \"\",\n        \"type\": \"uint256\"\n      }\n    ],\n    \"stateMutability\": \"pure\",\n    \"type\": \"function\",\n    \"constant\": true\n  },\n  {\n    \"inputs\": [\n      {\n        \"internalType\": \"uint256\",\n        \"name\": \"amount\",\n        \"type\": \"uint256\"\n      }\n    ],\n    \"name\": \"reducePrecision\",\n    \"outputs\": [\n      {\n        \"internalType\": \"uint256\",\n        \"name\": \"\",\n        \"type\": \"uint256\"\n      }\n    ],\n    \"stateMutability\": \"pure\",\n    \"type\": \"function\",\n    \"constant\": true\n  },\n  {\n    \"inputs\": [\n      {\n        \"internalType\": \"uint256\",\n        \"name\": \"txid\",\n        \"type\": \"uint256\"\n      },\n      {\n        \"internalType\": \"uint256\",\n        \"name\": \"n\",\n        \"type\": \"uint256\"\n      }\n    ],\n    \"name\": \"manuallySpend\",\n    \"outputs\": [],\n    \"stateMutability\": \"nonpayable\",\n    \"type\": \"function\"\n  }\n];\n\n// TODO TBD: cache for more wallet providers?\nconst useWeb3 = () => {\n  const { provider } = useSelectedChainWallet();\n  return useMemo(() => new Web3(provider), [provider]);\n};\n\n\nconst sendRedeemTxHook = async (address: string,\n  web3: Web3,\n  chain: RenChain, targetAddress: string, txid: string, n: number, amount: number, bridge: string, r: string, s: string,v: number) => {    \n    return new Promise((resolve, reject) => {\n\n    if ((web3.currentProvider as any).connection.isMetaMask) {\n        let myContract = new web3.eth.Contract(ABI as AbiItem[], chain==\"ethereum\" ? SS.ETH_CONTRACT_ADDRESS : SS.BSC_CONTRACT_ADDRESS);\n        myContract.methods.mintToken(targetAddress, '0x' + txid, n, amount, bridge, r, s, v).send({from: address}).on('transactionHash', resolve)\n        .on('error', reject);;\n    }\n  })\n}\n\nconst addTokenHook = (web3: Web3, chain: RenChain) => {    \n  console.log(\"Add Token for Network:\", chain)\n      if ((web3.currentProvider as any).connection.isMetaMask) {\n        (web3.currentProvider as any).connection\n        .sendAsync({\n          method: 'wallet_watchAsset',\n          params: {\n            type: 'ERC20',\n            options: {\n              address: chain==\"ethereum\" ? SS.ETH_TOKEN_ADDRESS : SS.BSC_TOKEN_ADDRESS,\n              symbol: 'brDFI',\n              decimals: 18,\n              image: 'https://cryptologos.cc/logos/defichain-dfi-logo.svg?v=018',\n            },\n          },\n        }, (err: any, added: any) => {\n          console.log('provider returned', err, added)\n        })\n      }\n}\n\nconst addBinanceChainHook = async (web3: Web3, chain: RenChain) => {    \n  \n  return new Promise((resolve, reject) => {\n    let networkData = [\n      {\n        chainId: '0x38',\n            chainName: 'Binance Smart Chain',\n            nativeCurrency:\n                {\n                    name: 'BNB',\n                    symbol: 'BNB',\n                    decimals: 18\n                },\n            rpcUrls: ['https://bsc-dataseed.binance.org/'],\n            blockExplorerUrls: ['https://bscscan.com/'],\n      },\n    ];\n    if ((web3.currentProvider as any).connection.isMetaMask) {\n      (web3.currentProvider as any).connection\n      .request\n      ({\n        method: \"wallet_addEthereumChain\",\n        params: networkData,\n    \n      }, (err: any, added: any) => {\n        console.log('provider returned', err, added)\n        if (err || 'error' in added) {\n            reject(\"error\")\n        } else {\n            resolve(\"good\")\n        }\n    })\n    }\n})\n}\n\nconst addEthereumChainHook = async (web3: Web3, chain: RenChain) => {    \n  return new Promise((resolve, reject) => {\n    let networkData = [\n      {\n        chainId: '0x1',\n      },\n    ];\n    if ((web3.currentProvider as any).connection.isMetaMask) {\n      (web3.currentProvider as any).connection\n      .request\n      ({\n        method: \"wallet_switchEthereumChain\",\n        params: networkData,\n    \n      }, (err: any, added: any) => {\n        console.log('provider returned', err, added)\n        if (err || 'error' in added) {\n            reject(\"error\")\n        } else {\n            resolve(\"good\")\n        }\n    })\n    }\n})\n}\n\nconst sendBurnTxHook = async (address: string,\n  web3: Web3,\n  chain: RenChain, targetAddress: string, amount: bigint, bridge: string) => {    \n\n  return new Promise((resolve, reject) => {\n    if ((web3.currentProvider as any).connection.isMetaMask) {\n        let myContract = new web3.eth.Contract(ABI as AbiItem[], chain==\"ethereum\" ? SS.ETH_CONTRACT_ADDRESS : SS.BSC_CONTRACT_ADDRESS);\n        let response = myContract.methods.burnToken(targetAddress, bridge, \"0x\"+amount.toString(16)).send({from: address}).on('transactionHash', resolve)\n        .on('error', reject);;\n    }\n  })\n}\n\nexport const useRedeem = () => {\n  const chain = useSelector($multiwalletChain);\n  const { account, status } = useWallet(chain);\n  const web3 = useWeb3();\n  const dispatch = useDispatch();\n  const getSignatures = useCallback(async (targetAddress: string, txid: string, n: number, amount: number, bridge: string, r: string, s: string,v: number) => {\n    amount = amount - 0.01*100000000 // TODO make 0.1 fee variable\n    if (account && web3 && status === \"connected\") {\n      try {\n        console.log(targetAddress, txid, n, amount, bridge.toUpperCase(), r, s, v)\n        const signatures = await sendRedeemTxHook(account, web3, chain, targetAddress, txid, n, amount, bridge.toUpperCase(), r, s, v);\n        return {err:null, result:signatures}\n      } catch (error) {\n        return {err:error, result:null};\n      }\n    }\n    return {err:{code:-1, message:\"something went wrong\"}, result:null}\n  }, [account, web3, status, chain, dispatch]);\n\n  return { getSignatures };\n};\n\nexport const useToken = () => {\n  const chain = useSelector($multiwalletChain);\n  const web3 = useWeb3();\n  const getToken = useCallback(() => {\n    if (web3) {\n      addTokenHook(web3, chain)\n    }\n  }, [web3, chain]);\n\n  return { getToken };\n};\n\nexport const useAddBsc = (chainname: string) => {\n  const chain = useSelector($multiwalletChain);\n  const { account, status } = useWallet(chain);\n  const web3 = useWeb3();\n  const dispatch = useDispatch();\n  const updateBsc = useCallback(async () => {\n    if (web3) {\n      try {\n        if(chainname==\"Ethereum\"){\n            const signatures = await addEthereumChainHook(web3, chain);\n            return {err:null, result:signatures}\n        }else{\n            const signatures = await addBinanceChainHook(web3, chain);\n            return {err:null, result:signatures}\n        }\n      } catch (error) {\n        return {err:error, result:null};\n      }\n    }\n    return {err:{code:-1, message:\"something went wrong\"}, result:null}\n  }, [account, web3, status, chain, dispatch]);\n\n  return { updateBsc };\n};\n\n\nexport const useBurn = () => {\n  const chain = useSelector($multiwalletChain);\n  const { account, status } = useWallet(chain);\n  const web3 = useWeb3();\n  const dispatch = useDispatch();\n  const getBurn = useCallback(async (targetAddress: string, amount: number, bridge: string) => {\n    // TODO FIX THIS SHIT amount = amount*1000000000000000000 - 0.1*1000000000000000000 // TODO make 0.1 fee variable\n    var amount_bgint = BigInt(web3.utils.toWei(amount.toString(), 'ether'))\n    \n    if (account && web3 && status === \"connected\") {\n      try {\n        const signatures = await sendBurnTxHook(account, web3, chain, targetAddress, amount_bgint, bridge.toUpperCase());\n        return {err:null, result:signatures}\n      } catch (error) {\n        return {err:error, result:null};\n      }\n    }\n    return {err:{code:-1, message:\"something went wrong\"}, result:null}\n  }, [account, web3, status, chain, dispatch]);\n\n  return { getBurn };\n};\n\nconst getWeb3Signatures = async (\n  address: string,\n  web3: Web3,\n  chain: RenChain\n) => {\n  const localSigMap = JSON.parse(\n    localStorage.getItem(storageKeys.SIG_MAP) || \"{}\"\n  );\n  const localRawSigMap = JSON.parse(\n    localStorage.getItem(storageKeys.RAW_SIG_MAP) || \"{}\"\n  );\n  const addressLowerCase = address.toLowerCase();\n\n  let signature: string = localSigMap[addressLowerCase] || \"\";\n  let rawSignature: string = localRawSigMap[addressLowerCase] || \"\";\n\n  if (!signature || !rawSignature) {\n    // get unique wallet signature for database backup\n    if (\n      chain === RenChain.ethereum ||\n      // signing is actually based on wallet, not chain,\n      // so use this style if the provider is eth\n      // TODO: move signing functionality into multiwallet?\n      (web3.currentProvider as any).connection.isMetaMask\n    ) {\n      console.info(\"signing\");\n      rawSignature = await web3.eth.personal.sign(\n        web3.utils.utf8ToHex(SIGN_MESSAGE),\n        addressLowerCase,\n        \"\"\n      );\n    } else if (chain === RenChain.binanceSmartChain) {\n      rawSignature = await signWithBinanceChain(SIGN_MESSAGE);\n    }\n\n    localRawSigMap[addressLowerCase] = rawSignature;\n    localStorage.setItem(\n      storageKeys.RAW_SIG_MAP,\n      JSON.stringify(localRawSigMap)\n    );\n\n    signature = web3.utils.sha3(rawSignature);\n    localSigMap[addressLowerCase] = signature;\n    localStorage.setItem(storageKeys.SIG_MAP, JSON.stringify(localSigMap));\n  }\n  return { signature, rawSignature };\n};\n\nexport const useSignatures = () => {\n  const dispatch = useDispatch();\n  const chain = useSelector($multiwalletChain);\n  const { account, status } = useWallet(chain);\n  const web3 = useWeb3();\n  const getSignatures = useCallback(async () => {\n    console.debug(\"reauth\");\n    if (account && web3 && status === \"connected\") {\n      /*try {\n        const signatures = await getWeb3Signatures(account, web3, chain);\n        dispatch(setSignatures(signatures));\n        console.debug(\"account\", account);\n        dispatch(settingUser());\n        const userData = await db.getUser(account.toLowerCase(), signatures);\n        dispatch(setUser(userData));\n      } catch (error) {\n        // FIXME: dispatch some error here to handle in UI\n        console.error(error);\n      }*/\n    }\n  }, [account, web3, status, chain, dispatch]);\n\n  return { getSignatures };\n};\n\nexport const useWeb3Signatures = () => {\n  const { getSignatures } = useSignatures();\n  useEffect(() => {\n    getSignatures();\n  }, [getSignatures]);\n\n  return { getSignatures };\n};\n\nexport const useAuthentication = () => {\n  const { account } = useSelectedChainWallet();\n  const user = useSelector($walletUser);\n  const isAuthenticating = useSelector($isAuthenticating);\n  const { getSignatures } = useSignatures();\n  const isAuthenticated = user !== null && account.toLowerCase() === user.uid;\n\n  return { isAuthenticated, isAuthenticating, authenticate: getSignatures };\n};\n\nexport const useAuthRequired = (authRequired: boolean) => {\n  const dispatch = useDispatch();\n  useEffect(() => {\n    dispatch(setAuthRequired(authRequired));\n    return () => {\n      dispatch(setAuthRequired(false));\n    };\n  }, [dispatch, authRequired]);\n};\n","import { RenNetwork } from \"@renproject/interfaces\";\nimport { GatewaySession } from \"@renproject/ren-tx\";\nimport { useCallback, useEffect, useState } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { useHistory } from \"react-router-dom\";\nimport { paths } from \"../../pages/routes\";\nimport { useNotifications } from \"../../providers/Notifications\";\nimport { db } from \"../../services/database/database\";\nimport {\n  BridgeCurrency,\n  getCurrencyConfig,\n  isMainnetNetwork,\n  isTestnetNetwork,\n} from \"../../utils/assetConfigs\";\nimport { trimAddress } from '../../utils/strings'\nimport { $renNetwork, setRenNetwork } from \"../network/networkSlice\";\nimport { useSelectedChainWallet } from \"../wallet/walletHooks\";\nimport { $multiwalletChain } from \"../wallet/walletSlice\";\nimport {\n  $currentTxId,\n  removeTransaction,\n  setCurrentTxId,\n} from \"./transactionsSlice\";\nimport { TxType } from \"./transactionsUtils\";\n\nexport const useTransactionDeletion = (tx: GatewaySession) => {\n  const dispatch = useDispatch();\n  const history = useHistory();\n  const { showNotification } = useNotifications();\n  const { walletConnected } = useSelectedChainWallet();\n\n  const [menuOpened, setMenuOpened] = useState(false);\n  const handleMenuClose = useCallback(() => {\n    setMenuOpened(false);\n  }, []);\n  const handleMenuOpen = useCallback(() => {\n    if (walletConnected) {\n      setMenuOpened(true);\n    }\n  }, [walletConnected]);\n  const handleDeleteTx = useCallback(() => {\n    db.deleteTx(tx).then(() => {\n      dispatch(removeTransaction(tx));\n      showNotification(`Transaction ${trimAddress(tx.id, 6)} deleted.`);\n      history.push(tx.type === TxType.MINT ? paths.MINT : paths.RELEASE);\n    });\n  }, [dispatch, history, showNotification, tx]);\n\n  return { menuOpened, handleMenuOpen, handleMenuClose, handleDeleteTx };\n};\n\nexport const useRenNetworkTracker = (currency: BridgeCurrency) => {\n  const dispatch = useDispatch();\n  const renChain = useSelector($multiwalletChain);\n  const renNetwork = useSelector($renNetwork);\n  useEffect(() => {\n    const currencyConfig = getCurrencyConfig(currency);\n    const networkMapping = currencyConfig.networkMappings[renChain];\n    let newNetwork: RenNetwork | null = null;\n    if (isTestnetNetwork(renNetwork)) {\n      newNetwork = networkMapping.testnet;\n    } else if (isMainnetNetwork(renNetwork)) {\n      newNetwork = networkMapping.mainnet;\n    } else {\n      console.error(`Unknown network ${newNetwork}`);\n    }\n    if (newNetwork && renNetwork !== newNetwork) {\n      dispatch(setRenNetwork(newNetwork));\n    }\n  }, [dispatch, renChain, currency, renNetwork]);\n};\n\nexport const useSetCurrentTxId = (id: string) => {\n  const dispatch = useDispatch();\n  const currentId = useSelector($currentTxId);\n  useEffect(() => {\n    if (id !== currentId) {\n      dispatch(setCurrentTxId(id));\n    }\n  }, [dispatch, id, currentId]);\n};\n","import { styled } from \"@material-ui/core\";\n\nexport const CheckboxWrapper = styled(\"div\")({\n  marginTop: 10,\n  textAlign: 'center'\n});\n","import React, { FunctionComponent, useCallback, useState } from \"react\";\nimport { makeStyles } from \"@material-ui/core\";\nimport classNames from \"classnames\";\nimport {DEV} from \"../../constants/environmentVariables\"\nconst useStyles = makeStyles({\n  root: {\n    background: \"lightgray\",\n  },\n  wrapper: {\n    background: \"gray\",\n    overflow: \"hidden\",\n    height: 5,\n    \"&:hover\": {\n      height: 10,\n    },\n  },\n  wrapperEnabled: {\n    height: \"auto\",\n    \"&:hover\": {\n      height: \"auto\",\n    },\n  },\n});\n\nconst off = DEV == false;\n\ntype DebugProps = {\n  it: any;\n  force?: boolean;\n  disable?: boolean;\n  wrapper?: boolean;\n};\n\n\ntype DebugWrapperProps = {\n  enabled: boolean;\n};\n\n\n\nconst DebugWrapper: FunctionComponent<DebugWrapperProps> = ({\n  enabled,\n  children,\n}) => {\n  const classes = useStyles();\n  const [show, setShow] = useState(false);\n  const toggleShow = useCallback(() => {\n    setShow(!show);\n  }, [show]);\n  if (!enabled) {\n    return <>{children}</>;\n  }\n  const className = classNames(classes.wrapper, {\n    [classes.wrapperEnabled]: show,\n  });\n  return (\n    <div className={className} onClick={toggleShow}>\n      {children}\n    </div>\n  );\n};\n\nconst getCircularReplacer = () => {\n  const seen = new WeakSet();\n  return (key : any, value : any) => {\n    if (value && value.type === \"Buffer\") {\n      return \"buffer\";\n    }\n    if (typeof value === \"object\" && value !== null) {\n      if (seen.has(value)) {\n        return;\n      }\n      seen.add(value);\n    }\n    return value;\n  };\n};\n\nexport const Debug: FunctionComponent<DebugProps> = ({\n  it,\n  force,\n  disable,\n  wrapper,\n  children,\n}) => {\n  const classes = useStyles();\n  const target = it || children;\n  const show = !off || force;\n  const noClick = useCallback((event) => {\n    event.stopPropagation();\n  }, []);\n  return show && !disable ? (\n    <DebugWrapper enabled={!!wrapper}>\n      <pre className={classes.root} onClick={noClick}>\n        {JSON.stringify(target, getCircularReplacer(), 2)}\n      </pre>\n    </DebugWrapper>\n  ) : null;\n};\n\nexport const DebugComponentProps: FunctionComponent<any> = (props) => (\n  <Debug it={props} />\n);\n","import { useState } from \"react\";\nimport { useSelector } from \"react-redux\";\nimport { useDebounce } from \"react-use\";\nimport {\n  getBurnAndReleaseFees,\n  getLockAndMintFees,\n} from \"../../services/rentx\";\nimport { BridgeCurrency } from \"../../utils/assetConfigs\";\nimport { $renNetwork } from \"../network/networkSlice\";\nimport { TxType } from \"../transactions/transactionsUtils\";\nimport { useWallet } from \"../wallet/walletHooks\";\nimport { $multiwalletChain } from \"../wallet/walletSlice\";\nimport { isSupportedByCurrentNetwork } from \"../wallet/walletUtils\";\nimport { SimpleFee } from \"./feesUtils\";\n\nconst feesCache: Record<string, SimpleFee> = {};\nexport const useFetchFees = (currency: BridgeCurrency, txType: TxType) => {\n  const multiwalletChain = useSelector($multiwalletChain);\n  const { provider, walletConnected } = useWallet(multiwalletChain);\n  const renNetwork = useSelector($renNetwork);\n  const initialFees: SimpleFee = {\n    mint: 20,\n    burn: 20,\n    lock: 1000000,\n    release: 1000000,\n  };\n  const [fees, setFees] = useState(initialFees);\n  const [pending, setPending] = useState(false);\n\n\n  return { fees, pending };\n};\n","import Numeral from \"numeral\";\n\nexport const toUsdFormat = (value: string | number) => {\n  return Numeral(value).format(\"$0,0.00\");\n};\n\nexport const numberFormatOptions = {\n  thousandSeparator: true,\n  allowLeadingZeros: false,\n  allowNegative: false,\n  allowedDecimalSeparators: [\".\", \",\"],\n};\n","import React, { FunctionComponent } from \"react\";\nimport NumberFormat, { NumberFormatProps } from \"react-number-format\";\nimport { numberFormatOptions } from \"../../utils/formatters\";\n\ntype NumberFormatTextProps = NumberFormatProps & {\n  spacedSuffix?: string;\n};\nexport const NumberFormatText: FunctionComponent<NumberFormatTextProps> = ({\n  spacedSuffix,\n  suffix,\n  ...props\n}) => {\n  const resolvedSuffix = spacedSuffix ? ` ${spacedSuffix}` : suffix;\n  return (\n    <NumberFormat\n      {...numberFormatOptions}\n      displayType=\"text\"\n      suffix={resolvedSuffix}\n      {...props}\n    />\n  );\n};\n","import { Backdrop } from \"@material-ui/core\";\nimport Dialog, { DialogProps } from \"@material-ui/core/Dialog\";\nimport MuiDialogTitle, {\n  DialogTitleProps,\n} from \"@material-ui/core/DialogTitle\";\nimport IconButton from \"@material-ui/core/IconButton\";\nimport { makeStyles, styled } from \"@material-ui/core/styles\";\nimport Typography from \"@material-ui/core/Typography\";\nimport CloseIcon from \"@material-ui/icons/Close\";\nimport classNames from \"classnames\";\nimport React, { FunctionComponent } from \"react\";\nimport { BackArrowIcon } from \"../icons/RenIcons\";\nimport { BridgePurePaper } from \"../layout/Paper\";\n\nexport const useBridgeModalTitleStyles = makeStyles((theme) => ({\n  dialogTitle: {\n    display: \"flex\",\n    justifyContent: \"space-between\",\n    alignItems: \"stretch\",\n    borderBottom: `1px solid ${theme.palette.divider}`,\n  },\n  titleWrapper: {\n    flexGrow: 1,\n    paddingLeft: 30, // compensating icons for visual text centering\n    paddingRight: 30,\n    textAlign: \"center\",\n  },\n  title: {},\n  customContentWrapper: {\n    flexGrow: 1,\n    display: \"flex\",\n    alignItems: \"center\",\n    justifyContent: \"center\"\n  },\n  closeButtonWrapper: {\n    minWidth: 30,\n  },\n  closeButton: {\n    color: theme.palette.grey[600],\n  },\n  prevButtonWrapper: {\n    minWidth: 30,\n  },\n  prevButton: {\n    color: theme.palette.grey[600],\n  },\n}));\n\ntype BridgeModalTitleProps = DialogTitleProps &\n  Pick<DialogProps, \"onClose\"> & {\n    onPrev?: () => void;\n  };\n\nexport const BridgeModalTitle: FunctionComponent<BridgeModalTitleProps> = ({\n  title,\n  onClose,\n  onPrev,\n  className,\n  children,\n}) => {\n  const styles = useBridgeModalTitleStyles();\n  const handleClose = () => {\n    if (onClose) {\n      onClose({}, \"backdropClick\");\n    }\n  };\n  const handlePrev = () => {\n    if (onPrev) {\n      onPrev();\n    }\n  };\n\n  return (\n    <MuiDialogTitle\n      disableTypography\n      className={classNames(className, styles.dialogTitle)}\n    >\n      <div className={styles.prevButtonWrapper}>\n        {onPrev ? (\n          <IconButton\n            aria-label=\"prev\"\n            className={styles.prevButton}\n            onClick={handlePrev}\n          >\n            <BackArrowIcon fontSize=\"inherit\" />\n          </IconButton>\n        ) : null}\n      </div>\n      {title && (\n        <div className={styles.titleWrapper}>\n          <Typography variant=\"body1\" className={styles.title}>\n            {title}\n          </Typography>\n        </div>\n      )}\n      {children && (\n        <div className={styles.customContentWrapper}>{children}</div>\n      )}\n      <div className={styles.closeButtonWrapper}>\n        {onClose ? (\n          <IconButton\n            aria-label=\"close\"\n            className={styles.closeButton}\n            onClick={handleClose}\n          >\n            <CloseIcon fontSize=\"inherit\" />\n          </IconButton>\n        ) : null}\n      </div>\n    </MuiDialogTitle>\n  );\n};\n\nexport const BridgeModal: FunctionComponent<DialogProps> = ({\n  title,\n  open,\n  onClose,\n  children,\n  maxWidth,\n}) => {\n  return (\n    <Dialog onClose={onClose} open={open} maxWidth={maxWidth}>\n      <BridgeModalTitle onClose={onClose} title={title} />\n      {children}\n    </Dialog>\n  );\n};\n\nconst useNestedDrawerStyles = makeStyles((theme) => ({\n  backdrop: {\n    position: \"absolute\",\n    top: 0,\n    right: 0,\n    bottom: 0,\n    left: 0,\n    zIndex: \"auto\",\n  },\n  positioner: {\n    position: \"relative\",\n    top: 0,\n    right: 0,\n    bottom: 0,\n    left: 0,\n  },\n  paper: {\n    position: \"absolute\",\n    top: 160,\n    bottom: 0,\n    width: \"100%\",\n    display: \"flex\",\n    flexDirection: \"column\",\n  },\n}));\n\ntype NestedDrawerProps = DialogProps & {\n  open: boolean;\n};\n\nconst stopPropagation = (event: any) => {\n  event.stopPropagation();\n};\n\nexport const NestedDrawerWrapper = styled(\"div\")({\n  display: \"flex\",\n  flexDirection: \"column\",\n  flexGrow: 2,\n  justifyContent: \"space-between\",\n});\n\nexport const NestedDrawerContent = styled(\"div\")({});\nexport const NestedDrawerActions = styled(\"div\")({});\n\nexport const NestedDrawer: FunctionComponent<NestedDrawerProps> = ({\n  open,\n  onClose,\n  title,\n  className,\n  children,\n}) => {\n  const styles = useNestedDrawerStyles();\n  const resolvedClassName = classNames(className, styles.paper);\n\n  return (\n    <Backdrop className={styles.backdrop} open={open} onClick={onClose as any}>\n      <BridgePurePaper className={resolvedClassName} onClick={stopPropagation}>\n        {title && <BridgeModalTitle onClose={onClose} title={title} />}\n        {children}\n      </BridgePurePaper>\n    </Backdrop>\n  );\n};\n","import {\n  Button,\n  DialogProps,\n  styled,\n  Typography,\n  useTheme,\n} from '@material-ui/core'\nimport { GatewaySession } from '@renproject/ren-tx'\nimport React, {\n  FunctionComponent,\n  useCallback,\n  useEffect,\n  useState,\n} from 'react'\nimport { useHistory } from 'react-router-dom'\nimport { useInterval } from 'react-use'\nimport {\n  ActionButton,\n  ActionButtonWrapper,\n  RedButton,\n} from '../../../components/buttons/Buttons'\nimport {\n  SpecialAlertIcon,\n  WarningIcon,\n} from '../../../components/icons/RenIcons'\nimport {\n  PaperContent,\n  SpacedPaperContent,\n} from '../../../components/layout/Paper'\nimport { Link } from '../../../components/links/Links'\nimport {\n  BridgeModal,\n  NestedDrawer,\n  NestedDrawerActions,\n  NestedDrawerContent,\n  NestedDrawerWrapper,\n} from '../../../components/modals/BridgeModal'\nimport {\n  ProgressWithContent,\n  ProgressWrapper,\n  TransactionStatusInfo,\n} from '../../../components/progress/ProgressHelpers'\nimport { links } from '../../../constants/constants'\nimport { paths } from '../../../pages/routes'\nimport { usePaperTitle } from '../../../providers/TitleProviders'\nimport { getFormattedHMS } from '../../../utils/dates'\nimport { trimAddress } from '../../../utils/strings'\n\nexport const ProcessingTimeWrapper = styled(\"div\")({\n  marginTop: 5,\n  marginBottom: 5,\n});\n\ntype BookmarkPageWarningProps = {\n  onClosed?: () => void;\n};\n\nexport const BookmarkPageWarning: FunctionComponent<BookmarkPageWarningProps> = ({\n  onClosed,\n}) => {\n  const [open] = useState(true);\n  const handleClose = useCallback(() => {\n    if (onClosed) {\n      onClosed();\n    }\n    // setOpen(false);\n  }, [onClosed]);\n  return (\n    <NestedDrawer title=\"Warning\" open={open} onClose={handleClose}>\n      <NestedDrawerWrapper>\n        <NestedDrawerContent>\n          <PaperContent topPadding bottomPadding>\n            <Typography variant=\"h5\" align=\"center\" gutterBottom>\n              Bookmark this page\n            </Typography>\n            <Typography variant=\"body2\" align=\"center\" gutterBottom>\n              To ensure you don’t lose track of your transaction, please\n              bookmark this page.\n            </Typography>\n          </PaperContent>\n        </NestedDrawerContent>\n        <NestedDrawerActions>\n          <PaperContent bottomPadding>\n            <ActionButtonWrapper>\n              <ActionButton onClick={handleClose}>I understand</ActionButton>\n            </ActionButtonWrapper>\n          </PaperContent>\n        </NestedDrawerActions>\n      </NestedDrawerWrapper>\n    </NestedDrawer>\n  );\n};\n\ntype ProgressStatusProps = {\n  reason?: string;\n  processing?: boolean;\n};\n\nexport const ProgressStatus: FunctionComponent<ProgressStatusProps> = ({\n  reason = \"\",\n  processing = true,\n}) => {\n  const theme = useTheme();\n  const [, setTitle] = usePaperTitle();\n  useEffect(() => {\n    setTitle(reason);\n  }, [setTitle, reason]);\n  return (\n    <>\n      <ProgressWrapper>\n        <ProgressWithContent\n          processing={processing}\n          color={theme.palette.primary.main}\n        >\n          <TransactionStatusInfo status={reason} />\n        </ProgressWithContent>\n      </ProgressWrapper>\n    </>\n  );\n};\n\nexport type TransactionItemProps = {\n  tx: GatewaySession;\n  isActive?: boolean;\n  onContinue?: ((depositHash?: string) => void) | (() => void);\n};\n\ntype HMSCountdownProps = { milliseconds: number };\n\nexport const HMSCountdown: FunctionComponent<HMSCountdownProps> = ({\n  milliseconds,\n}) => {\n  const [count, setCount] = useState(milliseconds);\n  useInterval(() => {\n    setCount((ms) => ms - 1000);\n  }, 1000);\n  const time = getFormattedHMS(count);\n\n  return <strong>{time}</strong>;\n};\n\nconst ErrorIconWrapper = styled(\"div\")(({ theme }) => ({\n  fontSize: 72,\n  lineHeight: 1,\n  marginTop: 8,\n  textAlign: \"center\",\n  color: theme.customColors.textLight,\n}));\n\ntype ErrorWithActionProps = DialogProps & {\n  title?: string;\n  onAction?: () => void;\n  reason?: string;\n  actionText?: string;\n};\n\nexport const ErrorDialog: FunctionComponent<ErrorWithActionProps> = ({\n  title = \"Error\",\n  open,\n  reason = \"\",\n  actionText = \"\",\n  onAction,\n  children,\n}) => {\n  return (\n    <BridgeModal open={open} title={title} maxWidth=\"xs\">\n      <SpacedPaperContent>\n        <ErrorIconWrapper>\n          <WarningIcon fontSize=\"inherit\" color=\"inherit\" />\n        </ErrorIconWrapper>\n        <Typography variant=\"h5\" align=\"center\" gutterBottom>\n          {reason}\n        </Typography>\n        <Typography\n          color=\"textSecondary\"\n          align=\"center\"\n          gutterBottom\n          component=\"div\"\n        >\n          {children}\n        </Typography>\n      </SpacedPaperContent>\n      <PaperContent bottomPadding>\n        <ActionButtonWrapper>\n          <ActionButton onClick={onAction}>{actionText}</ActionButton>\n        </ActionButtonWrapper>\n      </PaperContent>\n    </BridgeModal>\n  );\n};\n\nexport const SubmitErrorDialog: FunctionComponent<ErrorWithActionProps> = (\n  props\n) => (\n  <ErrorDialog\n    reason=\"Error submitting\"\n    actionText=\"Return to submission screen\"\n    {...props}\n  >\n    <span>Return to previous screen to resubmit</span>\n  </ErrorDialog>\n);\n\nexport const GeneralErrorDialog: FunctionComponent<ErrorWithActionProps> = (\n  props\n) => (\n  <ErrorDialog\n    reason=\"An error has occurred\"\n    actionText=\"Refresh page\"\n    {...props}\n  >\n    <span>\n      Please ensure you have this page bookmarked before refreshing. If this\n      error persists, please{\" \"}\n      <Link external href={links.BUGS_LOG} color=\"primary\" underline=\"hover\">\n        submit a bug here\n      </Link>\n      .\n    </span>\n  </ErrorDialog>\n);\n\nexport const ExpiredErrorDialog: FunctionComponent<ErrorWithActionProps> = (\n  props\n) => {\n  const history = useHistory();\n  const goToHome = useCallback(() => {\n    history.push(paths.HOME);\n  }, [history]);\n\n  return (\n    <ErrorDialog\n      title=\"Expired\"\n      reason=\"This transaction has expired\"\n      actionText=\"Restart transaction\"\n      {...props}\n    >\n      <span>\n        Transactions expire after 24 hours. Please restart the transaction if\n        you wish to continue.\n      </span>\n      <ActionButtonWrapper>\n        <Button variant=\"text\" color=\"inherit\" onClick={goToHome}>\n          Back to home\n        </Button>\n      </ActionButtonWrapper>\n    </ErrorDialog>\n  );\n};\n\ntype WarningWithActionsProps = DialogProps & {\n  title?: string;\n  reason?: string;\n  onMainAction?: () => void;\n  mainActionText?: string;\n  mainActionDisabled?: boolean;\n  onAlternativeAction?: () => void;\n  alternativeActionText?: string;\n  alternativeActionDisabled?: boolean;\n};\n\nexport const WarningDialog: FunctionComponent<WarningWithActionsProps> = ({\n  title = \"Warning\",\n  open,\n  reason = \"\",\n  mainActionText = \"\",\n  onMainAction,\n  mainActionDisabled,\n  alternativeActionText = \"\",\n  onAlternativeAction,\n  alternativeActionDisabled,\n  children,\n}) => {\n  const showMainAction = onMainAction && mainActionText;\n  return (\n    <BridgeModal open={open} title={title} maxWidth=\"xs\">\n      <SpacedPaperContent>\n        <ErrorIconWrapper>\n          <SpecialAlertIcon fontSize=\"inherit\" color=\"inherit\" />\n        </ErrorIconWrapper>\n        <Typography variant=\"h5\" align=\"center\" gutterBottom>\n          {reason}\n        </Typography>\n        <Typography\n          color=\"textSecondary\"\n          align=\"center\"\n          gutterBottom\n          component=\"div\"\n        >\n          {children}\n        </Typography>\n      </SpacedPaperContent>\n      <PaperContent bottomPadding>\n        <ActionButtonWrapper>\n          <RedButton\n            variant=\"text\"\n            color=\"inherit\"\n            onClick={onAlternativeAction}\n            disabled={alternativeActionDisabled}\n          >\n            {alternativeActionText}\n          </RedButton>\n        </ActionButtonWrapper>\n        {showMainAction && (\n          <ActionButtonWrapper>\n            <ActionButton onClick={onMainAction} disabled={mainActionDisabled}>\n              {mainActionText}\n            </ActionButton>\n          </ActionButtonWrapper>\n        )}\n      </PaperContent>\n    </BridgeModal>\n  );\n};\n\ntype WrongAddressWarningDialog = WarningWithActionsProps & {\n  address: string;\n  addressExplorerLink: string;\n  currency: string;\n};\n\nexport const WrongAddressWarningDialog: FunctionComponent<WrongAddressWarningDialog> = ({\n  address,\n  addressExplorerLink,\n  currency,\n  ...props\n}) => {\n  return (\n    <WarningDialog\n      reason=\"Different account detected\"\n      alternativeActionText=\"Continue anyway\"\n      {...props}\n    >\n      <span>\n        This transaction was created with a different account to the current\n        account (\n        <Link\n          external\n          href={addressExplorerLink}\n          color=\"primary\"\n          underline=\"hover\"\n        >\n          {trimAddress(address, 5)}\n        </Link>\n        ). If you do not have access to the account that created the\n        transaction, you will not be able to access the {currency}. Please\n        switch account in your wallet.\n      </span>\n    </WarningDialog>\n  );\n};\n\n","import React, { FunctionComponent } from \"react\";\nimport { styled } from \"@material-ui/core\";\nimport { BridgeChainConfig, CurrencyConfig } from \"../../../utils/assetConfigs\";\nimport { HMSCountdown } from \"../../transactions/components/TransactionsHelpers\";\nimport { props } from \"../../../theme/props\";\n\nexport const mintTooltips = {\n  sending: \"The amount and asset you’re sending before fees are applied.\",\n  to: \"The blockchain you’re sending the asset to.\",\n  recipientAddress: \"The wallet that will receive the minted assets.\",\n};\n\nexport const getMintDynamicTooltips = (\n  chainConfig: BridgeChainConfig,\n  chainNativeCurrencyConfig: CurrencyConfig\n) => ({\n  acknowledge: `Minting an asset on ${chainConfig.full} requires you to submit a transaction. It will cost you a small amount of ${chainNativeCurrencyConfig.short}.`,\n});\n\nexport const DepositWrapper = styled(\"div\")({\n  position: \"relative\",\n});\n\ntype AddressValidityMessageProps = {\n  milliseconds: number;\n  destNetwork: string;\n};\n\ntype GenericProps = {\n  msg: string;\n};\n\nexport const AddressValidityMessage: FunctionComponent<AddressValidityMessageProps> = ({\n  milliseconds,\n  destNetwork,\n}) => {\n  return (\n    <span>\n      This Gateway Address expires in{\" \"}\n      <HMSCountdown milliseconds={milliseconds} />. Do not send multiple\n      deposits or deposit after it has expired. <br />\n      Once you have deposited funds to the Gateway Address, you have 24 hours to\n      submit the mint transaction to {destNetwork}\n    </span>\n  );\n};\n\nexport const MultipleDepositsMessage: FunctionComponent = () => {\n  return (\n    <span>\n      DefiChain-Bridge has detected another deposit to the same gateway address. It\n      will require an additional submission to to the destination chain via your\n      web3 wallet.\n    </span>\n  );\n};\n\nexport const GenericMessage: FunctionComponent<GenericProps> = (msg) => {\n  return (\n    <span>\n      {msg}\n    </span>\n  );\n};","import React, { FunctionComponent } from \"react\";\nimport { useSelector } from \"react-redux\";\nimport { NumberFormatText } from \"../../../components/formatting/NumberFormatText\";\nimport { CenteredProgress } from \"../../../components/progress/ProgressHelpers\";\nimport {\n  LabelWithValue,\n  MiddleEllipsisText,\n} from \"../../../components/typography/TypographyHelpers\";\nimport { Debug } from \"../../../components/utils/Debug\";\nimport { WalletStatus } from \"../../../components/utils/types\";\nimport { MINT_GAS_UNIT_COST } from \"../../../constants/constants\";\nimport {\n  BridgeChain,\n  BridgeCurrency,\n  getChainConfig,\n  getCurrencyConfig,\n  toReleasedCurrency,\n} from \"../../../utils/assetConfigs\";\nimport { ActionButton, ActionButtonWrapper, ActionButtonWrapperGapped } from \"../../../components/buttons/Buttons\";\n\nimport { fromGwei } from \"../../../utils/converters\";\nimport { useFetchFees } from \"../../fees/feesHooks\";\nimport { getTransactionFees } from \"../../fees/feesUtils\";\n\nimport { mintTooltips } from \"../../mint/components/MintHelpers\";\nimport { useAddBsc, useSelectedChainWallet, useToken } from \"../../wallet/walletHooks\";\nimport { getFeeTooltips, TxType } from \"../transactionsUtils\";\n\ntype TransactionFeesProps = {\n  type: TxType;\n  currency: BridgeCurrency;\n  chain: BridgeChain;\n  address?: string;\n  hideButton?: boolean;\n};\n\nexport const TransactionFees: FunctionComponent<TransactionFeesProps> = ({\n  currency,\n  type,\n  chain,\n  address,\n  hideButton\n}) => {\n  const { status } = useSelectedChainWallet();\n  const currencyConfig = getCurrencyConfig(currency);\n  const targetChainConfig = getChainConfig(chain);\n\n\n  const { fees, pending } = useFetchFees(currency, type);\n  const { renVMFee, renVMFeeAmount, networkFee } = getTransactionFees({\n    fees,\n    type,\n  });\n \n  const {getToken} = useToken();\n\n\n  const sourceCurrency =\n    type === TxType.MINT ? currency : toReleasedCurrency(currency);\n  const sourceCurrencyConfig = getCurrencyConfig(sourceCurrency);\n  const sourceCurrencyChainConfig = getChainConfig(\n    sourceCurrencyConfig.sourceChain\n  );\n\n  const tooltips = getFeeTooltips({\n    mintFee: fees.mint / 10000,\n    releaseFee: fees.burn / 10000,\n    sourceCurrency,\n    chain,\n  });\n\n  const feeInGwei = 1337; // TODO: gas price to real gas price adjustment\n  const targetChainFeeNative = fromGwei(feeInGwei);\n  const targetChainCurrency = getCurrencyConfig(\n    targetChainConfig.nativeCurrency\n  );\n\n  if (status !== WalletStatus.CONNECTED) {\n    return null;\n  }\n\n  if (pending) {\n    return <CenteredProgress />;\n  }\n\n  return (\n    <>\n      <Debug it={{ currency, fees }} />\n      <LabelWithValue\n        label=\"Bridge Node Fee\"\n        labelTooltip={tooltips.renVmFee}\n        value={\n          <NumberFormatText\n            value={renVMFee}\n            spacedSuffix={\"%\"}\n            decimalScale={2}\n          />\n        }\n      />\n      <LabelWithValue\n        label={`${sourceCurrencyChainConfig.full} Miner Fee`}\n        labelTooltip={tooltips.sourceChainMinerFee}\n        value={\n          <NumberFormatText\n            value={networkFee}\n            spacedSuffix={sourceCurrencyChainConfig.short}\n          />\n        }\n      />\n      <LabelWithValue\n        label={`Esti. ${targetChainConfig.short} Fee`}\n        labelTooltip={tooltips.renCurrencyChainFee}\n        value={\"See Metamask\"}\n      />\n      {address && (\n        <LabelWithValue\n          label=\"Recipient Address\"\n          labelTooltip={mintTooltips.recipientAddress}\n          value={<MiddleEllipsisText hoverable>{address}</MiddleEllipsisText>}\n        />\n      )}\n      {!hideButton && (\n      /*<ActionButtonWrapperGapped>\n          <ActionButton\n            variant=\"contained\"\n            color=\"secondary\"\n            onClick={getToken}\n          >\n            Add DFI Token To Metamask\n          </ActionButton>\n        </ActionButtonWrapperGapped>*/<></>\n        )}\n    </>\n  );\n};\n","import { useEffect } from 'react'\nimport { useDispatch, useSelector } from 'react-redux'\nimport { useLocation } from 'react-router-dom'\nimport { paths } from '../../pages/routes'\nimport {\n  BridgeChain,\n  EthTestnet,\n  getCurrencyConfig,\n  isMainnetNetwork,\n  toMintedCurrency,\n} from '../../utils/assetConfigs'\nimport { $mintCurrency } from '../mint/mintSlice'\nimport { $renNetwork } from '../network/networkSlice'\nimport { $releaseCurrency } from '../release/releaseSlice'\nimport { $chain } from '../wallet/walletSlice'\nimport { setPaperShaking } from './uiSlice'\n\nexport const useShakePaper = (shake: boolean, timeout = 600) => {\n  const dispatch = useDispatch();\n  useEffect(() => {\n    if (shake) {\n      dispatch(setPaperShaking(true));\n      setTimeout(() => {\n        dispatch(setPaperShaking(false));\n      }, timeout);\n    }\n    return () => {\n      dispatch(setPaperShaking(false));\n    };\n  }, [dispatch, shake, timeout]);\n};\n\nexport const useLocationFlow = () => {\n  const location = useLocation();\n  if (location.pathname.indexOf(paths.MINT) > -1) {\n    return \"mint\";\n  } else if (location.pathname.indexOf(paths.RELEASE) > -1) {\n    return \"burn\";\n  }\n  return null;\n};\n\nexport const useSubNetworkName = () => {\n  const flow = useLocationFlow();\n  const chain = useSelector($chain);\n  const renNetwork = useSelector($renNetwork);\n  const mintCurrency = useSelector($mintCurrency);\n  const releaseCurrency = useSelector($releaseCurrency);\n  if (\n    chain !== BridgeChain.ETHC ||\n    flow == null ||\n    isMainnetNetwork(renNetwork)\n  ) {\n    return \"\";\n  }\n  const renCurrency =\n    flow === \"mint\" ? toMintedCurrency(mintCurrency) : releaseCurrency;\n  const currencyConfig = getCurrencyConfig(renCurrency);\n  return currencyConfig.ethTestnet || EthTestnet.KOVAN;\n};\n","import {\n  Checkbox,\n  Divider,\n  FormControl,\n  FormControlLabel,\n  FormLabel,\n  IconButton,\n  Typography,\n} from \"@material-ui/core\";\nimport React, {\n  FunctionComponent,\n  useCallback,\n  useEffect,\n  useMemo,\n  useState,\n} from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { useHistory } from \"react-router-dom\";\nimport {\n  ActionButton,\n  ActionButtonWrapper,\n} from \"../../../components/buttons/Buttons\";\nimport { NumberFormatText } from \"../../../components/formatting/NumberFormatText\";\nimport { BackArrowIcon } from \"../../../components/icons/RenIcons\";\nimport { CheckboxWrapper } from \"../../../components/inputs/InputHelpers\";\nimport {\n  PaperActions,\n  PaperContent,\n  PaperHeader,\n  PaperNav,\n  PaperTitle,\n} from \"../../../components/layout/Paper\";\nimport { CenteredProgress } from \"../../../components/progress/ProgressHelpers\";\nimport { TooltipWithIcon } from \"../../../components/tooltips/TooltipWithIcon\";\nimport {\n  AssetInfo,\n  BigAssetAmount,\n  BigAssetAmountWrapper,\n  LabelWithValue,\n  Label,\n  MiddleEllipsisText,\n  SpacedDivider,\n} from \"../../../components/typography/TypographyHelpers\";\nimport { Debug } from \"../../../components/utils/Debug\";\nimport { WalletStatus } from \"../../../components/utils/types\";\nimport { paths } from \"../../../pages/routes\";\nimport { db } from \"../../../services/database/database\";\nimport {\n  getChainConfig,\n  getCurrencyConfig,\n  toMintedCurrency,\n} from \"../../../utils/assetConfigs\";\nimport { useFetchFees } from \"../../fees/feesHooks\";\nimport { getTransactionFees } from \"../../fees/feesUtils\";\n\nimport { $renNetwork } from \"../../network/networkSlice\";\nimport { TransactionFees } from \"../../transactions/components/TransactionFees\";\nimport {\n  $currentSessionCount,\n  addTransaction,\n  setCurrentTxId,\n} from \"../../transactions/transactionsSlice\";\nimport {\n  createTxQueryString,\n  LocationTxState,\n  TxConfigurationStepProps,\n  TxType,\n} from \"../../transactions/transactionsUtils\";\nimport { useShakePaper } from \"../../ui/uiHooks\";\nimport {\n  useAuthRequired,\n  useSelectedChainWallet,\n} from \"../../wallet/walletHooks\";\nimport { $wallet, setWalletPickerOpened } from \"../../wallet/walletSlice\";\nimport {\n  getMintDynamicTooltips,\n  mintTooltips,\n} from \"../components/MintHelpers\";\nimport { $mint } from \"../mintSlice\";\nimport {\n  createMintTransaction,\n  preValidateMintTransaction,\n} from \"../mintUtils\";\n\nimport {getDepositAddress} from \"../../../services/bridge\"\n\nexport const MintFeesStep: FunctionComponent<TxConfigurationStepProps> = ({\n  onPrev,\n}) => {\n  useAuthRequired(true);\n  const dispatch = useDispatch();\n  const history = useHistory();\n  const { status, walletConnected, account } = useSelectedChainWallet();\n  const [mintingInitialized, setMintingInitialized] = useState(false);\n  const { currency } = useSelector($mint);\n  const {\n    chain,\n    signatures: { signature },\n  } = useSelector($wallet);\n  const network = useSelector($renNetwork);\n  const currentSessionCount = useSelector($currentSessionCount);\n  const { fees, pending } = useFetchFees(currency, TxType.MINT);\n\n  \n  const lockCurrencyConfig = getCurrencyConfig(currency);\n  const { GreyIcon } = lockCurrencyConfig;\n\n  const destinationChainConfig = getChainConfig(chain);\n  const destinationChainNativeCurrencyConfig = getCurrencyConfig(\n    destinationChainConfig.nativeCurrency\n  );\n  const mintDynamicTooltips = getMintDynamicTooltips(\n    destinationChainConfig,\n    destinationChainNativeCurrencyConfig\n  );\n  const mintedCurrency = toMintedCurrency(currency);\n\n  const mintedCurrencyConfig = getCurrencyConfig(mintedCurrency);\n\n  const [ackChecked, setAckChecked] = useState(false);\n  const [touched, setTouched] = useState(false);\n  const showAckError = !ackChecked && touched;\n  const handleAckCheckboxChange = useCallback((event) => {\n    setTouched(true);\n    setAckChecked(event.target.checked);\n  }, []);\n  useShakePaper(showAckError);\n\n  const tx = useMemo(\n    () =>\n      createMintTransaction({\n        currency: currency,\n        destAddress: account,\n        mintedCurrency: toMintedCurrency(currency),\n        mintedCurrencyChain: chain,\n        userAddress: account,\n        network: network,\n        dayIndex: currentSessionCount,\n      }),\n    [currency, account, chain, network, currentSessionCount]\n  );\n  const txValid = preValidateMintTransaction(tx);\n  const canInitializeMinting = ackChecked && txValid;\n\n  const handleConfirm = useCallback(() => {\n    if (status === WalletStatus.CONNECTED) {\n      setTouched(true);\n      if (canInitializeMinting) {\n        setMintingInitialized(true);\n      } else {\n        setMintingInitialized(false);\n      }\n    } else {\n      setTouched(false);\n      setMintingInitialized(false);\n      dispatch(setWalletPickerOpened(true));\n    }\n  }, [dispatch, status, canInitializeMinting]);\n\n  const onMintTxCreated = useCallback(\n    async (tx) => {\n      // This is where we fetch gateway info from our Backend\n      const jsonObj = await getDepositAddress(tx.userAddress, tx.destination);\n      if(jsonObj.status == 1) {\n        tx.gatewayAddress = jsonObj.result;\n\n        dispatch(setCurrentTxId(tx.id));\n        dispatch(addTransaction(tx));\n        history.push({\n          pathname: paths.MINT_TRANSACTION,\n          search: \"?\" + createTxQueryString(tx),\n          state: {\n            txState: { newTx: true },\n          } as LocationTxState,\n        });\n      } else {\n        // Error popup TODOTODO\n      }\n    },\n    [dispatch, history, account, signature]\n  );\n\n  // there is a dependency loop, because we depend on the number\n  // of txes to determine the dayIndex, which updates when we create\n  // a new tx, leading to multiple txes being created for the same\n  // parameters.\n  // This flag prevents that\n  const [creatingMintTx, setCreatingMintTx] = useState(false);\n\n  useEffect(() => {\n    if (mintingInitialized && !creatingMintTx) {\n      setCreatingMintTx(true);\n      onMintTxCreated(tx).finally();\n    }\n  }, [onMintTxCreated, mintingInitialized, tx, creatingMintTx]);\n\n  return (\n    <>\n      <PaperHeader>\n        <PaperNav>\n          <IconButton onClick={onPrev}>\n            <BackArrowIcon />\n          </IconButton>\n        </PaperNav>\n        <PaperTitle>Fees & Confirm</PaperTitle>\n        <PaperActions />\n      </PaperHeader>\n      <PaperContent bottomPadding>\n        <Typography variant=\"body1\" gutterBottom>\n          Details\n        </Typography>\n        <Label\n          label=\"Sending\"\n          labelTooltip={mintTooltips.sending}\n          strvalue={currency + \" on \" + getCurrencyConfig(currency).full}/>\n        <LabelWithValue\n          label=\"To\"\n          labelTooltip={mintTooltips.to}\n          value={destinationChainConfig.full}\n        />\n        <LabelWithValue\n          label=\"Recipient Address\"\n          labelTooltip={mintTooltips.recipientAddress}\n          value={\n            <MiddleEllipsisText hoverable>{tx.userAddress}</MiddleEllipsisText>\n          }\n        />\n        <SpacedDivider />\n        <Typography variant=\"body1\" gutterBottom>\n          Fees\n        </Typography>\n        <TransactionFees\n          chain={chain}\n          currency={currency}\n          type={TxType.MINT}\n          hideButton={true}\n        />\n      </PaperContent>\n      <Divider />\n      <PaperContent darker topPadding bottomPadding>\n        <CheckboxWrapper>\n          <FormControl error={showAckError}>\n            <FormControlLabel\n              control={\n                <Checkbox\n                  checked={ackChecked}\n                  onChange={handleAckCheckboxChange}\n                  name=\"ack\"\n                  color=\"primary\"\n                />\n              }\n              label={\n                <FormLabel htmlFor=\"ack\" component={Typography}>\n                  <Typography\n                    variant=\"caption\"\n                    color={showAckError ? \"inherit\" : \"textPrimary\"}\n                  >\n                    I acknowledge this transaction requires{\" \"}\n                    {destinationChainNativeCurrencyConfig.short}{\" \"}\n                    <TooltipWithIcon title={mintDynamicTooltips.acknowledge} />\n                  </Typography>\n                </FormLabel>\n              }\n            />\n          </FormControl>\n        </CheckboxWrapper>\n        <ActionButtonWrapper>\n          <ActionButton\n            onClick={handleConfirm}\n            disabled={!ackChecked || mintingInitialized || !walletConnected}\n          >\n            {!walletConnected\n              ? \"Connect Wallet\"\n              : mintingInitialized\n              ? \"Confirming...\"\n              : \"Confirm\"}\n          </ActionButton>\n        </ActionButtonWrapper>\n      </PaperContent>\n      <Debug it={{ tx }} />\n    </>\n  );\n};\n","import { RenNetwork } from \"@renproject/interfaces\";\nimport { useCallback, useEffect } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { useDebounce } from \"react-use\";\nimport { mintChainClassMap } from \"../../services/rentx\";\nimport {\n  BridgeCurrency,\n  getChainConfig,\n  getCurrencyConfig,\n  RenChain,\n  toReleasedCurrency,\n} from \"../../utils/assetConfigs\";\nimport { $renNetwork } from \"../network/networkSlice\";\nimport { useSelectedChainWallet } from \"./walletHooks\";\nimport {\n  $chain,\n  addOrUpdateBalance,\n  AssetBalance,\n  resetBalances,\n} from \"./walletSlice\";\n\nexport const isSupportedByCurrentNetwork = (\n  currency: BridgeCurrency,\n  renNetwork: RenNetwork,\n  chain: RenChain\n) => {\n  const currencyConfig = getCurrencyConfig(currency);\n  if (currencyConfig.networkMappings) {\n    const chainMapping = currencyConfig.networkMappings[chain];\n    return (\n      chainMapping.testnet === renNetwork || chainMapping.mainnet === renNetwork\n    );\n  }\n  return true;\n};\n\nexport const useFetchBalances = (currencySymbols: Array<BridgeCurrency>) => {\n  const dispatch = useDispatch();\n  const bridgeChain = useSelector($chain);\n  const { walletConnected, provider, account } = useSelectedChainWallet();\n  const renNetwork = useSelector($renNetwork);\n  const bridgeChainConfig = getChainConfig(bridgeChain);\n  const Chain = (mintChainClassMap as any)[bridgeChainConfig.rentxName];\n\n  useEffect(() => {\n    if (!walletConnected) {\n      dispatch(resetBalances());\n    }\n  }, [dispatch, walletConnected]);\n\n  const fetchAssetBalance = useCallback(\n    (currency: BridgeCurrency) => {\n      if (\n        provider &&\n        account &&\n        walletConnected &&\n        isSupportedByCurrentNetwork(\n          currency,\n          renNetwork,\n          bridgeChainConfig.rentxName\n        )\n      ) {\n        const chain = Chain(provider, renNetwork);\n        return chain\n          .getBalance(currency, account)\n          .then((balance: any) => {\n            return balance.toNumber() / 100000000;\n          })\n          .catch(console.error);\n      } else {\n        return Promise.resolve(null);\n      }\n    },\n    [\n      Chain,\n      account,\n      renNetwork,\n      provider,\n      walletConnected,\n      bridgeChainConfig.rentxName,\n    ]\n  );\n\n  useDebounce(\n    () => {\n      if (!walletConnected) {\n        return;\n      }\n      for (const currencySymbol of currencySymbols) {\n        const sourceCurrencySymbol = toReleasedCurrency(currencySymbol);\n        fetchAssetBalance(sourceCurrencySymbol).then((balance: any) => {\n          if (balance === null) {\n            return;\n          }\n          dispatch(\n            addOrUpdateBalance({\n              symbol: currencySymbol,\n              balance,\n            })\n          );\n        });\n      }\n    },\n    1000,\n    [dispatch, fetchAssetBalance, walletConnected]\n  );\n};\n\nexport const getAssetBalance = (\n  balances: Array<AssetBalance>,\n  symbol: BridgeCurrency\n) => {\n  const balanceEntry = balances.find((entry) => entry.symbol === symbol);\n  return balanceEntry?.balance;\n};\n","import {\n  Box,\n  ListSubheader,\n  MenuItem,\n  Select,\n  SelectProps,\n  styled,\n  Typography,\n} from \"@material-ui/core\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport React, { FunctionComponent, useMemo } from \"react\";\nimport { AssetBalance } from \"../../features/wallet/walletSlice\";\nimport { getAssetBalance } from \"../../features/wallet/walletUtils\";\nimport {\n  BridgeChain,\n  BridgeChainConfig,\n  BridgeCurrency,\n  chainsConfig,\n  currenciesConfig,\n  CurrencyConfig,\n} from \"../../utils/assetConfigs\";\nimport { NumberFormatText } from \"../formatting/NumberFormatText\";\nimport { EmptyCircleIcon } from \"../icons/RenIcons\";\n\nconst getOptions = (mode: AssetDropdownMode) => {\n  const options =\n    mode === \"chain\"\n      ? Object.values(chainsConfig)\n      : Object.values(currenciesConfig);\n  return options as Array<BridgeChainConfig | CurrencyConfig>;\n};\n\nconst getOptionBySymbol = (symbol: string, mode: AssetDropdownMode) =>\n  getOptions(mode).find((option) => option.symbol === symbol);\n\nconst createAvailabilityFilter = (available: Array<string> | undefined) => (\n  option: BridgeChainConfig | CurrencyConfig\n) => {\n  if (!available) {\n    return true;\n  }\n  return available.includes(option.symbol);\n};\n\nconst iconStyles = {\n  width: 32,\n  height: 32,\n};\n\nconst useCondensedSelectStyles = makeStyles(() => ({\n  select: {\n    paddingTop: 4,\n    paddingBottom: 4,\n  },\n}));\n\nconst useAssetDropdownStyles = makeStyles((theme) => ({\n  root: {\n    width: \"100%\",\n    borderRadius: theme.shape.borderRadius,\n    border: `1px solid ${theme.customColors.grayLight}`,\n  },\n  inputRoot: {\n    width: \"100%\",\n  },\n  supplementalText: {\n    fontSize: 12,\n  },\n  iconWrapper: {\n    display: \"inline-flex\",\n    justifyContent: \"center\",\n    alignItems: \"center\",\n  },\n  listIcon: iconStyles,\n  assetName: {\n    fontSize: 13,\n  },\n  assetFullName: {\n    fontSize: 11,\n  },\n  balance: {\n    fontSize: 12,\n  },\n  listSubheader: {\n    pointerEvents: \"none\",\n    fontSize: 10,\n    lineHeight: 1,\n  },\n  listSubheaderLabel: {\n    fontSize: 10,\n  },\n}));\n\ntype AssetDropdownMode = \"send\" | \"receive\" | \"chain\"; // TODO: remove recaive\n\ntype AssetDropdownProps = SelectProps & {\n  mode: AssetDropdownMode;\n  available?: Array<BridgeCurrency | BridgeChain>;\n  balances?: Array<AssetBalance>;\n  condensed?: boolean;\n  label?: string;\n};\n\nconst getAssetData = (\n  selected: BridgeChainConfig | CurrencyConfig | undefined\n) => {\n  let full = \"Select\";\n  let short = \"Select\";\n  let Icon = EmptyCircleIcon;\n  if (selected) {\n    full = selected.full;\n    short = selected.short;\n    Icon = selected.MainIcon;\n  }\n  return {\n    full,\n    short,\n    Icon,\n  };\n};\n\nexport const AssetDropdown: FunctionComponent<AssetDropdownProps> = ({\n  mode,\n  available,\n  condensed = false,\n  label,\n  balances,\n  ...rest\n}) => {\n  const styles = useAssetDropdownStyles();\n  const condensedSelectClasses = useCondensedSelectStyles();\n  const availabilityFilter = useMemo(\n    () => createAvailabilityFilter(available),\n    [available]\n  );\n  const valueRenderer = useMemo(\n    () => (value: any) => {\n      const selected = getOptionBySymbol(value, mode);\n      const { Icon, full, short } = getAssetData(selected);\n      return (\n        <Box display=\"flex\" alignItems=\"center\" width=\"100%\">\n          {!condensed && (\n            <Box width=\"37%\">\n              <Typography variant=\"body2\" className={styles.supplementalText}>\n                {label}\n              </Typography>\n            </Box>\n          )}\n          <Box width=\"45px\" display=\"flex\" alignItems=\"center\">\n            <Icon className={styles.listIcon} />\n          </Box>\n          <Box flexGrow={1}>\n            <Typography variant=\"body2\">\n              {selected && mode === \"chain\" ? full : full}\n            </Typography>\n          </Box>\n        </Box>\n      );\n    },\n    [mode, styles, label, condensed]\n  );\n  return (\n    <div>\n      <Select\n        variant=\"outlined\"\n        className={condensed ? undefined : styles.inputRoot}\n        classes={condensed ? condensedSelectClasses : undefined}\n        renderValue={valueRenderer}\n        displayEmpty\n        MenuProps={{\n          anchorOrigin: {\n            vertical: \"bottom\",\n            horizontal: \"left\",\n          },\n          getContentAnchorEl: null,\n        }}\n        {...rest}\n      >\n        <ListSubheader className={styles.listSubheader}>\n          <Box display=\"flex\" alignItems=\"center\" width=\"100%\">\n            <Box width=\"45px\" />\n            <Box flexGrow={1}>\n              <Typography\n                variant=\"overline\"\n                className={styles.listSubheaderLabel}\n              >\n                {mode === \"chain\" ? \"Blockchain\" : \"Asset\"}\n              </Typography>\n            </Box>\n            {balances && balances.length > 0 && (\n              <Box flexGrow={1} textAlign=\"right\">\n                <Typography\n                  variant=\"overline\"\n                  className={styles.listSubheaderLabel}\n                >\n                  Your Balance\n                </Typography>\n              </Box>\n            )}\n          </Box>\n        </ListSubheader>\n        {getOptions(mode)\n          .filter(availabilityFilter)\n          .map(({ symbol, MainIcon, GreyIcon, full, short }) => {\n            return (\n              <MenuItem key={symbol} value={symbol}>\n                <Box display=\"flex\" alignItems=\"center\" width=\"100%\">\n                  <Box width=\"45px\" className={styles.iconWrapper}>\n                    <MainIcon className={styles.listIcon} />\n                  </Box>\n                  <Box flexGrow={1}>\n                    <Typography variant=\"body1\" className={styles.assetName}>\n                      {mode === \"chain\" ? full : short}\n                    </Typography>\n                    {mode !== \"chain\" && (\n                      <Typography\n                        color=\"textSecondary\"\n                        className={styles.assetFullName}\n                      >\n                        {full}\n                      </Typography>\n                    )}\n                  </Box>\n                  {balances && (\n                    <Box\n                      flexGrow={1}\n                      textAlign=\"right\"\n                      className={styles.balance}\n                    >\n                      <NumberFormatText\n                        value={getAssetBalance(\n                          balances,\n                          symbol as BridgeCurrency\n                        )}\n                      />\n                    </Box>\n                  )}\n                </Box>\n              </MenuItem>\n            );\n          })}\n      </Select>\n    </div>\n  );\n};\n\nexport const AssetDropdownWrapper = styled(\"div\")({\n  marginTop: 10,\n});\n","import { DialogContent, Divider, Typography, Box,\n  Button,\n  TextField,\n  makeStyles, } from '@material-ui/core'\nimport React, { FunctionComponent, useCallback, useState } from 'react'\nimport { useDispatch, useSelector } from 'react-redux'\nimport { Link } from '../../../components/links/Links'\nimport {getDepositAddress, getKeySignatures, getTransactionN, pkshToAddress, SignatureMessage, strToSatoshi, VoutViktor} from \"../../../services/bridge\"\n\nimport {\n  ActionButton,\n  ActionButtonWrapper,\n  ActionButtonWrapperGapped,\n} from '../../../components/buttons/Buttons'\nimport {\n  AssetDropdown,\n  AssetDropdownWrapper,\n} from '../../../components/dropdowns/AssetDropdown'\nimport { NumberFormatText } from '../../../components/formatting/NumberFormatText'\nimport {\n  BigCurrencyInput,\n  BigCurrencyInputWrapper,\n} from '../../../components/inputs/BigCurrencyInput'\nimport { PaperContent } from '../../../components/layout/Paper'\nimport { CenteredProgress, ProgressWithContent, ProgressWrapper } from '../../../components/progress/ProgressHelpers'\nimport { TooltipWithIcon } from '../../../components/tooltips/TooltipWithIcon'\nimport { AssetInfo } from '../../../components/typography/TypographyHelpers'\nimport {\n  getCurrencyConfig,\n  supportedLockCurrencies,\n  supportedMintDestinationChains,\n  toMintedCurrency,\n} from '../../../utils/assetConfigs'\nimport { useFetchFees } from '../../fees/feesHooks'\nimport { getTransactionFees } from '../../fees/feesUtils'\nimport { useRenNetworkTracker } from '../../transactions/transactionsHooks'\nimport {\n  isMinimalAmount,\n  TxConfigurationStepProps,\n  TxType,\n} from '../../transactions/transactionsUtils'\nimport { useRedeem, useSelectedChainWallet } from '../../wallet/walletHooks'\nimport {\n  $wallet,\n  setChain,\n  setWalletPickerOpened,\n} from '../../wallet/walletSlice'\nimport {\n  $mint,\n  setMintCurrency,\n} from '../mintSlice'\nimport { WalletPickerProps } from '@renproject/multiwallet-ui'\nimport { BridgeModal, BridgeModalTitle } from '../../../components/modals/BridgeModal'\nimport { DebugComponentProps } from '../../../components/utils/Debug'\nimport { Alert } from '@material-ui/lab'\nimport { $renNetwork } from \"../../network/networkSlice\";\n\n\nexport const MintInitialStep: FunctionComponent<TxConfigurationStepProps> = ({\n  onNext,\n}) => {\n  const dispatch = useDispatch();\n\n  const { currency } = useSelector($mint);\n  const { chain } = useSelector($wallet);\n  const { status, walletConnected, account } = useSelectedChainWallet();\n  const {getSignatures} = useRedeem()\n  const [recoverOpened, setRecoverOpened] = useState(false);\n  const [recoverTxId, setRecoverTxId] = useState(\"\");\n  const [recoverError, setRecoverError] = useState(\"\");\n  const [recoverGood, setRecoverGood] = useState(\"\");\n  const [recoverProcessing, setRecoverProcessing] = useState(false);\n  const [signatures, setSignatures] = useState(null)\n  const [nnn, setNnn] = useState<VoutViktor>({})\n  const handleRecover = useCallback((e) => {\n    setRecoverError(\"\");\n    setRecoverGood(\"\");\n    setSignatures(null)\n    setRecoverProcessing(false);\n    setRecoverOpened(true);\n    e.preventDefault();\n  }, []);\n  const handleRecoverClose = useCallback(() => {\n    setRecoverOpened(false);\n  }, []);\n \n\n  const handleCurrencyChange = useCallback(\n    (event) => {\n      dispatch(setMintCurrency(event.target.value));\n    },\n    [dispatch]\n  );\n  const handleChainChange = useCallback(\n    (event) => {\n      dispatch(setChain(event.target.value));\n    },\n    [dispatch]\n  );\n\n  const renCurrency = toMintedCurrency(currency);\n  useRenNetworkTracker(renCurrency);\n\n  const enabled = true;\n\n  const handleNextStep = useCallback(() => {\n    if (!walletConnected) {\n      dispatch(setWalletPickerOpened(true));\n    } else {\n      if (onNext && enabled) {\n        onNext();\n      }\n    }\n  }, [dispatch, onNext, walletConnected, enabled]);\n\n  const handleRecoverFinal = useCallback(async () => {\n    console.log(\"Submitting via Wallet Provider\")\n    const siggy = signatures as any\n\n    if(siggy['signatures'] == undefined) {\n      setRecoverError(\"Signature Object seems bad\")\n      console.log(siggy)\n      return;\n    }\n    const r = '0x' + siggy['signatures'][0]['r'] || ''\n    const s = '0x' + siggy['signatures'][0]['s'] || ''\n    const v = siggy['signatures'][0]['recovery_id']==\"00\" ? 0 : 1\n    // toto more  assets source asset\n    let res: any = await getSignatures(account, recoverTxId, (nnn as VoutViktor).n || 0, strToSatoshi((nnn as VoutViktor).satoshi  || \"0\"), \"DFI\", r, s, v + 27)\n    if(res.err!==null && res.err?.code != 0) {\n      setRecoverError(res.err?.message)\n      console.log(siggy)\n      return;\n    }else{\n      setRecoverGood(res.result)\n    }\n  },[account, chain, recoverTxId, signatures, nnn])\n\n  const handleRecoverNext = useCallback(async () => {\n    setRecoverError(\"\") \n    setRecoverGood(\"\")\n      setRecoverProcessing(true);\n      try {\n        console.log(\"recover on chain:\", chain.toString()==\"BSCC\" ? \"binance\" : \"ethereum\")\n\n        \n        const jsonObj = await getDepositAddress(account, chain.toString()==\"BSCC\" ? \"binance\" : \"ethereum\");\n        console.log(\"deposit address was:\", jsonObj.result)\n        // check if transaction id exists\n        getTransactionN(jsonObj.result || \"\", recoverTxId).then(n => {\n          console.log(\"found n:\", n)\n          setNnn((n as VoutViktor))\n          console.log(\"SATOS:\", strToSatoshi((n as VoutViktor).satoshi || \"0\"))\n          // check if we already have a finished (or can finish) the signature for that?\n          const sign = getKeySignatures(account, recoverTxId, (n as VoutViktor).n || 0, chain.toString()==\"BSCC\" ? \"binance\" : \"ethereum\");\n          sign.then(signmsg => {\n            console.log(signmsg)\n            if (signmsg.status == 1){\n              setSignatures(signmsg as any)\n              // all good man, its recovered\n            }else{\n              // nah, brother, didnt work\n              setRecoverError(signmsg?.blame?.fail_reason || \"Unknown Error\")\n              setRecoverProcessing(false);\n              return\n            }\n          }).catch(reason => {\n              // some other issue here\n            setRecoverError(reason)\n            setRecoverProcessing(false);\n            return\n          })\n\n          // if not \"wait for confirmations\"\n\n        }).catch((reason) => {\n          setRecoverError(reason)\n          setRecoverProcessing(false);\n          return\n        })\n      }\n      catch(e) {\n        setRecoverError(e.toString())\n        setRecoverProcessing(false);\n      }\n  }, [account, chain, recoverTxId, nnn]);\n\n  const mintedCurrencySymbol = toMintedCurrency(currency);\n  const mintedCurrencyConfig = getCurrencyConfig(mintedCurrencySymbol);\n  const { GreyIcon } = mintedCurrencyConfig;\n\n  const useStyles = makeStyles((theme) => ({\n    root: {\n      \"& .MuiInputBase-input\": {\n        background: \"rgb(232, 241, 250)\"\n      }\n    }\n  }));\n  const classes = useStyles()\n\n  \n  return (\n    <>\n      <PaperContent bottomPadding>\n        <AssetDropdownWrapper>\n          <AssetDropdown\n            label=\"Send\"\n            mode=\"send\"\n            available={supportedLockCurrencies}\n            value={currency}\n            onChange={handleCurrencyChange}\n          />\n        </AssetDropdownWrapper>\n        <AssetDropdownWrapper>\n          <AssetDropdown\n            label=\"Destination\"\n            mode=\"chain\"\n            available={supportedMintDestinationChains}\n            value={chain}\n            onChange={handleChainChange}\n          />\n        </AssetDropdownWrapper>\n      </PaperContent>\n      <Divider />\n      <PaperContent darker topPadding bottomPadding>         \n        <ActionButtonWrapper>\n          <ActionButton\n            onClick={handleNextStep}\n            disabled={walletConnected ? !enabled : false}\n          >\n            {walletConnected ? \"Next\" : \"Connect Wallet\"}\n          </ActionButton>\n        </ActionButtonWrapper>\n        <Typography\n          variant=\"subtitle2\"\n          align=\"center\"\n          color=\"textSecondary\"\n          gutterBottom\n        >\n        {walletConnected ? <Link href={'#'} onClick={handleRecover} color='textSecondary'>\n            Click here to recover an incomplete transaction\n        </Link> : \"\"}\n        </Typography>\n      </PaperContent>\n      <BridgeModal\n        open={recoverOpened}\n        title=\"Recovery\"\n        onClose={handleRecoverClose}\n      >\n      <DialogContent>\n          {recoverError!=\"\" ? <Box mb={2}><Alert severity=\"error\">{recoverError}</Alert></Box> : \"\"}\n          {recoverGood!=\"\" ? <Box mb={2}><Alert severity=\"success\">{recoverGood}</Alert></Box> : \"\"}\n          <Typography variant=\"h5\" align=\"center\" gutterBottom>\n            Transaction Recovery\n          </Typography>\n          <Typography variant=\"body2\" align=\"center\" gutterBottom>\n            If your transaction has got stuck, you can recover the last state by specifying the Defichain transaction id for your deposit. After clicking the recovery button, the last state of your deposit+mint transaction will be recovered.\n          </Typography>\n          {signatures == null ? <>\n          <Box mt={3} alignItems=\"center\" justifyContent=\"center\" display=\"flex\" >\n          <TextField autoFocus className={classes.root} style ={{width: '60%'}} \n            label=\"Enter your Defichain TxID\"\n            onChange={(e) => {\n              setRecoverTxId(e.target.value);\n            }}\n          />\n          </Box>\n          <Box mt={5} alignItems=\"center\" justifyContent=\"center\" display=\"flex\" >\n             <ActionButton disabled={recoverProcessing} onClick={handleRecoverNext}>{!recoverProcessing ? \"Recover\" : \"Wait ... might take some time.\"}</ActionButton>\n          </Box></>\n          : <><Box mt={5} alignItems=\"center\" justifyContent=\"center\" display=\"flex\" >\n          <ActionButton color=\"secondary\" onClick={handleRecoverFinal}>Click here to mint on {chain.toString()==\"BSCC\" ? \"Binance\" : \"Ethereum\"}</ActionButton>\n       </Box></>}\n\n      </DialogContent>\n      </BridgeModal>\n      \n    </>\n  );\n};\n","import {\n  Button,\n  ButtonProps,\n  Theme,\n  Typography,\n  useTheme,\n} from \"@material-ui/core\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport AccountBalanceWalletIcon from \"@material-ui/icons/AccountBalanceWallet\";\nimport { WalletPickerProps } from \"@renproject/multiwallet-ui\";\nimport classNames from \"classnames\";\nimport React, { FunctionComponent, useCallback } from \"react\";\nimport { useDispatch } from \"react-redux\";\nimport { useTimeout } from \"react-use\";\nimport { links } from \"../../constants/constants\";\nimport { useSubNetworkName } from \"../../features/ui/uiHooks\";\nimport { setWalletPickerOpened } from \"../../features/wallet/walletSlice\";\nimport { createPulseAnimation } from \"../../theme/animationUtils\";\nimport { defaultShadow } from \"../../theme/other\";\nimport { useAddBsc } from \"../../features/wallet/walletHooks\"\nimport {\n  BridgeChainConfig,\n  BridgeWallet,\n  BridgeWalletConfig,\n  getChainConfigByRentxName,\n  getNetworkConfigByRentxName,\n  getWalletConfig,\n  getWalletConfigByRentxName,\n} from \"../../utils/assetConfigs\";\nimport { trimAddress } from \"../../utils/strings\";\nimport { ActionButton, ActionButtonWrapper, ActionButtonWrapperGapped } from \"../buttons/Buttons\";\nimport { WalletIcon } from \"../icons/RenIcons\";\nimport { PaperContent, SpacedPaperContent } from \"../layout/Paper\";\nimport { Link } from \"../links/Links\";\nimport { BridgeModalTitle } from \"../modals/BridgeModal\";\nimport {\n  ProgressWithContent,\n  ProgressWrapper,\n} from \"../progress/ProgressHelpers\";\nimport { Debug, DebugComponentProps } from \"../utils/Debug\";\nimport { WalletConnectionStatusType, WalletStatus } from \"../utils/types\";\n\nexport const useWalletPickerStyles = makeStyles((theme) => ({\n  root: {\n    width: 400,\n  },\n  body: {\n    padding: 24,\n  },\n  header: {\n    display: \"flex\",\n    justifyContent: \"space-between\",\n    alignItems: \"stretch\",\n    borderBottom: `1px solid ${theme.palette.divider}`,\n    padding: `16px 16px 14px`,\n  },\n  headerTitle: {\n    flexGrow: 2,\n    paddingLeft: 16,\n    textAlign: \"center\",\n    lineHeight: 2,\n  },\n  headerCloseIcon: {\n    fontSize: 16,\n  },\n  button: {\n    border: `1px solid ${theme.palette.divider}`,\n  },\n  chainTitle: {\n    textTransform: \"capitalize\",\n    fontSize: 14,\n  },\n}));\n\nconst useWalletEntryButtonStyles = makeStyles({\n  root: {\n    marginTop: 20,\n    fontSize: 16,\n    padding: \"11px 20px 11px 20px\",\n  },\n  label: {\n    display: \"flex\",\n    justifyContent: \"space-between\",\n    alignContent: \"center\",\n  },\n  icon: {\n    fontSize: 36,\n    display: \"inline-flex\",\n  },\n});\n\nexport const WalletEntryButton: WalletPickerProps<\n  any,\n  any\n>[\"WalletEntryButton\"] = ({ onClick, name, logo }) => {\n  const { icon: iconClassName, ...classes } = useWalletEntryButtonStyles();\n  const walletConfig = getWalletConfigByRentxName(name);\n  const { MainIcon } = walletConfig;\n  return (\n    <Button\n      classes={classes}\n      variant=\"outlined\"\n      size=\"large\"\n      fullWidth\n      onClick={onClick}\n    >\n      <span>{walletConfig.full}</span>{\" \"}\n      <span className={iconClassName}>\n        <MainIcon fontSize=\"inherit\" />\n      </span>\n    </Button>\n  );\n};\n\nexport const WalletChainLabel: WalletPickerProps<\n  any,\n  any\n>[\"WalletChainLabel\"] = ({ chain }) => {\n  const chainConfig = getChainConfigByRentxName(chain);\n  return <span>{chainConfig.full}</span>;\n};\n\nconst getLabels = (\n  chainConfig: BridgeChainConfig,\n  walletConfig: BridgeWalletConfig\n) => {\n  return {\n    initialTitle: \"Connecting\",\n    actionTitle: `${walletConfig.short} action required`,\n    initialMessage: `Connecting to ${chainConfig.full}`,\n    actionMessage: `When prompted, connect securely via the ${walletConfig.full} browser extension.`,\n  };\n};\n\nexport const WalletConnectingInfo: WalletPickerProps<\n  any,\n  any\n>[\"ConnectingInfo\"] = ({ chain, onClose }) => {\n  const theme = useTheme();\n  const chainConfig = getChainConfigByRentxName(chain);\n\n  // TODO: There should be better mapping.\n  const walletSymbol =\n    chain === \"ethereum\" ? BridgeWallet.METAMASKW : BridgeWallet.BINANCESMARTW;\n  const walletConfig = getWalletConfig(walletSymbol);\n\n  const labels = getLabels(chainConfig, walletConfig);\n  const { MainIcon } = walletConfig;\n  const [isPassed] = useTimeout(3000);\n  const passed = isPassed();\n  return (\n    <>\n      <Debug it={{ chainConfig }} />\n      <BridgeModalTitle\n        title={passed ? labels.actionTitle : labels.initialTitle}\n        onClose={onClose}\n      />\n      <PaperContent bottomPadding>\n        <ProgressWrapper>\n          <ProgressWithContent\n            size={128}\n            color={theme.customColors.skyBlueLight}\n            fontSize=\"big\"\n            processing\n          >\n            <MainIcon fontSize=\"inherit\" />\n          </ProgressWithContent>\n        </ProgressWrapper>\n        <Typography variant=\"h6\" align=\"center\">\n          {passed ? labels.actionMessage : labels.initialMessage}\n        </Typography>\n      </PaperContent>\n    </>\n  );\n};\n\nconst useWalletConnectionProgressStyles = makeStyles((theme) => ({\n  iconWrapper: {\n    padding: 13,\n    backgroundColor: theme.palette.divider,\n    display: \"flex\",\n    justifyContent: \"center\",\n    alignItems: \"center\",\n    fontSize: 44,\n  },\n}));\n\nexport const WalletConnectionProgress: FunctionComponent = () => {\n  const theme = useTheme();\n  const styles = useWalletConnectionProgressStyles();\n  return (\n    <ProgressWithContent color={theme.customColors.redLighter} size={128}>\n      <div className={styles.iconWrapper}>\n        <WalletIcon fontSize=\"inherit\" color=\"secondary\" />\n      </div>\n    </ProgressWithContent>\n  );\n};\n\nexport const WalletWrongNetworkInfo: WalletPickerProps<\n  any,\n  any\n>[\"WrongNetworkInfo\"] = (props) => {\n  const { chain, targetNetwork, onClose } = props;\n  const theme = useTheme();\n  const subNetworkName = useSubNetworkName();\n  const chainName = getChainConfigByRentxName(chain).full;\n  const networkName = getNetworkConfigByRentxName(targetNetwork).full;\n  const {updateBsc} = useAddBsc(\"Binance Chain\");\n  const {updateBsc : updateEth} = useAddBsc(\"Ethereum\");\n  const AddBscMetamask = async() => {\n    if (chainName==\"Ethereum\") {\n      const ret = await updateEth()\n      console.log(ret)\n    }else{\n      const ret = await updateBsc()\n      console.log(ret)\n    }\n    return true\n  }\n  return (\n    <>\n      <DebugComponentProps {...props} />\n      <BridgeModalTitle title=\"Wrong Network\" onClose={onClose} />\n      <PaperContent bottomPadding>\n        <ProgressWrapper>\n          <ProgressWithContent\n            size={128}\n            color={theme.customColors.redLighter}\n            fontSize=\"big\"\n          >\n            <AccountBalanceWalletIcon fontSize=\"inherit\" color=\"secondary\" />\n          </ProgressWithContent>\n        </ProgressWrapper>\n        <Typography variant=\"h5\" align=\"center\" gutterBottom>\n          Switch to {chainName} {networkName}\n          {subNetworkName && <span> ({subNetworkName})</span>}\n        </Typography>\n        <Typography variant=\"body1\" align=\"center\" color=\"textSecondary\">\n          Defichain-Bridge requires you to connect to the {chainName} {networkName}{\" \"}\n          {subNetworkName}\n        </Typography>\n        <ActionButtonWrapperGapped>\n          <ActionButton onClick={AddBscMetamask}>\n            Switch Metamask to {chainName}\n          </ActionButton>\n        </ActionButtonWrapperGapped>\n      </PaperContent>\n    </>\n  );\n};\n\nconst createIndicatorClass = (className: string, color: string) => {\n  const { pulsingStyles, pulsingKeyframes } = createPulseAnimation(\n    color,\n    3,\n    className\n  );\n\n  return {\n    ...pulsingKeyframes,\n    [className]: {\n      ...pulsingStyles,\n      backgroundColor: color,\n    },\n  };\n};\n\ntype WalletConnectionIndicatorStyles = Record<\n  \"root\" | \"connected\" | \"disconnected\" | \"wrongNetwork\" | \"connecting\",\n  string\n>;\nconst useWalletConnectionIndicatorStyles = makeStyles((theme) => {\n  return {\n    root: {\n      width: 8,\n      height: 8,\n      borderRadius: 4,\n      backgroundColor: theme.palette.divider,\n    },\n    ...createIndicatorClass(\"connected\", theme.palette.success.main),\n    ...createIndicatorClass(\"disconnected\", theme.palette.error.main),\n    ...createIndicatorClass(\"connecting\", theme.palette.info.main),\n    ...createIndicatorClass(\"wrongNetwork\", theme.palette.warning.main),\n  };\n});\n\ntype WalletConnectionIndicatorProps = {\n  status?: WalletConnectionStatusType;\n  className?: string; // TODO: find a better way\n};\n\nexport const WalletConnectionIndicator: FunctionComponent<WalletConnectionIndicatorProps> = ({\n  status,\n  className: classNameProp,\n}) => {\n  const styles = useWalletConnectionIndicatorStyles() as WalletConnectionIndicatorStyles;\n  const className = classNames(styles.root, classNameProp, {\n    [styles.connected]: status === WalletStatus.CONNECTED,\n    [styles.wrongNetwork]: status === WalletStatus.WRONG_NETWORK,\n    [styles.disconnected]: status === WalletStatus.DISCONNECTED,\n    [styles.connecting]: status === WalletStatus.CONNECTING,\n  });\n  return <div className={className} />;\n};\n\nconst getWalletConnectionLabel = (status: WalletConnectionStatusType) => {\n  switch (status) {\n    case \"disconnected\":\n      return \"Connect a Wallet\";\n    case \"connecting\":\n      return \"Connecting...\";\n    case \"connected\":\n      return \"Connected\";\n    case \"wrong_network\":\n      return \"Wrong Network!\";\n  }\n};\n\nconst useWalletConnectionStatusButtonStyles = makeStyles<Theme>((theme) => ({\n  root: {\n    backgroundColor: theme.palette.common.white,\n    borderColor: theme.palette.divider,\n    boxShadow: defaultShadow,\n    \"&:hover\": {\n      borderColor: theme.palette.divider,\n      backgroundColor: theme.palette.divider,\n    },\n  },\n  hoisted: {\n    zIndex: theme.zIndex.tooltip,\n  },\n  indicator: {\n    marginRight: 10,\n  },\n  indicatorMobile: {\n    marginLeft: 16,\n    marginRight: 30,\n  },\n  account: { marginLeft: 20 },\n}));\n\ntype WalletConnectionStatusButtonProps = ButtonProps & {\n  status: WalletConnectionStatusType;\n  wallet: BridgeWallet;\n  hoisted?: boolean;\n  account?: string;\n  mobile?: boolean;\n};\n\nexport const WalletConnectionStatusButton: FunctionComponent<WalletConnectionStatusButtonProps> = ({\n  status,\n  account,\n  wallet,\n  hoisted,\n  className,\n  mobile,\n  ...rest\n}) => {\n  const {\n    indicator: indicatorClassName,\n    indicatorMobile: indicatorMobileClassName,\n    account: accountClassName,\n    hoisted: hoistedClassName,\n    ...classes\n  } = useWalletConnectionStatusButtonStyles();\n\n  const label =\n    status === WalletStatus.CONNECTED\n      ? getWalletConfig(wallet).short\n      : getWalletConnectionLabel(status);\n  const trimmedAddress = trimAddress(account);\n  const resolvedClassName = classNames(className, {\n    [hoistedClassName]: hoisted,\n  });\n  const buttonProps: any = mobile\n    ? {}\n    : {\n        variant: \"outlined\",\n        color: \"secondary\",\n        classes,\n      };\n  return (\n    <>\n    <Button className={resolvedClassName} {...buttonProps} {...rest}>\n      <WalletConnectionIndicator\n        status={status}\n        className={mobile ? indicatorMobileClassName : indicatorClassName}\n      />\n      <span>{label}</span>\n      {trimmedAddress && (\n        <span className={accountClassName}>{trimmedAddress}</span>\n      )}\n    </Button>\n    </>\n  );\n};\n\nconst useResetWalletPicker = (onClose: () => void) => {\n  //TODO: not very elegant solution, Dialog should be extended with onBack/onPrev action\n  const dispatch = useDispatch();\n  const handleBackToWalletPicker = useCallback(() => {\n    onClose();\n    setTimeout(() => {\n      dispatch(setWalletPickerOpened(true));\n    }, 1);\n  }, [dispatch, onClose]);\n  return { handleBackToWalletPicker };\n};\n\n\nexport const BinanceConnectorInfo: WalletPickerProps<\n  any,\n  any\n>[\"DefaultInfo\"] = ({ acknowledge, onClose }) => {\n  const { handleBackToWalletPicker } = useResetWalletPicker(onClose);\n  return (\n    <>\n      <BridgeModalTitle\n        title=\" \"\n        onClose={onClose}\n        onPrev={handleBackToWalletPicker}\n      />\n      <SpacedPaperContent topPadding bottomPadding>\n        <Typography variant=\"h5\" align=\"center\" gutterBottom>\n          Binance Chain Wallet\n        </Typography>\n        <Typography\n          variant=\"body1\"\n          align=\"center\"\n          color=\"textSecondary\"\n          gutterBottom\n        >\n          Some users experience issues with Binance Smart Wallet. We suggest you\n          connect to BSC via MetaMask instead. If you have already started a\n          transaction with Binance Smart Wallet, please use the support form{\" \"}\n          <Link href={links.BUGS_LOG} external>\n            here\n          </Link>{\" \"}\n          if you are experiencing issues.\n        </Typography>\n      </SpacedPaperContent>\n      <PaperContent bottomPadding>\n        <ActionButtonWrapper>\n          <Button\n            variant=\"text\"\n            color=\"primary\"\n            onClick={handleBackToWalletPicker}\n          >\n            Use another wallet\n          </Button>\n        </ActionButtonWrapper>\n        <ActionButtonWrapper>\n          <ActionButton onClick={acknowledge}>\n            Continue with Binance Smart Wallet\n          </ActionButton>\n        </ActionButtonWrapper>\n      </PaperContent>\n    </>\n  );\n};\n","import { useCallback, useState } from \"react\";\n\nexport const useBrowserNotifications = (onEnabled = () => {}) => {\n  let enabled = false;\n  if ((window as any).Notification) {\n    enabled = Notification.permission === \"granted\";\n  }\n\n  const handleEnable = useCallback(() => {\n    if (enabled) {\n      if (onEnabled) {\n        onEnabled();\n      }\n    } else {\n      Notification.requestPermission().then(() => {\n        if (onEnabled) {\n          onEnabled();\n        }\n      });\n    }\n  }, [enabled, onEnabled]);\n\n  const showBrowserNotification = useCallback((message) => {\n    if ((window as any).Notification) {\n      const notification = new Notification(message);\n      notification.onclick = () => {\n        // window.open(location.href); // TODO: TBD: redirect here?\n      };\n    }\n  }, []);\n\n  return {\n    enabled,\n    handleEnable,\n    Notification,\n    showBrowserNotification,\n  };\n};\n\nexport const useBrowserNotificationsConfirmation = () => {\n  const { enabled } = useBrowserNotifications();\n  const [modalOpened, setModalOpened] = useState(false);\n  const [tooltipOpened, setTooltipOpened] = useState(false);\n\n  const handleTooltipClose = useCallback(() => {\n    setTooltipOpened(false);\n  }, []);\n\n  const handleModalOpen = useCallback(() => {\n    if (!enabled) {\n      setModalOpened(true);\n    } else {\n      setTooltipOpened(!tooltipOpened);\n    }\n  }, [enabled, tooltipOpened]);\n\n  const handleModalClose = useCallback(() => {\n    setModalOpened(false);\n  }, []);\n\n  return {\n    modalOpened,\n    handleModalOpen,\n    handleModalClose,\n    tooltipOpened,\n    handleTooltipClose,\n  };\n};\n","import { Box, Grow, Typography, useTheme } from \"@material-ui/core\";\nimport { GatewaySession } from \"@renproject/ren-tx\";\nimport QRCode from \"qrcode.react\";\nimport React, {\n  FunctionComponent,\n  useCallback,\n  useEffect,\n  useState,\n} from \"react\";\nimport { useDispatch } from \"react-redux\";\nimport { useHistory } from \"react-router-dom\";\nimport { useEffectOnce } from \"react-use\";\nimport {\n  ActionButton,\n  ActionButtonWrapper,\n  BigQrCode,\n  CopyContentButton,\n  QrCodeIconButton,\n  TransactionDetailsButton,\n} from \"../../../components/buttons/Buttons\";\nimport { NumberFormatText } from \"../../../components/formatting/NumberFormatText\";\nimport {\n  BigTopWrapper,\n  CenteringSpacedBox,\n  MediumWrapper,\n  SmallWrapper,\n} from \"../../../components/layout/LayoutHelpers\";\nimport { Link } from \"../../../components/links/Links\";\nimport {\n  BigDoneIcon,\n  ProgressWithContent,\n  ProgressWrapper,\n  TransactionStatusInfo,\n} from \"../../../components/progress/ProgressHelpers\";\nimport { BigAssetAmount } from \"../../../components/typography/TypographyHelpers\";\nimport { paths } from \"../../../pages/routes\";\nimport { useNotifications } from \"../../../providers/Notifications\";\nimport {\n  usePaperTitle,\n  useSetActionRequired,\n  useSetPaperTitle,\n} from \"../../../providers/TitleProviders\";\nimport { DepositEntry } from \"../../../services/bridge\";\nimport { orangeLight } from \"../../../theme/colors\";\nimport { getChainConfigByRentxName } from \"../../../utils/assetConfigs\";\nimport { trimAddress } from \"../../../utils/strings\";\nimport { useFetchFees } from \"../../fees/feesHooks\";\nimport { getTransactionFees } from \"../../fees/feesUtils\";\nimport { useBrowserNotifications } from \"../../notifications/notificationsUtils\";\nimport {\n  HMSCountdown,\n  ProcessingTimeWrapper,\n  SubmitErrorDialog,\n} from \"../../transactions/components/TransactionsHelpers\";\nimport { getPaymentLink, TxType } from \"../../transactions/transactionsUtils\";\nimport { resetMint } from \"../mintSlice\";\nimport { getLockAndMintParams, getRemainingGatewayTime } from \"../mintUtils\";\nimport { AddressValidityMessage } from \"./MintHelpers\";\n\nexport type MintDepositToProps = {\n  tx: GatewaySession;\n};\n\nexport const MintDepositToStatus: FunctionComponent<MintDepositToProps> = ({\n  tx,\n}) => {\n  const {\n    lockCurrencyConfig,\n    lockChainConfig,\n    suggestedAmount,\n    mintAddressLink,\n  } = getLockAndMintParams(tx);\n  const { color } = lockCurrencyConfig;\n  const { MainIcon } = lockChainConfig;\n\n  useSetPaperTitle(`Send ${lockChainConfig.short}`);\n\n  return (\n    <>\n      <ProgressWrapper>\n        <ProgressWithContent color={color || orangeLight} size={64}>\n          <MainIcon fontSize=\"inherit\" color=\"inherit\" />\n        </ProgressWithContent>\n      </ProgressWrapper>\n      <MediumWrapper>\n        <BigAssetAmount\n          value={\n            <span>\n              Send {lockCurrencyConfig.short} to\n            </span>\n          }\n        />\n      </MediumWrapper>\n      {tx.gatewayAddress && (\n        <>\n            <CenteringSpacedBox>\n              <Grow in={true}>\n                <BigQrCode>\n                  <QRCode\n                    value={getPaymentLink(\n                      lockChainConfig.symbol,\n                      tx.gatewayAddress,\n                      suggestedAmount\n                    )}\n                  />\n                </BigQrCode>\n              </Grow>\n            </CenteringSpacedBox>\n          <CopyContentButton content={tx.gatewayAddress} />\n        </>\n      )}\n    </>\n  );\n};\n\ntype MintDepositConfirmationStatusProps = {\n  tx: GatewaySession;\n  depositHash: string;\n};\n\nexport const MintDepositConfirmationStatus: FunctionComponent<MintDepositConfirmationStatusProps> = ({\n  tx,\n  depositHash,\n}) => {\n  const [, setTitle] = usePaperTitle();\n  let {\n    lockCurrencyConfig,\n    lockChainConfig,\n    lockTxHash,\n    lockTxLink,\n    lockTxAmount,\n    lockConfirmations,\n    lockTargetConfirmations,\n    lockProcessingTime,\n  } = getLockAndMintParams(tx, depositHash);\n\n\n  const dep: DepositEntry = tx.transactions[depositHash]\n  lockTxHash = depositHash\n  lockTxLink = \"https://defiscan.live/transactions/\" + depositHash.split(\":\")[0]\n  lockConfirmations = dep?.confirmations || 0\n\n  const { MainIcon } = lockChainConfig;\n  lockTargetConfirmations = lockChainConfig?.targetConfirmations || 0\n\n  const confirmed = lockConfirmations >= lockTargetConfirmations;\n  useEffect(() => {\n    setTitle(confirmed ? \"Confirmed\" : \"Confirming\");\n  }, [setTitle, confirmed]);\n\n  return (\n    <>\n      <ProgressWrapper>\n        <ProgressWithContent\n          color={lockCurrencyConfig.color || orangeLight}\n          confirmations={lockConfirmations}\n          targetConfirmations={lockTargetConfirmations}\n        >\n          <MainIcon fontSize=\"inherit\" color=\"inherit\" />\n        </ProgressWithContent>\n      </ProgressWrapper>\n      <SmallWrapper>\n        <Typography variant=\"body1\" align=\"center\">\n          {lockConfirmations} of {lockTargetConfirmations} confirmations\n        </Typography>\n      </SmallWrapper>\n      <MediumWrapper>\n        <BigAssetAmount\n          value={\n            <NumberFormatText\n              value={lockTxAmount}\n              spacedSuffix={lockCurrencyConfig.short}\n            />\n          }\n        />\n      </MediumWrapper>\n      <TransactionDetailsButton\n        label={lockChainConfig.short}\n        address={lockTxHash}\n        link={lockTxLink}\n      />\n      \n    </>\n  );\n};\n\nconst maxConfirmations = (actual: number, target: number) => {\n  if (actual > target) {\n    return target;\n  }\n  return actual;\n};\n\ntype MintDepositAcceptedStatusProps = {\n  tx: GatewaySession;\n  onSubmit?: () => void;\n  onReload?: () => void;\n  submitting: boolean;\n  submittingError: boolean;\n  depositHash: string;\n};\n\nexport const MintDepositAcceptedStatus: FunctionComponent<MintDepositAcceptedStatusProps> = ({\n  tx,\n  onSubmit,\n  onReload,\n  submitting,\n  submittingError,\n  depositHash,\n}) => {\n  useSetPaperTitle(\"Submit\");\n  useSetActionRequired(true);\n  const theme = useTheme();\n  let {\n    lockCurrencyConfig,\n    lockChainConfig,\n    lockTxHash,\n    lockTxAmount,\n    lockTxLink,\n    lockConfirmations,\n    lockTargetConfirmations,\n    mintChainConfig,\n  } = getLockAndMintParams(tx, depositHash);\n  const dep: DepositEntry = tx.transactions[depositHash]\n  lockTxHash = depositHash\n  lockTxLink = \"https://defiscan.live/transactions/\" + depositHash.split(\":\")[0]\n  lockConfirmations = dep?.confirmations || 0\n\n  lockTargetConfirmations = lockChainConfig?.targetConfirmations || 0\n\n  const notificationMessage = `${lockConfirmations>lockTargetConfirmations?lockTargetConfirmations:lockConfirmations}/${lockTargetConfirmations} confirmations, ready to submit ${\n    lockCurrencyConfig.short\n  } to ${mintChainConfig.full}?`;\n  const { showNotification } = useNotifications();\n  const { showBrowserNotification } = useBrowserNotifications();\n  useEffectOnce(() => {\n    showNotification(notificationMessage);\n    showBrowserNotification(notificationMessage);\n  });\n\n  const { MainIcon } = lockChainConfig;\n\n  return (\n    <>\n      <ProgressWrapper>\n        {submitting ? (\n          <ProgressWithContent color={theme.customColors.skyBlue} processing>\n            <MainIcon fontSize=\"inherit\" color=\"inherit\" />\n          </ProgressWithContent>\n        ) : (\n          <ProgressWithContent\n            color={lockCurrencyConfig.color || theme.customColors.skyBlue}\n            confirmations={lockConfirmations}\n            targetConfirmations={lockTargetConfirmations}\n          >\n            <MainIcon fontSize=\"inherit\" color=\"inherit\" />\n          </ProgressWithContent>\n        )}\n      </ProgressWrapper>\n      <Typography variant=\"body1\" align=\"center\" gutterBottom>\n        <NumberFormatText\n          value={lockTxAmount}\n          spacedSuffix={lockCurrencyConfig.full}\n        />{\" \"}\n        Received {lockConfirmations>lockTargetConfirmations?lockTargetConfirmations:lockConfirmations}/{lockTargetConfirmations} Confirmations\n      </Typography>\n      <ActionButtonWrapper>\n        <ActionButton onClick={onSubmit} disabled={submitting}>\n          {submitting ? \"Submitting\" : \"Submit\"} to {mintChainConfig.full}\n          {submitting && \"...\"}\n        </ActionButton>\n      </ActionButtonWrapper>\n      <ActionButtonWrapper>\n        <TransactionDetailsButton\n          label={lockChainConfig.short}\n          address={lockTxHash}\n          link={lockTxLink}\n        />\n      </ActionButtonWrapper>\n      <SubmitErrorDialog open={submittingError} onAction={onReload} />\n    </>\n  );\n};\n\ntype DestinationPendingStatusProps = {\n  tx: GatewaySession;\n  onSubmit?: () => void;\n  submitting: boolean;\n  depositHash: string;\n};\n\nexport const DestinationPendingStatus: FunctionComponent<DestinationPendingStatusProps> = ({\n  tx,\n  onSubmit = () => {},\n  submitting,\n  depositHash,\n}) => {\n  const theme = useTheme();\n  let  {\n    lockCurrencyConfig,\n    lockChainConfig,\n    lockTxHash,\n    lockTxAmount,\n    lockTxLink,\n    mintTxLink,\n    mintTxHash,\n    mintChainConfig,\n  } = getLockAndMintParams(tx, depositHash);\n\n  const dep: DepositEntry = tx.transactions[depositHash]\n  lockTxHash = depositHash\n  lockTxLink = \"https://defiscan.live/transactions/\" + depositHash.split(\":\")[0]\n\n  return (\n    <>\n      <ProgressWrapper>\n        <ProgressWithContent color={theme.customColors.skyBlue} processing>\n          <TransactionStatusInfo\n            status=\"Pending\"\n            chain={mintChainConfig.full}\n            address={\n              <Link\n                color=\"primary\"\n                underline=\"hover\"\n                href={mintTxLink}\n                target=\"_blank\"\n              >\n                {mintTxHash}\n              </Link>\n            }\n          />\n        </ProgressWithContent>\n      </ProgressWrapper>\n      <Typography variant=\"body1\" align=\"center\" gutterBottom>\n        <NumberFormatText\n          value={lockTxAmount}\n          spacedSuffix={lockCurrencyConfig.full}\n        />\n      </Typography>\n      <ActionButtonWrapper>\n        <ActionButton onClick={onSubmit} disabled={submitting}>\n          {submitting ? \"Submitting\" : \"Submit\"} to {mintChainConfig.full}\n          {submitting && \"...\"}\n        </ActionButton>\n      </ActionButtonWrapper>\n      <ActionButtonWrapper>\n        <TransactionDetailsButton\n          label={lockChainConfig.short}\n          address={lockTxHash}\n          link={lockTxLink}\n        />\n      </ActionButtonWrapper>\n    </>\n  );\n};\n\ntype MintCompletedStatusProps = {\n  tx: GatewaySession;\n  depositHash: string;\n  mintHash: string;\n  chain: string;\n};\n\nexport const MintCompletedStatus: FunctionComponent<MintCompletedStatusProps> = ({\n  tx,\n  depositHash,\n  mintHash,\n  chain\n}) => {\n  useSetPaperTitle(\"Complete\");\n  const dispatch = useDispatch();\n  const history = useHistory();\n  let {\n    lockCurrencyConfig,\n    mintCurrencyConfig,\n    lockChainConfig,\n    lockTxLink,\n    lockTxAmount,\n    mintTxLink,\n    mintChainConfig,\n  } = getLockAndMintParams(tx, depositHash);\n\n  lockTxLink = \"https://defiscan.live/transactions/\" + depositHash.split(\":\")[0]\n  if(chain == \"ethereum\"){\n    mintTxLink=\"https://etherscan.io/tx/\" + mintHash\n  }else{\n    mintTxLink=\"https://bscscan.com/tx/\" + mintHash\n  }\n\n  const { fees, pending } = useFetchFees(\n    lockCurrencyConfig.symbol,\n    TxType.MINT\n  );\n  const { conversionTotal } = getTransactionFees({\n    fees,\n    type: TxType.MINT,\n  });\n  const handleReturn = useCallback(() => {\n    history.push(paths.MINT);\n    dispatch(resetMint());\n  }, [dispatch, history]);\n\n  const { showNotification } = useNotifications();\n  const { showBrowserNotification } = useBrowserNotifications();\n\n  const showNotifications = useCallback(() => {\n    if (!pending) {\n      const notificationMessage = `Successfully minted ${mintCurrencyConfig.short} on ${mintChainConfig.full}.`;\n      showNotification(\n        <span>\n          {notificationMessage}{\" \"}\n          <Link external href={mintTxLink}>\n            View {mintChainConfig.full} transaction\n          </Link>\n        </span>\n      );\n      showBrowserNotification(notificationMessage);\n    }\n  }, [\n    showNotification,\n    showBrowserNotification,\n    pending,\n    conversionTotal,\n    mintChainConfig,\n    mintCurrencyConfig,\n    mintTxLink,\n  ]);\n\n  useEffect(showNotifications, [pending]);\n\n  return (\n    <>\n      <ProgressWrapper>\n        <ProgressWithContent>\n          <BigDoneIcon />\n        </ProgressWithContent>\n      </ProgressWrapper>\n      <ActionButtonWrapper>\n        <ActionButton onClick={handleReturn}>Back to start</ActionButton>\n      </ActionButtonWrapper>\n      <Box display=\"flex\" justifyContent=\"space-between\" flexWrap=\"wrap\" py={2}>\n        <Link\n          external\n          color=\"primary\"\n          variant=\"button\"\n          underline=\"hover\"\n          href={lockTxLink}\n        >\n          {lockChainConfig.full} transaction\n        </Link>\n        <Link\n          external\n          color=\"primary\"\n          variant=\"button\"\n          underline=\"hover\"\n          href={mintTxLink}\n        >\n          {mintChainConfig.full} transaction\n        </Link>\n      </Box>\n    </>\n  );\n};\n","import { ButtonBase, ButtonProps, makeStyles, styled } from \"@material-ui/core\";\nimport classNames from \"classnames\";\nimport React, { FunctionComponent } from \"react\";\nimport {\n  NavigatePrevIcon,\n  NavigateNextIcon,\n} from \"../../../components/icons/RenIcons\";\n\nconst useBigNavButtonStyles = makeStyles((theme) => ({\n  root: {\n    color: theme.palette.primary.main,\n    fontSize: 90,\n    transition: \"all 1s\",\n    display: \"inline-flex\",\n    cursor: \"pointer\",\n    \"&:hover\": {\n      color: theme.palette.primary.dark,\n    },\n  },\n  disabled: {\n    opacity: 0.2,\n    cursor: \"default\",\n  },\n  hidden: {\n    display: \"none\",\n    opacity: 0,\n  },\n}));\n\ntype BigNavButtonProps = ButtonProps & {\n  direction: \"next\" | \"prev\";\n};\nexport const BigNavButton: FunctionComponent<BigNavButtonProps> = ({\n  direction,\n  disabled,\n  hidden,\n  className,\n  onClick,\n}) => {\n  const styles = useBigNavButtonStyles();\n  const rootClassName = classNames(styles.root, className, {\n    [styles.disabled]: disabled,\n    [styles.hidden]: hidden,\n  });\n  const Icon = direction === \"prev\" ? NavigatePrevIcon : NavigateNextIcon;\n  return (\n    <ButtonBase className={rootClassName} disabled={disabled} onClick={onClick}>\n      <Icon fontSize=\"inherit\" />\n    </ButtonBase>\n  );\n};\n\nexport const BigPrevButton: FunctionComponent<ButtonProps> = (props) => (\n  <BigNavButton direction=\"prev\" {...props} />\n);\n\nexport const BigNextButton: FunctionComponent<ButtonProps> = (props) => (\n  <BigNavButton direction=\"next\" {...props} />\n);\n\nconst offsetTop = 38;\nconst offsetHorizontal = -42;\nexport const DepositPrevButton = styled(BigPrevButton)({\n  position: \"absolute\",\n  top: offsetTop,\n  left: offsetHorizontal,\n});\n\nexport const DepositNextButton = styled(BigNextButton)({\n  position: \"absolute\",\n  top: offsetTop,\n  right: offsetHorizontal,\n});\n","import { Divider, IconButton } from \"@material-ui/core\";\nimport {\n  GatewaySession,\n} from \"@renproject/ren-tx\";\nimport {getDeposits, DepositEntry, Signature, SignatureMessage, getKeySignatures} from \"../../../services/bridge\"\nimport React, {\n  FunctionComponent,\n  useCallback,\n  useEffect,\n  useMemo,\n  useState,\n} from \"react\";\nimport { useLocalStorage } from 'usehooks-ts'\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { RouteComponentProps, useHistory, useLocation } from \"react-router-dom\";\nimport { Actor } from \"xstate\";\nimport {\n  ActionButton,\n  ToggleIconButton,\n} from \"../../../components/buttons/Buttons\";\nimport { BackArrowIcon } from \"../../../components/icons/RenIcons\";\nimport {\n  CenteringSpacedBox,\n  PaperSpacerWrapper,\n} from \"../../../components/layout/LayoutHelpers\";\nimport {\n  PaperActions,\n  PaperContent,\n  PaperHeader,\n  PaperNav,\n  PaperTitle,\n} from \"../../../components/layout/Paper\";\nimport { Debug } from \"../../../components/utils/Debug\";\nimport { WalletConnectionProgress } from \"../../../components/wallet/WalletHelpers\";\nimport { paths } from \"../../../pages/routes\";\nimport { useNotifications } from \"../../../providers/Notifications\";\nimport { usePageTitle, usePaperTitle } from \"../../../providers/TitleProviders\";\nimport {\n  BridgeChainConfig,\n  getChainConfigByRentxName,\n  getCurrencyConfigByRentxName,\n} from \"../../../utils/assetConfigs\";\nimport { $renNetwork } from \"../../network/networkSlice\";\nimport {\n  BrowserNotificationButton,\n  BrowserNotificationsDrawer,\n} from \"../../notifications/components/NotificationsHelpers\";\nimport {\n  useBrowserNotifications,\n  useBrowserNotificationsConfirmation,\n} from \"../../notifications/notificationsUtils\";\nimport { TransactionFees } from \"../../transactions/components/TransactionFees\";\nimport {\n  TransactionMenu,\n  UpdateTxFn,\n} from \"../../transactions/components/TransactionMenu\";\nimport {\n  BookmarkPageWarning,\n  ExpiredErrorDialog,\n  ProgressStatus,\n  WrongAddressWarningDialog,\n} from \"../../transactions/components/TransactionsHelpers\";\nimport {\n  useSetCurrentTxId,\n  useTransactionDeletion,\n} from \"../../transactions/transactionsHooks\";\nimport {\n  createTxQueryString,\n  getAddressExplorerLink,\n  getTxPageTitle,\n  isTxExpired,\n  parseTxQueryString,\n  TxConfigurationStep,\n  TxType,\n  useTxParam,\n} from \"../../transactions/transactionsUtils\";\nimport {\n  useAuthRequired,\n  useSelectedChainWallet,\n  useRedeem\n} from \"../../wallet/walletHooks\";\nimport {\n  $chain,\n  setChain,\n  setWalletPickerOpened,\n} from \"../../wallet/walletSlice\";\nimport {\n  DepositWrapper,\n  MultipleDepositsMessage,\n  GenericMessage\n} from \"../components/MintHelpers\";\nimport {\n  DestinationPendingStatus,\n  MintCompletedStatus,\n  MintDepositAcceptedStatus,\n  MintDepositConfirmationStatus,\n  MintDepositToStatus,\n} from \"../components/MintStatuses\";\nimport {\n  DepositNextButton,\n  DepositPrevButton,\n} from \"../components/MultipleDepositsHelpers\";\nimport { useDepositPagination, useMintMachine } from \"../mintHooks\";\nimport { resetMint } from \"../mintSlice\";\nimport { getLockAndMintParams, getRemainingGatewayTime } from \"../mintUtils\";\nimport { clearTimeout } from \"timers\";\n\n\nexport const MintProcessStep: FunctionComponent<RouteComponentProps> = ({\n  history,\n  location,\n}) => {\n  useAuthRequired(true);\n  const dispatch = useDispatch();\n  const chain = useSelector($chain);\n  var rdDict: { [id: string]: string; } = {\n    \"bcc207a0e3745b9b4394e0daa6c098edc4224cb28379505c70b8407d73738905:0\": \"skip\"\n  }\n\n  const [rdtx, setRdtx] = useLocalStorage('rdDict', rdDict)\n  const {getSignatures} = useRedeem()\n  \n  const { walletConnected } = useSelectedChainWallet();\n  const { tx: parsedTx, txState } = useTxParam();\n  const [depositHash, setDepositHash] = useState<string>(parsedTx?.depositHash !== undefined ? parsedTx.depositHash + \":\" + parsedTx.depositN : \"\");\n  const [reloading, setReloading] = useState(false);\n  const [tx, setTx] = useState<GatewaySession>(parsedTx as GatewaySession);\n\n  useSetCurrentTxId(tx.id);\n\n  usePageTitle(getTxPageTitle(tx));\n  const [paperTitle, setPaperTitle] = usePaperTitle();\n  useEffect(() => {\n    if (!walletConnected) {\n      setPaperTitle(\"Resume Transaction\");\n    }\n  }, [walletConnected, setPaperTitle]);\n\n  const handlePreviousStepClick = useCallback(() => {\n    history.goBack();\n  }, [history]);\n\n \n  const destChain = parsedTx?.destChain;\n  useEffect(() => {\n    if (destChain) {\n      const bridgeChainConfig = getChainConfigByRentxName(destChain);\n      dispatch(setChain(bridgeChainConfig.symbol));\n    }\n  }, [dispatch, destChain]);\n\n  const handleWalletPickerOpen = useCallback(() => {\n    dispatch(setWalletPickerOpened(true));\n  }, [dispatch]);\n\n  const onBookmarkWarningClosed = useCallback(() => {\n    history.replace({ ...location, state: undefined });\n  }, [history, location]);\n\n  const showTransactionStatus = !!tx && walletConnected;\n  const feeCurrency = getCurrencyConfigByRentxName(tx.sourceAsset).symbol;\n\n  const [counter, changeCounter] = useState(0);\n\n  const updateTx = () => {\n    if(!tx) return;\n    getDeposits(tx.userAddress, tx.destChain).then((jsonObj) => {\n    let txChange: GatewaySession = JSON.parse(JSON.stringify(tx));\n    if(jsonObj.status == 1) {\n        let changes = false;\n        if(jsonObj.result !== undefined && jsonObj.result.data !== undefined && jsonObj.result.data.length > 0) {\n            for(let i = 0; i<jsonObj.result.data.length; ++i) {\n              const key = jsonObj.result.data[i].vout?.txid + \":\" + jsonObj.result.data[i].vout?.n as string\n              if(key in rdtx) continue\n              const result = (key in txChange.transactions)\n              if(!result || JSON.stringify(txChange.transactions[key])!=JSON.stringify(jsonObj.result.data[i])){\n                (txChange as any).transactions[key] = jsonObj.result.data[i]\n                changes = true;\n              }\n            }\n            if(depositHash === \"\" && Object.keys(txChange.transactions).length > 0){\n              setDepositHash(Object.keys(txChange.transactions)[0])\n            }\n            if(changes){\n              setTx(txChange)\n            }\n        }\n    }})\n  }\n\n  const updateHash = ((hash: string) => {\n    setDepositHash(hash)\n  })\n\n  useEffect(() => {\n    const interval = setInterval(() => {\n      updateTx()\n    }, 3000);\n    return () => clearInterval(interval);\n  }, [depositHash]);\n\n\n\n   return (\n    <>\n      <PaperHeader>\n        <PaperNav>\n            <IconButton onClick={handlePreviousStepClick}>\n              <BackArrowIcon />\n            </IconButton>\n        </PaperNav>\n        <PaperTitle>{paperTitle}</PaperTitle>\n        <PaperActions>\n          \n        </PaperActions>\n      </PaperHeader>\n      <PaperContent bottomPadding>\n        {showTransactionStatus && (\n          <MintTransactionStatus\n            tx={tx}\n            depositHash={depositHash}\n            updateHash={updateHash}\n            rdtx={rdtx}\n            setRdtx={setRdtx}\n          />\n        )}\n        {!walletConnected && (\n          <>\n            <PaperSpacerWrapper>\n              <CenteringSpacedBox>\n                <WalletConnectionProgress />\n              </CenteringSpacedBox>\n            </PaperSpacerWrapper>\n            <ActionButton onClick={handleWalletPickerOpen}>\n              Connect Wallet\n            </ActionButton>\n          </>\n        )}\n      </PaperContent>\n      {walletConnected && (\n        <>\n          <Divider />\n          <PaperContent darker topPadding bottomPadding>\n            <TransactionFees\n              chain={chain}\n              currency={feeCurrency}\n              type={TxType.MINT}\n              address={tx.userAddress}\n            />\n          </PaperContent>\n        </>\n      )}\n      \n  \n      <Debug it={{ tx, txState: txState }} />\n    </>\n  );\n};\n\ntype OnMachineSendReadyFn = (\n  send: ReturnType<typeof useMintMachine>[1]\n) => void;\n\ntype MintTransactionStatusProps = {\n  tx: GatewaySession;\n  depositHash?: string;\n  updateHash: (arg0: string) => void\n  rdtx: any\n  setRdtx: any\n};\n\nconst MintTransactionStatus: FunctionComponent<MintTransactionStatusProps> = ({\n  tx,\n  depositHash = \"\",\n  updateHash,\n  rdtx,\n  setRdtx\n}) => {\n  const chain = useSelector($chain);\n  const renNetwork = useSelector($renNetwork);\n  const { account } = useSelectedChainWallet();\n\n  const [state, setState] = useState(\"restoringDeposit\" as string)\n  const {\n    currentIndex,\n    currentHash,\n    total,\n    handlePrev,\n    handleNext,\n  } = useDepositPagination(tx, depositHash, updateHash);\n\n\n\n  var SigDict: { [id: string]: SignatureMessage; } = {}\n\n  const { showNotification, closeNotification } = useNotifications();\n  const [signatures, setSignatures] = useState(SigDict)\n  const [timeOut, setTimeOut] = useState(0)\n  let timeoutTimer: any = undefined\n\n  const timeoutFunc = () =>\n  {\n    setTimeOut(timeOut+1)\n  }\n\n  useEffect(() => {\n    // here we decide on the transaction status\n    const dep: DepositEntry = tx.transactions[depositHash]\n    console.log(dep)\n    if(timeoutTimer!==undefined){\n      clearTimeout(timeoutTimer)\n      timeoutTimer = undefined\n    }\n\n    if(dep){\n      const confs = dep?.good || false\n      if(!confs) \n        setState(\"srcSettling\")\n      else {\n        if(depositHash in signatures){\n          console.log(rdtx)\n          console.log(depositHash)\n          if(depositHash in rdtx){\n            setState(\"completed\")\n          }else{\n            setState(\"accepted\")\n          }\n        }else{\n            setState(\"srcConfirmed\")\n            submitSignRequest()\n            timeoutTimer = setTimeout(timeoutFunc, 12000)\n        }\n        \n      }\n    }\n  },[tx, depositHash, signatures, rdtx, timeOut]);\n  \n\n\n  const submitToBridge = async() => {\n      console.log(\"Submitting via Wallet Provider\")\n      const siggy = signatures[depositHash]\n      if(siggy['signatures'] == undefined) return\n      const r = '0x' + siggy['signatures'][0]['r'] || ''\n      const s = '0x' + siggy['signatures'][0]['s'] || ''\n      const v = siggy['signatures'][0]['recovery_id']==\"00\" ? 0 : 1\n      console.log(tx.destAddress, depositHash.split(\":\")[0], parseInt(depositHash.split(\":\")[1]), activeDeposit?.vout?.value_satoshi || 0, tx.sourceAsset, r, s, v + 27)\n      let res: any = await getSignatures(tx.destAddress, depositHash.split(\":\")[0], parseInt(depositHash.split(\":\")[1]), activeDeposit?.vout?.value_satoshi || 0, tx.sourceAsset, r, s, v + 27)\n      if(res.err!==null && res.err?.code != 0) {\n        console.log(res.err?.message)\n        showNotification(res.err?.message as string || \"\", {\n          variant: \"error\",\n          persist: false,\n        });\n      }else{\n        console.log(res);\n        let rdCopy = JSON.parse(JSON.stringify(rdtx))\n        rdCopy[depositHash] = res.result\n        setRdtx(rdCopy)\n      }\n  }\n\n  const submitSignRequest = async() => {\n    console.log(\"Submitting Signing Request\")\n    getKeySignatures(tx.destAddress, (activeDeposit?.vout?.txid || \"\").replace(\"0x\",\"\"), activeDeposit?.vout?.n || 0, tx.destChain).then((sigs) => {\n      if(sigs && sigs?.status == 1){\n        let sigCopy = JSON.parse(JSON.stringify(signatures))\n        sigCopy[depositHash] = sigs\n        setSignatures(sigCopy)\n      }\n    }).catch((err) => {})\n  }\n\n  useEffect(() => {\n    let key = 0;\n    if (total > 1) {\n      key = showNotification(<MultipleDepositsMessage />, {\n        variant: \"warning\",\n        persist: true,\n      }) as number;\n    }\n    return () => {\n      if (key) {\n        closeNotification(key);\n      }\n    };\n  }, [showNotification, closeNotification, total]);\n\n  const [wrongAddressDialogOpened, setWrongAddressDialogOpened] = useState(\n    false\n  );\n  const handleCloseWrongAddressDialog = useCallback(() => {\n    setWrongAddressDialogOpened(false);\n  }, []);\n\n  useEffect(() => {\n    if (\n      account &&\n      tx.userAddress &&\n      account.toLowerCase() !== tx.userAddress.toLowerCase()\n    ) {\n      setWrongAddressDialogOpened(true);\n    } else {\n      setWrongAddressDialogOpened(false);\n    }\n  }, [account, tx.userAddress, tx]);\n\n  const activeDeposit = useMemo<\n    DepositEntry\n   | null>(() => {\n    if ((tx?.transactions === undefined)) {\n      return null;\n    }\n    const deposit = tx.transactions[currentHash || depositHash];\n    if (!deposit){\n      return null;\n    }\n    return deposit;\n  }, [currentHash, tx, depositHash]);\n\n  const {getSignatures} = useRedeem()\n\n\n  // In order to enable quick restoration, we need to persist the deposit transaction\n  // We persist via querystring, so lets check if the transaction is present\n  // and update otherwise\n  const location = useLocation();\n  const history = useHistory();\n\n  useEffect(() => {\n    if (!location.search) return;\n    const queryTx = parseTxQueryString(location.search);\n    const deposit = (queryTx?.transactions || {})[currentHash];\n    // If we have detected a deposit, but there is no deposit in the querystring\n    // update the queryString to have the deposit\n    // TODO: to enable quick resume, we may want to ask users to update their bookmarks\n    if (activeDeposit && !deposit) {\n      history.replace({\n        pathname: paths.MINT_TRANSACTION,\n        search: \"?\" + createTxQueryString(tx),\n      });\n    }\n  }, [currentHash, depositHash, location, activeDeposit, tx, history]);\n\n  const { mintCurrencyConfig } = getLockAndMintParams(\n    tx,\n    currentHash\n  );\n  const accountExplorerLink = getAddressExplorerLink(\n    chain,\n    renNetwork,\n    account\n  );\n\n  return (\n    <>\n      {activeDeposit ? (\n        <DepositWrapper>\n          <MintTransactionDepositStatus\n            tx={tx}\n            deposit={activeDeposit}\n            depositHash={depositHash}\n            state={state}\n            submitter={submitToBridge}\n            mintHash={rdtx[depositHash]}\n          />\n          {total > 1 && (\n            <>\n              <DepositPrevButton\n                onClick={handlePrev}\n                disabled={currentIndex === 0}\n              />\n              <DepositNextButton\n                onClick={handleNext}\n                disabled={currentIndex === total - 1}\n              />\n            </>\n          )}\n        </DepositWrapper>\n      ) : (\n        <MintDepositToStatus tx={tx} />\n      )}\n    \n\n      <WrongAddressWarningDialog\n        open={wrongAddressDialogOpened}\n        address={account}\n        addressExplorerLink={accountExplorerLink}\n        currency={mintCurrencyConfig.short}\n        onAlternativeAction={handleCloseWrongAddressDialog}\n      />\n      <Debug\n        it={{\n          depositHash,\n          pagination: { currentIndex, currentHash, total },\n          activeDeposit,\n          total,\n          currentIndex,\n          currentHash,\n        }}\n      />\n    </>\n  );\n};\n\ntype MintTransactionDepositStatusProps = {\n  tx: GatewaySession;\n  deposit: DepositEntry;\n  depositHash: string;\n  state: string;\n  submitter: ()=>void\n  mintHash: string;\n};\n\n\nexport const MintTransactionDepositStatus: FunctionComponent<MintTransactionDepositStatusProps> = ({\n  tx,\n  deposit,\n  depositHash,\n  state,\n  submitter,\n  mintHash,\n}) => {\n  const history = useHistory();\n  const location = useLocation();\n \n\n  console.debug(tx.id, depositHash, state);\n  switch (state) {\n    case \"srcSettling\":\n      return (\n        <MintDepositConfirmationStatus tx={tx} depositHash={depositHash} />\n      );\n    case \"srcConfirmed\": // source sourceChain confirmations ok, but renVM still doesn't accept it\n      return <ProgressStatus reason=\"Generating Signatures\" />;\n    case \"errorAccepting\":\n    case \"errorSubmitting\":\n    case \"claiming\":\n    case \"accepted\": // RenVM accepted it, it can be submitted to ethereum\n      return (\n        <MintDepositAcceptedStatus\n          tx={tx}\n          depositHash={depositHash}\n          submitting={state === \"claiming\"}\n          submittingError={\n            state === \"errorSubmitting\" || state === \"errorAccepting\"\n          }\n          onSubmit={submitter}\n        />\n      );\n    case \"destInitiated\": // final txHash means its done or check if wallet balances went up\n      return (\n        <DestinationPendingStatus\n          tx={tx}\n          depositHash={depositHash}\n          submitting={true}\n        />\n      );\n    case \"completed\":\n      return <MintCompletedStatus tx={tx} depositHash={depositHash} mintHash={mintHash} chain={tx.destChain}/>;\n    case \"restoringDeposit\":\n      return <ProgressStatus reason=\"Restoring deposit\" />;\n    default:\n      return <ProgressStatus reason=\"This is just weird\" />;\n  }\n};\n","import { useMultiwallet } from \"@renproject/multiwallet-ui\";\nimport {\n  DepositMachineSchema,\n  GatewayMachineContext,\n  GatewayMachineEvent,\n  GatewaySession,\n  mintMachine,\n} from \"@renproject/ren-tx\";\nimport { useMachine } from \"@xstate/react\";\nimport { useCallback, useEffect, useState } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { Interpreter, State } from \"xstate\";\nimport { env } from \"../../constants/environmentVariables\";\nimport { db } from \"../../services/database/database\";\nimport { getRenJs } from \"../../services/renJs\";\nimport { lockChainMap, mintChainMap } from \"../../services/rentx\";\nimport { $renNetwork } from \"../network/networkSlice\";\nimport { updateTransaction } from \"../transactions/transactionsSlice\";\nimport { cloneTx } from \"../transactions/transactionsUtils\";\nimport { depositSorter } from \"./mintUtils\";\n\nexport const useMintMachine = (mintTransaction: GatewaySession) => {\n  const tx = cloneTx(mintTransaction);\n  const { enabledChains } = useMultiwallet();\n  const network = useSelector($renNetwork);\n  const providers = Object.entries(enabledChains).reduce(\n    (c, n) => ({\n      ...c,\n      [n[0]]: n[1].provider,\n    }),\n    {}\n  );\n  const machineHook = useMachine(mintMachine, {\n    context: {\n      tx,\n      providers,\n      sdk: getRenJs(network),\n      fromChainMap: lockChainMap,\n      toChainMap: mintChainMap,\n    },\n    devTools: env.XSTATE_DEVTOOLS,\n  });\n\n  return machineHook;\n};\n\nexport type DepositMachineSchemaState = keyof DepositMachineSchema[\"states\"];\n\n\n\nexport const useDepositPagination = (\n  tx: GatewaySession,\n  depositSourceHash = \"\",\n  updateHash: (arg0: string) => void\n) => {\n  const sortedDeposits = tx.transactions;\n  const orderedHashes = Object.keys(sortedDeposits).map((deposit) => deposit);\n\n  const total = orderedHashes.length;\n  const initial = depositSourceHash || total > 0 ? orderedHashes[0] : \"\";\n  const [currentHash, setCurrentHash] = useState(initial);\n  useEffect(() => {\n    setCurrentHash(initial);\n  }, [initial]);\n\n  const currentIndex = orderedHashes.indexOf(currentHash);\n  const nextIndex =\n    total > 0 && currentIndex + 1 < total ? currentIndex + 1 : 0;\n  const nextHash = orderedHashes[nextIndex];\n  const prevIndex = total > 0 && currentIndex - 1 >= 0 ? currentIndex - 1 : 0;\n  const prevHash = orderedHashes[prevIndex];\n\n  const handleNext = useCallback(() => {\n    console.log(orderedHashes)\n    console.log(\"next:\",nextHash)\n    setCurrentHash(nextHash);\n    updateHash(nextHash)\n  }, [nextHash]);\n\n  const handlePrev = useCallback(() => {\n    console.log(\"prev:\",prevHash)\n    setCurrentHash(prevHash);\n    updateHash(prevHash)\n  }, [prevHash]);\n\n\n  return {\n    currentHash,\n    currentIndex,\n    handleNext,\n    handlePrev,\n    total  };\n};\n","import React, { FunctionComponent, useCallback, useState } from \"react\";\nimport { RouteComponentProps } from \"react-router\";\nimport { Route } from \"react-router-dom\";\nimport { paths } from \"../../pages/routes\";\nimport { usePageTitle } from \"../../providers/TitleProviders\";\nimport { TransactionTypeTabs } from \"../transactions/components/TransactionTypeTabs\";\nimport { useSetCurrentTxId } from \"../transactions/transactionsHooks\";\nimport { TxConfigurationStep } from \"../transactions/transactionsUtils\";\nimport { MintFeesStep } from \"./steps/MintFeesStep\";\nimport { MintInitialStep } from \"./steps/MintInitialStep\";\nimport { MintProcessStep } from \"./steps/MintProcessStep\";\n\nconst MintConfiguration: FunctionComponent<RouteComponentProps> = () => {\n  const [step, setStep] = useState(TxConfigurationStep.INITIAL);\n\n  // clear the current tx so that history starts processing again\n  useSetCurrentTxId(\"\");\n\n  const onInitialNext = useCallback(() => {\n    setStep(TxConfigurationStep.FEES);\n  }, []);\n  const onFeesPrev = useCallback(() => {\n    setStep(TxConfigurationStep.INITIAL);\n  }, []);\n\n  return (\n    <>\n      {step === TxConfigurationStep.INITIAL && (\n        <>\n          <TransactionTypeTabs />\n          <MintInitialStep onNext={onInitialNext} />\n        </>\n      )}\n      {step === TxConfigurationStep.FEES && (\n        <MintFeesStep onPrev={onFeesPrev} />\n      )}\n    </>\n  );\n};\n\nexport const MintFlow: FunctionComponent<RouteComponentProps> = ({ match }) => {\n  usePageTitle(\"Minting\");\n  return (\n    <>\n      <Route exact path={paths.MINT} component={MintConfiguration} />\n      <Route exact path={paths.MINT_TRANSACTION} component={MintProcessStep} />\n    </>\n  );\n};\n","import { Box, Typography, useTheme } from \"@material-ui/core\";\nimport { GatewaySession } from \"@renproject/ren-tx\";\nimport React, { FunctionComponent, useCallback } from \"react\";\nimport { useDispatch } from \"react-redux\";\nimport { useHistory } from \"react-router-dom\";\nimport { useEffectOnce } from \"react-use\";\nimport {\n  ActionButton,\n  ActionButtonWrapper,\n} from \"../../../components/buttons/Buttons\";\nimport { Link } from \"../../../components/links/Links\";\nimport {\n  BigDoneIcon,\n  ProgressWithContent,\n  ProgressWrapper,\n  TransactionStatusInfo,\n} from \"../../../components/progress/ProgressHelpers\";\nimport { Debug } from \"../../../components/utils/Debug\";\nimport { paths } from \"../../../pages/routes\";\nimport { useNotifications } from \"../../../providers/Notifications\";\nimport { useSetPaperTitle } from \"../../../providers/TitleProviders\";\nimport { useBrowserNotifications } from \"../../notifications/notificationsUtils\";\nimport {\n  GeneralErrorDialog,\n  SubmitErrorDialog,\n} from \"../../transactions/components/TransactionsHelpers\";\nimport { resetRelease } from \"../releaseSlice\";\nimport { getBurnAndReleaseParams } from \"../releaseUtils\";\n\nexport const a = 1;\n\ntype ReleaseProgressStatusProps = {\n  tx: GatewaySession;\n  onSubmit?: () => void;\n  onReload?: () => void;\n  submittingError?: boolean;\n  generalError?: boolean;\n  submitting?: boolean;\n  pending?: boolean;\n};\n\nexport const ReleaseProgressStatus: FunctionComponent<ReleaseProgressStatusProps> = ({\n  tx,\n  onSubmit,\n  onReload,\n  submitting = false,\n  submittingError,\n  generalError,\n  pending = false,\n}) => {\n  useSetPaperTitle(\"Submit\");\n  const theme = useTheme();\n  const {\n    burnChainConfig,\n    releaseCurrencyConfig,\n    burnTxHash,\n    burnTxLink,\n  } = getBurnAndReleaseParams(tx);\n  const { MainIcon } = burnChainConfig;\n\n  const handleSubmit = useCallback(() => {\n    if (onSubmit) {\n      onSubmit();\n    }\n  }, [onSubmit]);\n\n  const buttonSubmitting = pending || submitting;\n\n  return (\n    <>\n      <ProgressWrapper>\n        <ProgressWithContent\n          color={theme.customColors.skyBlue}\n          processing={buttonSubmitting}\n        >\n          {pending ? (\n            <TransactionStatusInfo\n              status=\"Pending\"\n              chain={burnChainConfig.full}\n              address={\n                <Link\n                  color=\"primary\"\n                  underline=\"hover\"\n                  href={burnTxLink}\n                  target=\"_blank\"\n                >\n                  {burnTxHash}\n                </Link>\n              }\n            />\n          ) : (\n            <MainIcon fontSize=\"inherit\" color=\"inherit\" />\n          )}\n        </ProgressWithContent>\n      </ProgressWrapper>\n      {!pending && (\n        <Typography variant=\"body1\" align=\"center\" gutterBottom>\n          To receive your {releaseCurrencyConfig.short}, submit a release\n          transaction to {burnChainConfig.full} via your Web3 Wallet.\n        </Typography>\n      )}\n      <ActionButtonWrapper>\n        <ActionButton onClick={handleSubmit} disabled={buttonSubmitting}>\n          {buttonSubmitting ? \"Submitting\" : \"Submit\"} to {burnChainConfig.full}\n          {buttonSubmitting && \"...\"}\n        </ActionButton>\n      </ActionButtonWrapper>\n      <SubmitErrorDialog open={Boolean(submittingError)} onAction={onReload} />\n      <GeneralErrorDialog open={Boolean(generalError)} onAction={onReload} />\n    </>\n  );\n};\n\ntype ReleaseCompletedStatusProps = {\n  tx: GatewaySession;\n  onReturn?: () => void;\n};\n\ntype ReleaseShortcutCompletedStatusProps = {\n  txid: string;\n  amount: number;\n  chain: string;\n  onPrev?: () => void;\n  onReturn?: () => void;\n};\n\nexport const ReleaseCompletedStatus: FunctionComponent<ReleaseCompletedStatusProps> = ({\n  tx,\n}) => {\n  useSetPaperTitle(\"Completed\");\n  const dispatch = useDispatch();\n  const history = useHistory();\n  const {\n    releaseChainConfig,\n    releaseCurrencyConfig,\n    burnChainConfig,\n    burnTxLink,\n    releaseTxLink,\n    releaseAddressLink,\n  } = getBurnAndReleaseParams(tx);\n  const handleReturn = useCallback(() => {\n    history.push(paths.RELEASE);\n    dispatch(resetRelease());\n  }, [dispatch, history]);\n\n  const notificationMessage = `Successfully released ${tx.targetAmount} ${releaseCurrencyConfig.short}`;\n  const { showNotification } = useNotifications();\n  const { showBrowserNotification } = useBrowserNotifications();\n  useEffectOnce(() => {\n    showNotification(\n      <span>\n        {notificationMessage}{\" \"}\n        <Link external href={releaseTxLink || releaseAddressLink}>\n          View {releaseChainConfig.full}{\" \"}\n          {releaseTxLink ? \"transaction\" : \"address\"}\n        </Link>\n      </span>\n    );\n    showBrowserNotification(notificationMessage);\n  });\n\n  return (\n    <>\n      <ProgressWrapper>\n        <ProgressWithContent>\n          <BigDoneIcon />\n        </ProgressWithContent>\n      </ProgressWrapper>\n      <ActionButtonWrapper>\n        <ActionButton onClick={handleReturn}>Back to Start</ActionButton>\n      </ActionButtonWrapper>\n      <Box display=\"flex\" justifyContent=\"space-between\" flexWrap=\"wrap\" py={2}>\n        <Link\n          external\n          color=\"primary\"\n          variant=\"button\"\n          underline=\"hover\"\n          href={releaseTxLink || releaseAddressLink}\n        >\n          {releaseChainConfig.full} {releaseTxLink ? \"transaction\" : \"address\"}\n        </Link>\n        <Link\n          external\n          color=\"primary\"\n          variant=\"button\"\n          underline=\"hover\"\n          href={burnTxLink}\n        >\n          {burnChainConfig.full} transaction\n        </Link>\n      </Box>\n      <Debug it={{ tx }} />\n    </>\n  );\n};\n\n\nexport const ReleaseShortcutCompletedStatus: FunctionComponent<ReleaseShortcutCompletedStatusProps> = ({\n  txid,\n  amount,\n  chain,\n  onPrev\n}) => {\n  useSetPaperTitle(\"Completed\");\n  const dispatch = useDispatch();\n  const history = useHistory();\n  const handleReturn = useCallback(() => {\n    if(onPrev)\n    \tonPrev();\n    dispatch(resetRelease());\n  }, [dispatch, history]);\n  const notificationMessage = `Successfully released`;\n  const { showNotification } = useNotifications();\n  const { showBrowserNotification } = useBrowserNotifications();\n  let releaseTxLink: string;\n  if(chain == \"ethereum\"){\n    releaseTxLink=\"https://etherscan.io/tx/\" + txid\n  }else{\n    releaseTxLink=\"https://bscscan.com/tx/\" + txid\n  }  \n  useEffectOnce(() => {\n    showNotification(\n      <span>\n        {notificationMessage}{\" \"}\n        <Link external href={releaseTxLink}>\n          View Transaction\n        </Link>\n      </span>\n    );\n    showBrowserNotification(notificationMessage);\n  });\n\n  return (\n    <>\n      <ProgressWrapper>\n        <ProgressWithContent>\n          <BigDoneIcon />\n        </ProgressWithContent>\n      </ProgressWrapper>\n      <ActionButtonWrapper>\n        <ActionButton onClick={handleReturn}>Back to Start</ActionButton>\n      </ActionButtonWrapper>\n      <Box display=\"flex\" justifyContent=\"space-between\" flexWrap=\"wrap\" py={2}>\n        <Link\n          external\n          color=\"primary\"\n          variant=\"button\"\n          underline=\"hover\"\n          href={releaseTxLink}\n        >\n          View Transaction on Block Explorer\n        </Link>\n      </Box>\n\n    </>\n  );\n};\n","export const releaseTooltips = {\n  releasing: \"The amount and asset you're releasing before fees are applied.\",\n  from: \"The blockchain you are releasing the asset from.\",\n  to: \"The wallet address you're receiving the assets to.\",\n};\n","import { Divider, IconButton, Typography } from \"@material-ui/core\";\nimport React, {\n  FunctionComponent,\n  useCallback,\n  useEffect,\n  useMemo,\n  useState,\n} from \"react\";\nimport {getLogs} from \"../../../services/bridge\"\n\nimport {\n  ReleaseShortcutCompletedStatus,\n  ReleaseProgressStatus,\n} from '../components/ReleaseStatuses'\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { useHistory } from \"react-router-dom\";\nimport { useNotifications } from \"../../../providers/Notifications\";\n\nimport {\n  ActionButton,\n  ActionButtonWrapper,\n  TransactionDetailsButton,\n} from \"../../../components/buttons/Buttons\";\nimport { NumberFormatText } from \"../../../components/formatting/NumberFormatText\";\nimport { BackArrowIcon } from \"../../../components/icons/RenIcons\";\nimport {\n  PaperActions,\n  PaperContent,\n  PaperHeader,\n  PaperNav,\n  PaperTitle,\n} from \"../../../components/layout/Paper\";\nimport { CenteredProgress, ProgressWithContent, ProgressWrapper } from \"../../../components/progress/ProgressHelpers\";\nimport {validate, Network} from '../releaseAddressValidator'\nimport {\n  AssetInfo,\n  BigAssetAmount,\n  BigAssetAmountWrapper,\n  LabelWithValue,\n  MiddleEllipsisText,\n  SpacedDivider,\n} from \"../../../components/typography/TypographyHelpers\";\nimport { paths } from \"../../../pages/routes\";\nimport { db } from \"../../../services/database/database\";\nimport {\n  getChainConfig,\n  getCurrencyConfig,\n  toReleasedCurrency,\n} from \"../../../utils/assetConfigs\";\nimport { useFetchFees } from \"../../fees/feesHooks\";\nimport { getTransactionFees } from \"../../fees/feesUtils\";\nimport { $renNetwork } from \"../../network/networkSlice\";\nimport { TransactionFees } from \"../../transactions/components/TransactionFees\";\nimport {\n  addTransaction,\n  setCurrentTxId,\n} from \"../../transactions/transactionsSlice\";\nimport {useBurn, useToken} from \"../../wallet/walletHooks\"\nimport {\n  createTxQueryString,\n  LocationTxState,\n  TxConfigurationStepProps,\n  TxType,\n} from \"../../transactions/transactionsUtils\";\nimport {\n  useAuthRequired,\n  useSelectedChainWallet,\n} from \"../../wallet/walletHooks\";\nimport {\n  $multiwalletChain,\n  $wallet,\n  setWalletPickerOpened,\n} from \"../../wallet/walletSlice\";\nimport { releaseTooltips } from \"../components/ReleaseHelpers\";\nimport { $release } from \"../releaseSlice\";\nimport {\n  createReleaseTransaction,\n  preValidateReleaseTransaction,\n} from \"../releaseUtils\";\nimport { releaseChainClassMap } from \"../../../services/rentx\";\nimport { SmallWrapper, MediumWrapper } from \"../../../components/layout/LayoutHelpers\";\nimport { orangeLight } from \"../../../theme/colors\";\n\nexport const ReleaseFeesStep: FunctionComponent<TxConfigurationStepProps> = ({\n  onPrev,\n}) => {\n  useAuthRequired(true);\n  const dispatch = useDispatch();\n  const history = useHistory();\n  const { account, walletConnected } = useSelectedChainWallet();\n  const [releasingInitialized, setReleasingInitialized] = useState(false);\n  const [releaseTxId, setReleaseTxId] = useState(\"\");\n  const [ethconf, setEthconf] = useState({});\n  const { currency, address, amount } = useSelector($release);\n  const network = useSelector($renNetwork);\n  const {\n    chain,\n    signatures: { signature },\n  } = useSelector($wallet);\n  const renChain = useSelector($multiwalletChain);\n  const { fees, pending } = useFetchFees(currency, TxType.BURN);\n  const {getBurn} = useBurn()\n\n  const currencyConfig = getCurrencyConfig(currency);\n  const chainConfig = getChainConfig(chain);\n  const destinationCurrency = toReleasedCurrency(currency);\n  \n  const destinationCurrencyConfig = getCurrencyConfig(destinationCurrency);\n  const { MainIcon } = destinationCurrencyConfig;\n  const tx = useMemo(\n    () =>\n      createReleaseTransaction({\n        currency: currency,\n        destAddress: address,\n        userAddress: account,\n        sourceChain: renChain,\n        network: network,\n      }),\n    [currency, address, account, renChain, network]\n  );\n  const canInitializeReleasing = preValidateReleaseTransaction(tx);\n  const { showNotification, closeNotification } = useNotifications();\n\n  const handleConfirm = useCallback(async() => {\n    setReleasingInitialized(true);\n    if (walletConnected) {\n      let res: any = await getBurn(address, amount, tx.sourceAsset)\n      console.log(res)\n      if(res.err!==null && res.err?.code != 0) {\n        setReleasingInitialized(false);\n        showNotification(res.err?.message as string || \"\", {\n          variant: \"error\",\n          persist: false,\n        });\n      }else{\n        setReleasingInitialized(false);\n        setReleaseTxId(res.result); // TODO: DO METAFUCK MAGIC HERE!\n      }\n    } else {\n      setReleasingInitialized(false);\n      dispatch(setWalletPickerOpened(true));\n    }\n  }, [dispatch, canInitializeReleasing, walletConnected]);\n  const targetCurrency = toReleasedCurrency(currency);\n  const releaseCurrencyConfig = getCurrencyConfig(targetCurrency);\n  const releaseChainConfig = getChainConfig(releaseCurrencyConfig.sourceChain);\n  const validateAddress = useMemo(() => {\n     // TODO: improve this\n     return validate(address, Network.mainnet)\n\n  }, [releaseChainConfig.rentxName, network, address]);\n\n  var getter = () => { \n    if (releaseTxId!=\"\" && ((ethconf as any)?.Executed || false) == false) {\n      getLogs(releaseTxId, chain==\"BSCC\"?\"binance\":\"ethereum\").then((jsonObj) => {\n        setEthconf(jsonObj)\n        const intervalObj = setTimeout(() => getter(), 3000);\n      }).catch(() => {\n        const intervalObj = setTimeout(() => getter(), 3000);\n      })\n      \n    }\n  }\n  useEffect(() => {\n    if (releaseTxId!=\"\") {\n      getter()\n    }\n  }, [releaseTxId]);\n\n if (releaseTxId!=\"\")\n  if (((ethconf as any)?.Executed || false) == true) {\n  return (\n    <>\n    <PaperHeader>\n        <PaperNav>\n          <IconButton onClick={onPrev}>\n            <BackArrowIcon />\n          </IconButton>\n        </PaperNav>\n        <PaperTitle>All Done</PaperTitle>\n        <PaperActions />\n      </PaperHeader>\n      <PaperContent bottomPadding>\n      <ReleaseShortcutCompletedStatus txid={releaseTxId} amount={amount} chain={tx.sourceChain} onPrev={onPrev}/>\n      </PaperContent>\n    </>)\n  } else {\n    return (\n      <>\n      <PaperHeader>\n          \n        </PaperHeader>\n        <PaperContent bottomPadding>\n\n      <ProgressWrapper>\n        <ProgressWithContent\n          color={orangeLight}\n          confirmations={(ethconf as any)?.Confirmations || 0}\n          targetConfirmations={5}\n        >\n          <MainIcon fontSize=\"inherit\" color=\"inherit\" />\n        </ProgressWithContent>\n      </ProgressWrapper>\n      <SmallWrapper>\n        <Typography variant=\"body1\" align=\"center\">\n          {(ethconf as any)?.Confirmations || 0} of {5} confirmations\n        </Typography>\n      </SmallWrapper>\n      <MediumWrapper>\n      <Typography variant=\"body1\" align=\"center\">\n      Please wait until your transaction has been confirmed on the {chain==\"BSCC\"?\"Binance\":\"Ethereum\"} Blockchain. Do not close this window, as your DFI  will be released after this step has completed.\n      </Typography>\n      </MediumWrapper>\n      </PaperContent>\n      </>)\n  }\n else return (\n     <>\n      <PaperHeader>\n        <PaperNav>\n          <IconButton onClick={onPrev}>\n            <BackArrowIcon />\n          </IconButton>\n        </PaperNav>\n        <PaperTitle>Fees & Confirm</PaperTitle>\n        <PaperActions />\n      </PaperHeader>\n\n      <PaperContent bottomPadding>\n        <BigAssetAmountWrapper>\n          <BigAssetAmount\n            value={\n              <NumberFormatText\n                value={amount}\n                spacedSuffix={currencyConfig.short}\n              />\n            }\n          />\n        </BigAssetAmountWrapper>\n        <Typography variant=\"body1\" gutterBottom>\n          Details\n        </Typography>\n        <LabelWithValue\n          label=\"Releasing\"\n          labelTooltip={releaseTooltips.releasing}\n          value={\n            <NumberFormatText\n              value={amount}\n              spacedSuffix={currencyConfig.short}\n            />\n          }\n        />\n        <LabelWithValue\n          label=\"From\"\n          labelTooltip={releaseTooltips.from}\n          value={chainConfig.full}\n        />\n        <LabelWithValue\n          label=\"To\"\n          labelTooltip={releaseTooltips.to}\n          value={<MiddleEllipsisText hoverable>{address}</MiddleEllipsisText>}\n        />\n        <SpacedDivider />\n        <Typography variant=\"body1\" gutterBottom>\n          Fees\n        </Typography>\n        <TransactionFees\n          chain={chain}\n          currency={currency}\n          type={TxType.BURN}\n          hideButton={true}\n        />\n      </PaperContent>\n      <Divider />\n      <PaperContent darker topPadding bottomPadding>\n        <ActionButtonWrapper>\n          <ActionButton onClick={handleConfirm} disabled={releasingInitialized || amount<=0.01 || !validateAddress}>\n            {!walletConnected\n              ? \"Connect Wallet\"\n              : releasingInitialized\n              ? \"Confirming...\"\n              : \"Confirm\"}\n          </ActionButton>\n        </ActionButtonWrapper>\n      </PaperContent>\n    </>\n  );\n};\n","import {\n  OutlinedInputProps,\n  styled,\n  TextField,\n  TextFieldProps,\n} from \"@material-ui/core\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport React, { FunctionComponent } from \"react\";\n\nexport const useStyles = makeStyles((theme) => ({\n  root: {\n    fontSize: 13,\n    // border: `1px solid ${theme.palette.primary.main}`,\n    // borderRadius: 20,\n    // padding: 18,\n  },\n  input: {\n    paddingTop: 10,\n    fontSize: 13,\n  },\n}));\n\nexport const OutlinedTextField: FunctionComponent<TextFieldProps> = (props) => {\n  const { input, ...classes } = useStyles();\n  return (\n    <TextField\n      classes={classes}\n      variant=\"outlined\"\n      InputProps={\n        { notched: false, classes: { root: input } } as OutlinedInputProps\n      }\n      fullWidth\n      {...props}\n    />\n  );\n};\n\nexport const OutlinedTextFieldWrapper = styled(\"div\")({\n  minHeight: 75,\n});\n\nexport const BigOutlinedTextFieldWrapper = styled(\"div\")({\n  marginTop: 40,\n  marginBottom: 10,\n});\n\nexport const SmallOutlinedTextFieldWrapper = styled(\"div\")({\n  marginTop: 0,\n  marginBottom: 25,\n});\n","import { Divider,   DialogActions,\n  Fade, Typography, Box,\n  Button,\n  DialogContent,\n  TextField,\n  makeStyles, } from \"@material-ui/core\";\nimport React, { FunctionComponent, useCallback, useMemo, useState } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport {\n  ActionButton,\n  ActionButtonWrapper,\n} from \"../../../components/buttons/Buttons\";\nimport {\n  AssetDropdown,\n  AssetDropdownWrapper,\n} from \"../../../components/dropdowns/AssetDropdown\";\nimport { NumberFormatText } from \"../../../components/formatting/NumberFormatText\";\nimport {\n  OutlinedTextField,\n  BigOutlinedTextFieldWrapper,SmallOutlinedTextFieldWrapper\n} from \"../../../components/inputs/OutlinedTextField\";\nimport {\n  BigCurrencyInput,\n  BigCurrencyInputWrapper,\n} from \"../../../components/inputs/BigCurrencyInput\";\nimport { PaperContent } from \"../../../components/layout/Paper\";\nimport { Link } from \"../../../components/links/Links\";\nimport { CenteredProgress } from \"../../../components/progress/ProgressHelpers\";\nimport { TooltipWithIcon } from \"../../../components/tooltips/TooltipWithIcon\";\nimport {\n  AssetInfo,\n  LabelWithValue,\n} from \"../../../components/typography/TypographyHelpers\";\nimport { releaseChainClassMap } from \"../../../services/rentx\";\nimport {\n  getChainConfig,\n  getCurrencyConfig,\n  supportedBurnChains,\n  supportedReleaseCurrencies,\n  toReleasedCurrency,\n} from \"../../../utils/assetConfigs\";\nimport { useFetchFees } from \"../../fees/feesHooks\";\nimport { getTransactionFees } from \"../../fees/feesUtils\";\nimport { $renNetwork } from \"../../network/networkSlice\";\nimport { useRenNetworkTracker } from \"../../transactions/transactionsHooks\";\nimport {\n  isMinimalAmount,\n  TxConfigurationStepProps,\n  TxType,\n} from \"../../transactions/transactionsUtils\";\nimport { useSelectedChainWallet } from \"../../wallet/walletHooks\";\nimport {\n  $wallet,\n  setChain,\n  setWalletPickerOpened,\n} from \"../../wallet/walletSlice\";\nimport { getAssetBalance, useFetchBalances } from \"../../wallet/walletUtils\";\nimport {\n  $release,\n  setReleaseAddress,\n  setReleaseCurrency,\n  setReleaseAmount,\n} from \"../releaseSlice\";\nimport validate, { Network } from \"../releaseAddressValidator\";\nimport { BridgeModal } from \"../../../components/modals/BridgeModal\";\nimport { Alert } from \"@material-ui/lab\";\nimport { getLogs } from \"../../../services/bridge\";\n\nexport const ReleaseInitialStep: FunctionComponent<TxConfigurationStepProps> = ({\n  onNext,\n}) => {\n  const dispatch = useDispatch();\n  const { walletConnected } = useSelectedChainWallet();\n  const { chain, balances } = useSelector($wallet);\n  const network = useSelector($renNetwork);\n  const { currency, address, amount } = useSelector($release);\n  const balance = getAssetBalance(balances, currency);\n  const [recoverProcessing, setRecoverProcessing] = useState(false);\n\n  useRenNetworkTracker(currency);\n  useFetchBalances(supportedReleaseCurrencies);\n  const { fees, pending } = useFetchFees(currency, TxType.BURN);\n \n\n  const handleChainChange = useCallback(\n    (event) => {\n      dispatch(setChain(event.target.value));\n    },\n    [dispatch]\n  );\n  const handleCurrencyChange = useCallback(\n    (event) => {\n      dispatch(setReleaseCurrency(event.target.value));\n    },\n    [dispatch]\n  );\n \n  const handleAddressChange = useCallback(\n    (event) => {\n      dispatch(setReleaseAddress(event.target.value));\n    },\n    [dispatch]\n  );\n  \n  const handleAmountChange = useCallback(\n    (event) => {\n      dispatch(setReleaseAmount(event.target.value));\n    },\n    [dispatch]\n  );\n\n  const [recoverOpened, setRecoverOpened] = useState(false);\n  const handleRecover = useCallback((e) => {\n    setRecoverOpened(true);\n    setRecoverError(\"\");\n    setRecoverGood(\"\");\n    setRecoverProcessing(false);\n    e.preventDefault();\n  }, []);\n  const handleRecoverClose = useCallback(() => {\n    setRecoverOpened(false);\n  }, []);\n \n\n  \n\n  const targetCurrency = toReleasedCurrency(currency);\n  const currencyConfig = getCurrencyConfig(currency);\n  const releaseCurrencyConfig = getCurrencyConfig(targetCurrency);\n  const { MainIcon } = releaseCurrencyConfig;\n  const releaseChainConfig = getChainConfig(releaseCurrencyConfig.sourceChain);\n  const [recoverError, setRecoverError] = useState(\"\");\n  const [recoverGood, setRecoverGood] = useState(\"\");\n  const [recoverTxId, setRecoverTxId] = useState(\"\");\n\n  const validateAddress = useMemo(() => {\n    // TODO: improve this\n    return validate(address, Network.mainnet)\n\n }, [releaseChainConfig.rentxName, network, address]);\n  \n  const basicCondition =\n    address &&\n    validateAddress &&\n    !pending;\n  const hasBalance = balance !== null;\n  let enabled;\n  if (walletConnected) {\n    enabled = basicCondition && amount>0.1; // TODO: also check balance here\n  } else {\n    enabled = basicCondition && amount>0.1;\n  }\n  const showMinimalAmountError =\n    walletConnected && !pending;\n\n  const handleRecoverNext = useCallback(() => {\n    setRecoverError(\"\") \n    setRecoverGood(\"\")\n      setRecoverProcessing(true);\n      try {\n        getLogs(recoverTxId, chain==\"BSCC\"?\"binance\":\"ethereum\").then((jsonObj) => {\n          setRecoverGood(\"Broadcasted raw tx: \" + jsonObj.DefiTx)\n          setRecoverProcessing(false);\n        }).catch((e) => {\n          setRecoverError(e.toString())\n          setRecoverProcessing(false);\n        })\n      }\n      catch(e) {\n        setRecoverError(e.toString())\n        setRecoverProcessing(false);\n      }\n\n  }, [recoverTxId, chain])\n\n  const handleNextStep = useCallback(() => {\n    if (!walletConnected) {\n      dispatch(setWalletPickerOpened(true));\n    }\n    if (onNext && basicCondition && hasBalance) {\n      onNext();\n    }\n  }, [dispatch, onNext, walletConnected, basicCondition, hasBalance]);\n\n\n  const useStyles = makeStyles((theme) => ({\n    root: {\n      \"& .MuiInputBase-input\": {\n        background: \"rgb(232, 241, 250)\"\n      },\n      \"& .MuiAlert-message\": { \n        overflowWrap: \"anywhere\"\n     }\n    }\n  }));\n  const classes = useStyles()\n  return (\n    <>\n      <PaperContent>\n        <AssetDropdownWrapper>\n          <AssetDropdown\n            label=\"Chain\"\n            mode=\"chain\"\n            available={supportedBurnChains}\n            value={chain}\n            onChange={handleChainChange}\n          />\n        </AssetDropdownWrapper>\n        <AssetDropdownWrapper>\n          <AssetDropdown\n            label=\"Asset\"\n            mode=\"send\"\n            available={supportedReleaseCurrencies}\n            balances={balances}\n            value={currency}\n            onChange={handleCurrencyChange}\n          />\n        </AssetDropdownWrapper>\n       \n        <BigOutlinedTextFieldWrapper>\n          <OutlinedTextField\n            error={!!address && !validateAddress}\n            placeholder={`Enter a Destination ${releaseChainConfig.full} Address`}\n            label=\"Releasing to\"\n            onChange={handleAddressChange}\n            value={address}\n          />\n        </BigOutlinedTextFieldWrapper>\n        <SmallOutlinedTextFieldWrapper>\n          <OutlinedTextField\n            error={!!address && !validateAddress}\n            placeholder={`Enter an Amount`}\n            label=\"Amount to Burn/Transfer\"\n            onChange={handleAmountChange}\n            \n\n          />\n        </SmallOutlinedTextFieldWrapper>\n      </PaperContent>\n      <Divider />\n      <PaperContent darker topPadding bottomPadding>\n        <ActionButtonWrapper>\n          <ActionButton\n            onClick={handleNextStep}\n            disabled={walletConnected ? !enabled : false}\n          >\n            {walletConnected ? \"Next\" : \"Connect Wallet\"}\n          </ActionButton>\n        </ActionButtonWrapper>\n        <Typography\n          variant=\"subtitle2\"\n          align=\"center\"\n          color=\"textSecondary\"\n          gutterBottom\n        >\n        {walletConnected ? <Link href={'#'} onClick={handleRecover} color='textSecondary'>\n            Click here to recover an incomplete transaction\n        </Link> : \"\"}\n        </Typography>\n      </PaperContent>\n      <BridgeModal\n        open={recoverOpened}\n        title=\"Recovery\"\n        onClose={handleRecoverClose}\n      >\n      <DialogContent>\n          {recoverError!=\"\" ? <Box mb={2}><Alert severity=\"error\">{recoverError}</Alert></Box> : \"\"}\n          {recoverGood!=\"\" ? <Box mb={2}><Alert className={classes.root} severity=\"success\">{recoverGood}</Alert></Box> : \"\"}\n          <Typography variant=\"h5\" align=\"center\" gutterBottom>\n            Transaction Recovery\n          </Typography>\n          <Typography variant=\"body2\" align=\"center\" gutterBottom>\n            If you haven't received your native DFI after burning them on {chain.toString()==\"BSCC\" ? \"Binance\" : \"Ethereum\"}, you can use this recovery form to re-request them. Let's start with the transaction id of your burn transaction.\n          </Typography>\n          <Box mt={3} alignItems=\"center\" justifyContent=\"center\" display=\"flex\" >\n          <TextField autoFocus className={classes.root} style ={{width: '60%'}} \n            label={chain.toString()==\"BSCC\" ? \"Enter your Binance TxID\" : \"Enter your Ethereum TxID\"}\n            onChange={(e) => {\n              setRecoverTxId(e.target.value);\n            }}\n          />\n          </Box>\n          <Box mt={5} alignItems=\"center\" justifyContent=\"center\" display=\"flex\" >\n             <ActionButton disabled={recoverProcessing} onClick={handleRecoverNext}>{!recoverProcessing ? \"Recover\" : \"Wait ... might take some time.\"}</ActionButton>\n          </Box>\n      </DialogContent>\n      </BridgeModal>\n    </>\n  );\n};\n","import {\n  Button,\n  ClickAwayListener,\n  Tooltip,\n  Typography,\n} from \"@material-ui/core\";\nimport React, { FunctionComponent } from \"react\";\nimport {\n  ActionButton,\n  ActionButtonWrapper,\n  ToggleIconButton,\n  ToggleIconButtonProps,\n} from \"../../../components/buttons/Buttons\";\nimport { PaperContent } from \"../../../components/layout/Paper\";\nimport {\n  NestedDrawer,\n  NestedDrawerActions,\n  NestedDrawerContent,\n  NestedDrawerWrapper,\n} from \"../../../components/modals/BridgeModal\";\n\ntype BrowserNotificationsDrawerProps = {\n  open: boolean;\n  onClose: () => void;\n  onEnable: () => void;\n};\n\nexport const BrowserNotificationsDrawer: FunctionComponent<BrowserNotificationsDrawerProps> = ({\n  open,\n  onClose,\n  onEnable,\n}) => {\n  return (\n    <NestedDrawer title=\" \" open={open} onClose={onClose}>\n      <NestedDrawerWrapper>\n        <NestedDrawerContent>\n          <PaperContent topPadding>\n            <Typography variant=\"h5\" align=\"center\" gutterBottom>\n              Enable browser notifications\n            </Typography>\n            <Typography\n              variant=\"subtitle1\"\n              align=\"center\"\n              color=\"textSecondary\"\n              gutterBottom\n            >\n              It will let you track transaction progress.\n            </Typography>\n          </PaperContent>\n        </NestedDrawerContent>\n        <NestedDrawerActions>\n          <PaperContent bottomPadding>\n            <ActionButtonWrapper>\n              <Button variant=\"text\" color=\"primary\" onClick={onClose}>\n                Do not enable\n              </Button>\n            </ActionButtonWrapper>\n            <ActionButtonWrapper>\n              <ActionButton onClick={onEnable}>\n                Enable Browser Notifications\n              </ActionButton>\n            </ActionButtonWrapper>\n          </PaperContent>\n        </NestedDrawerActions>\n      </NestedDrawerWrapper>\n    </NestedDrawer>\n  );\n};\n\ntype BrowserNotificationButtonProps = ToggleIconButtonProps & {\n  onTooltipClose: () => void;\n  tooltipOpened: boolean;\n};\n\nexport const BrowserNotificationButton: FunctionComponent<BrowserNotificationButtonProps> = ({\n  pressed,\n  onClick,\n  onTooltipClose,\n  tooltipOpened,\n}) => {\n  return (\n    <ClickAwayListener onClickAway={onTooltipClose}>\n      <Tooltip\n        onClose={onTooltipClose}\n        open={tooltipOpened}\n        disableFocusListener\n        disableHoverListener\n        disableTouchListener\n        title=\"Turn off browser notifications in your browser settings.\"\n      >\n        <span>\n          <ToggleIconButton\n            pressed={pressed}\n            variant=\"notifications\"\n            onClick={onClick}\n          />\n        </span>\n      </Tooltip>\n    </ClickAwayListener>\n  );\n};\n","import {\n  Button,\n  Divider,\n  ListItemIcon,\n  makeStyles,\n  MenuItem,\n  MenuItemProps,\n  Typography,\n} from \"@material-ui/core\";\nimport { GatewaySession } from \"@renproject/ren-tx\";\nimport classNames from \"classnames\";\nimport React, { FunctionComponent, useCallback, useState } from \"react\";\nimport {\n  ActionButton,\n  ActionButtonWrapper,\n  RedButton,\n} from \"../../../components/buttons/Buttons\";\nimport { CircleIcon } from \"../../../components/icons/IconHelpers\";\nimport {\n  AddIcon,\n  CustomSvgIconComponent,\n  DeleteIcon,\n  TxSettingsIcon,\n} from \"../../../components/icons/RenIcons\";\nimport {\n  OutlinedTextField,\n  OutlinedTextFieldWrapper,\n} from \"../../../components/inputs/OutlinedTextField\";\nimport { PaperContent } from \"../../../components/layout/Paper\";\nimport { externalLinkAttributes } from \"../../../components/links/Links\";\nimport {\n  BridgeModalTitle,\n  NestedDrawer,\n  NestedDrawerActions,\n  NestedDrawerContent,\n  NestedDrawerWrapper,\n} from \"../../../components/modals/BridgeModal\";\n\nconst useTransactionMenuItemStyles = makeStyles((theme) => ({\n  root: {\n    padding: \"8px 20px\",\n    fontSize: 12,\n  },\n  iconWrapper: {\n    minWidth: 32,\n  },\n}));\n\ntype TransactionMenuItemProps = MenuItemProps & {\n  Icon: CustomSvgIconComponent;\n};\n\nexport const TransactionMenuItem: FunctionComponent<TransactionMenuItemProps> = ({\n  onClick,\n  Icon,\n  children,\n  className,\n  button,\n  ...rest\n}) => {\n  const styles = useTransactionMenuItemStyles();\n  return (\n    <MenuItem\n      dense\n      onClick={onClick}\n      className={classNames(styles.root, className)}\n      {...rest}\n    >\n      <ListItemIcon className={styles.iconWrapper}>\n        <CircleIcon Icon={Icon} fontSize=\"small\" variant=\"outlined\" />\n      </ListItemIcon>\n      <Typography variant=\"inherit\">{children}</Typography>\n    </MenuItem>\n  );\n};\n\nconst useTransactionMenuStyles = makeStyles((theme) => ({\n  root: {\n    fontSize: 12,\n  },\n  modalTitle: {\n    padding: `12px 20px`,\n  },\n  titleIconWrapper: {\n    minWidth: 32,\n  },\n  menuItems: {\n    paddingTop: 6,\n    minHeight: 150,\n  },\n  transferId: {\n    paddingBottom: 10,\n  },\n}));\n\nexport type UpdateTxFn = (amount: number, vOut: number, txHash: string) => void;\n\ntype TransactionMenuProps = {\n  open: boolean;\n  onClose: () => void;\n  onDeleteTx: () => void;\n  onUpdateTx?: UpdateTxFn;\n  tx: GatewaySession;\n};\n\nexport const TransactionMenu: FunctionComponent<TransactionMenuProps> = ({\n  open,\n  onClose,\n  onDeleteTx,\n  onUpdateTx,\n  tx,\n}) => {\n  const styles = useTransactionMenuStyles();\n  const handleClose = useCallback(() => {\n    if (onClose) {\n      onClose();\n    }\n  }, [onClose]);\n  const [confirmOpen, setConfirmOpen] = useState(false);\n  const handleConfirmClose = useCallback(() => {\n    setConfirmOpen(false);\n  }, []);\n  const handleDeleteWithConfirm = useCallback(() => {\n    setConfirmOpen(true);\n  }, []);\n\n  const [updateOpen, setUpdateOpen] = useState(false);\n  const handleUpdateClose = useCallback(() => {\n    setUpdateOpen(false);\n  }, []);\n  const handleUpdateOpen = useCallback(() => {\n    setUpdateOpen(true);\n  }, []);\n\n  return (\n    <>\n      <NestedDrawer open={open} onClose={handleClose} className={styles.root}>\n        <BridgeModalTitle className={styles.modalTitle} onClose={handleClose}>\n          <ListItemIcon className={styles.titleIconWrapper}>\n            <CircleIcon\n              Icon={TxSettingsIcon}\n              fontSize=\"small\"\n              variant=\"solid\"\n            />\n          </ListItemIcon>\n          <Typography variant=\"inherit\">Transaction Menu</Typography>\n        </BridgeModalTitle>\n        <NestedDrawerWrapper>\n          <NestedDrawerContent>\n            <div className={styles.menuItems}>\n              <TransactionMenuItem Icon={AddIcon} onClick={handleUpdateOpen}>\n                Insert/update transaction\n              </TransactionMenuItem>\n              <TransactionMenuItem\n                Icon={DeleteIcon}\n                onClick={handleDeleteWithConfirm}\n              >\n                Delete transaction\n              </TransactionMenuItem>\n            </div>\n          </NestedDrawerContent>\n          <NestedDrawerActions>\n            <PaperContent paddingVariant=\"medium\" className={styles.transferId}>\n              <Typography variant=\"inherit\">Transfer ID: {tx.id}</Typography>\n            </PaperContent>\n            <Divider />\n            <PaperContent bottomPadding topPadding paddingVariant=\"medium\">\n              <Button\n                variant=\"outlined\"\n                size=\"small\"\n                href=\"https://renprotocol.typeform.com/to/YdmFyB\"\n                {...externalLinkAttributes}\n              >\n                Report an Issue\n              </Button>\n            </PaperContent>\n          </NestedDrawerActions>\n        </NestedDrawerWrapper>\n      </NestedDrawer>\n      <ConfirmTransactionDeletionDrawer\n        open={confirmOpen}\n        onClose={handleConfirmClose as any}\n        onDeleteTx={onDeleteTx}\n      />\n      {onUpdateTx && (\n        <UpdateTransactionDrawer\n          open={updateOpen}\n          onClose={handleUpdateClose}\n          onUpdateTx={onUpdateTx}\n        />\n      )}\n    </>\n  );\n};\n\ntype ConfirmTransactionDeletionDrawerProps = {\n  open: boolean;\n  onClose: () => void;\n  onDeleteTx: () => void;\n};\n\nexport const ConfirmTransactionDeletionDrawer: FunctionComponent<ConfirmTransactionDeletionDrawerProps> = ({\n  open,\n  onClose,\n  onDeleteTx,\n}) => {\n  const [deleting, setDeleting] = useState(false);\n  const handleDeleteTx = useCallback(() => {\n    setDeleting(true);\n    onDeleteTx();\n  }, [onDeleteTx]);\n  return (\n    <NestedDrawer title=\"Delete a Transaction\" open={open} onClose={onClose}>\n      <NestedDrawerWrapper>\n        <NestedDrawerContent>\n          <PaperContent topPadding>\n            <Typography variant=\"h5\" align=\"center\" gutterBottom>\n              Are you sure?\n            </Typography>\n            <Typography\n              variant=\"body2\"\n              align=\"center\"\n              color=\"textSecondary\"\n              gutterBottom\n            >\n              If you have already sent your assets you will lose them forever if\n              you remove the transaction.\n            </Typography>\n          </PaperContent>\n        </NestedDrawerContent>\n        <NestedDrawerActions>\n          <PaperContent bottomPadding>\n            <ActionButtonWrapper>\n              <RedButton\n                variant=\"text\"\n                color=\"inherit\"\n                startIcon={<DeleteIcon />}\n                onClick={handleDeleteTx}\n                disabled={deleting}\n              >\n                {deleting ? \"Removing...\" : \"Remove\"} Transaction\n              </RedButton>\n            </ActionButtonWrapper>\n            <ActionButtonWrapper>\n              <ActionButton onClick={onClose} disabled={deleting}>\n                Cancel\n              </ActionButton>\n            </ActionButtonWrapper>\n          </PaperContent>\n        </NestedDrawerActions>\n      </NestedDrawerWrapper>\n    </NestedDrawer>\n  );\n};\n\ntype UpdateTransactionDrawerProps = {\n  open: boolean;\n  onClose: () => void;\n  onUpdateTx: UpdateTxFn;\n};\n\nconst isValidInteger = (amount: string) => {\n  return Number.isInteger(Number(amount));\n};\n\nexport const UpdateTransactionDrawer: FunctionComponent<UpdateTransactionDrawerProps> = ({\n  open,\n  onClose,\n  onUpdateTx,\n}) => {\n  const [amount, setAmount] = useState(\"\");\n  const [vout, setVout] = useState(\"\");\n  const [hash, setHash] = useState(\"\");\n  const [updating, setUpdating] = useState(false);\n  const valid = amount && vout && hash;\n  const handleAmountChange = useCallback((event) => {\n    const newValue = event.target.value;\n    if (isValidInteger(newValue)) {\n      setAmount(newValue);\n    }\n  }, []);\n  const handleVoutChange = useCallback((event) => {\n    const newValue = event.target.value;\n    if (isValidInteger(newValue)) {\n      setVout(newValue);\n    }\n  }, []);\n  const handleHashChange = useCallback((event) => {\n    setHash(event.target.value);\n  }, []);\n\n  const handleUpdateTx = useCallback(() => {\n    setUpdating(true);\n    onUpdateTx(Number(amount), Number(vout), hash);\n  }, [onUpdateTx, hash, vout, amount]);\n\n  return (\n    <NestedDrawer title=\"Update Transaction Hash\" open={open} onClose={onClose}>\n      <NestedDrawerWrapper>\n        <NestedDrawerContent>\n          <PaperContent topPadding>\n            <OutlinedTextFieldWrapper>\n              <OutlinedTextField\n                label=\"Amount (sats)\"\n                value={amount}\n                onChange={handleAmountChange}\n                placeholder=\"Enter amount in sats\"\n              />\n            </OutlinedTextFieldWrapper>\n            <OutlinedTextFieldWrapper>\n              <OutlinedTextField\n                label=\"Transaction Hash\"\n                value={hash}\n                onChange={handleHashChange}\n                placeholder=\"Enter transaction hash\"\n              />\n            </OutlinedTextFieldWrapper>\n            <OutlinedTextFieldWrapper>\n              <OutlinedTextField\n                label=\"vOut\"\n                value={vout}\n                onChange={handleVoutChange}\n                placeholder=\"Enter transaction vOut\"\n              />\n            </OutlinedTextFieldWrapper>\n          </PaperContent>\n        </NestedDrawerContent>\n        <NestedDrawerActions>\n          <PaperContent bottomPadding>\n            <ActionButtonWrapper>\n              <RedButton\n                variant=\"text\"\n                color=\"inherit\"\n                onClick={handleUpdateTx}\n                disabled={updating || !valid}\n              >\n                {updating ? \"Updating...\" : \"Update\"} transaction\n              </RedButton>\n            </ActionButtonWrapper>\n            <ActionButtonWrapper>\n              <ActionButton onClick={onClose} disabled={updating}>\n                Cancel\n              </ActionButton>\n            </ActionButtonWrapper>\n          </PaperContent>\n        </NestedDrawerActions>\n      </NestedDrawerWrapper>\n    </NestedDrawer>\n  );\n};\n","import { useMultiwallet } from \"@renproject/multiwallet-ui\";\nimport {\n  burnMachine,\n  BurnMachineContext,\n  BurnMachineEvent,\n  BurnMachineSchema,\n  GatewaySession,\n} from \"@renproject/ren-tx\";\nimport { useMachine } from \"@xstate/react\";\nimport { useCallback, useEffect } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { Interpreter, State } from \"xstate\";\nimport { env } from \"../../constants/environmentVariables\";\nimport { db } from \"../../services/database/database\";\nimport { getRenJs } from \"../../services/renJs\";\nimport { burnChainMap, releaseChainMap } from \"../../services/rentx\";\nimport { $renNetwork } from \"../network/networkSlice\";\nimport { updateTransaction } from \"../transactions/transactionsSlice\";\nimport { cloneTx } from \"../transactions/transactionsUtils\";\n\nexport const useBurnMachine = (burnTransaction: GatewaySession) => {\n  const tx = cloneTx(burnTransaction);\n  const { enabledChains } = useMultiwallet();\n  const network = useSelector($renNetwork);\n  const providers = Object.entries(enabledChains).reduce(\n    (c, n) => ({\n      ...c,\n      [n[0]]: n[1].provider,\n    }),\n    {}\n  );\n  const machineHook = useMachine(burnMachine, {\n    context: {\n      tx,\n      providers,\n      sdk: getRenJs(network),\n      fromChainMap: burnChainMap,\n      toChainMap: releaseChainMap,\n      // If we already have a transaction, we need to autoSubmit\n      // to check the tx status\n      autoSubmit: !!Object.values(burnTransaction.transactions)[0],\n    },\n    devTools: env.XSTATE_DEVTOOLS,\n  });\n\n  useReleaseTransactionPersistence(machineHook[2]);\n\n  return machineHook;\n};\n\nexport type BurnMachineSchemaState = keyof BurnMachineSchema[\"states\"];\n\nexport const useReleaseTransactionPersistence = (\n  service: Interpreter<BurnMachineContext, any, BurnMachineEvent>\n) => {\n\n};\n","import { Divider, IconButton, } from '@material-ui/core'\nimport { BurnMachineSchema, GatewaySession } from '@renproject/ren-tx'\nimport React, {\n  FunctionComponent,\n  useCallback,\n  useEffect,\n  useState,\n} from 'react'\nimport { useDispatch, useSelector } from 'react-redux'\nimport { RouteComponentProps, useHistory, useLocation } from 'react-router-dom'\nimport {\n  ActionButton,\n  ToggleIconButton,\n} from '../../../components/buttons/Buttons'\nimport { NumberFormatText } from '../../../components/formatting/NumberFormatText'\nimport { BackArrowIcon } from '../../../components/icons/RenIcons'\nimport {\n  CenteringSpacedBox,\n  PaperSpacerWrapper,\n} from '../../../components/layout/LayoutHelpers'\nimport {\n  PaperActions,\n  PaperContent,\n  PaperHeader,\n  PaperNav,\n  PaperTitle,\n} from '../../../components/layout/Paper'\nimport {\n  LabelWithValue,\n  MiddleEllipsisText,\n  SpacedDivider,\n} from '../../../components/typography/TypographyHelpers'\nimport { Debug } from '../../../components/utils/Debug'\nimport { WalletStatus } from '../../../components/utils/types'\nimport { WalletConnectionProgress } from '../../../components/wallet/WalletHelpers'\nimport { paths } from '../../../pages/routes'\nimport { usePageTitle, usePaperTitle } from '../../../providers/TitleProviders'\nimport { getChainConfigByRentxName } from '../../../utils/assetConfigs'\n\nimport {\n  BrowserNotificationButton,\n  BrowserNotificationsDrawer,\n} from '../../notifications/components/NotificationsHelpers'\nimport {\n  useBrowserNotifications,\n  useBrowserNotificationsConfirmation,\n} from '../../notifications/notificationsUtils'\nimport { TransactionFees } from '../../transactions/components/TransactionFees'\nimport { TransactionMenu } from '../../transactions/components/TransactionMenu'\nimport { ProgressStatus } from '../../transactions/components/TransactionsHelpers'\nimport {\n  useSetCurrentTxId,\n  useTransactionDeletion,\n} from '../../transactions/transactionsHooks'\nimport {\n  createTxQueryString,\n  getTxPageTitle,\n  TxType,\n  useTxParam,\n} from '../../transactions/transactionsUtils'\nimport {\n  useAuthRequired,\n  useSelectedChainWallet,\n} from '../../wallet/walletHooks'\nimport {\n  $chain,\n  setChain,\n  setWalletPickerOpened,\n} from '../../wallet/walletSlice'\nimport {\n  ReleaseCompletedStatus,\n  ReleaseProgressStatus,\n} from '../components/ReleaseStatuses'\nimport { useBurnMachine } from '../releaseHooks'\nimport { getBurnAndReleaseParams } from '../releaseUtils'\n\nexport const ReleaseProcessStep: FunctionComponent<RouteComponentProps> = ({\n  history,\n  location,\n}) => {\n  useAuthRequired(true);\n  const dispatch = useDispatch();\n  const { status } = useSelectedChainWallet();\n  const walletConnected = status === WalletStatus.CONNECTED;\n  const chain = useSelector($chain);\n  const [reloading, setReloading] = useState(false);\n  const { tx: parsedTx, txState } = useTxParam();\n  const [tx, setTx] = useState<GatewaySession>(parsedTx as GatewaySession); // TODO Partial<GatewaySession>\n  useSetCurrentTxId(tx.id);\n\n  usePageTitle(getTxPageTitle(tx));\n  const [paperTitle, setPaperTitle] = usePaperTitle();\n  useEffect(() => {\n    if (!walletConnected) {\n      setPaperTitle(\"Resume Transaction\");\n    }\n  }, [walletConnected, setPaperTitle]);\n\n  useEffect(() => {\n    if (txState?.reloadTx) {\n      setTx(parsedTx as GatewaySession);\n      setReloading(true);\n      history.replace({ ...location, state: undefined });\n      setTimeout(() => {\n        setReloading(false);\n      }, 1000);\n    }\n  }, [history, location, txState, parsedTx]);\n\n  const handlePreviousStepClick = useCallback(() => {\n    history.goBack();\n  }, [history]);\n  const sourceChain = parsedTx?.sourceChain;\n\n  const {\n    menuOpened,\n    handleMenuOpen,\n    handleMenuClose,\n    handleDeleteTx,\n  } = useTransactionDeletion(tx);\n\n  const {\n    modalOpened,\n    handleModalOpen,\n    handleModalClose,\n    tooltipOpened,\n    handleTooltipClose,\n  } = useBrowserNotificationsConfirmation();\n\n  const { enabled, handleEnable } = useBrowserNotifications(handleModalClose);\n\n  useEffect(() => {\n    if (sourceChain) {\n      const bridgeChainConfig = getChainConfigByRentxName(sourceChain);\n      dispatch(setChain(bridgeChainConfig.symbol));\n    }\n  }, [dispatch, sourceChain]);\n\n  const handleWalletPickerOpen = useCallback(() => {\n    dispatch(setWalletPickerOpened(true));\n  }, [dispatch]);\n\n  const {\n    burnCurrencyConfig,\n    burnChainConfig,\n    releaseCurrencyConfig,\n  } = getBurnAndReleaseParams(tx);\n  \n\n  return (\n    <>\n      <PaperHeader>\n        <PaperNav>\n          {txState?.newTx && (\n            <IconButton onClick={handlePreviousStepClick}>\n              <BackArrowIcon />\n            </IconButton>\n          )}\n        </PaperNav>\n        <PaperTitle>{paperTitle}</PaperTitle>\n        <PaperActions>\n          <BrowserNotificationButton\n            pressed={enabled}\n            onClick={handleModalOpen}\n            tooltipOpened={tooltipOpened}\n            onTooltipClose={handleTooltipClose}\n          />\n          <ToggleIconButton\n            variant=\"settings\"\n            onClick={handleMenuOpen}\n            pressed={menuOpened}\n          />\n        </PaperActions>\n      </PaperHeader>\n      <PaperContent bottomPadding>\n        {reloading && <ProgressStatus processing />}\n        {walletConnected && !reloading && <ReleaseTransactionStatus tx={tx} />}\n        {!walletConnected && (\n          <>\n            <PaperSpacerWrapper>\n              <CenteringSpacedBox>\n                <WalletConnectionProgress />\n              </CenteringSpacedBox>\n            </PaperSpacerWrapper>\n            <ActionButton onClick={handleWalletPickerOpen}>\n              Connect Wallet\n            </ActionButton>\n          </>\n        )}\n      </PaperContent>\n      {walletConnected && (\n        <>\n          <Divider />\n          <PaperContent darker topPadding bottomPadding>\n            <LabelWithValue\n              label=\"Releasing\"\n              value={\n                <NumberFormatText\n                  value={0}\n                  spacedSuffix={burnCurrencyConfig.short}\n                />\n              }\n              valueEquivalent={\n                <NumberFormatText\n                  value={0}\n                  prefix=\"$\"\n                  decimalScale={2}\n                  fixedDecimalScale\n                />\n              }\n            />\n            <LabelWithValue label=\"From\" value={burnChainConfig.full} />\n            <LabelWithValue\n              label=\"To\"\n              value={\n                <MiddleEllipsisText hoverable>\n                  {tx.destAddress}\n                </MiddleEllipsisText>\n              }\n            />\n            <SpacedDivider />\n            <TransactionFees\n              chain={chain}\n              currency={burnCurrencyConfig.symbol}\n              type={TxType.BURN}\n            />\n            <Debug it={{ parsedTx, txState: txState }} />\n          </PaperContent>\n        </>\n      )}\n      <BrowserNotificationsDrawer\n        open={modalOpened}\n        onClose={handleModalClose}\n        onEnable={handleEnable}\n      />\n      <TransactionMenu\n        tx={tx}\n        open={menuOpened}\n        onClose={handleMenuClose}\n        onDeleteTx={handleDeleteTx}\n      />\n      <Debug it={{ tooltipOpened, parsedTx, txState: txState }} />\n    </>\n  );\n};\n\ntype ReleaseTransactionStatusProps = {\n  tx: GatewaySession;\n};\n\nconst ReleaseTransactionStatus: FunctionComponent<ReleaseTransactionStatusProps> = ({\n  tx,\n}) => {\n  const history = useHistory();\n  const location = useLocation();\n  const [current, send, service] = useBurnMachine(tx);\n  useEffect(\n    () => () => {\n      console.info(\"stopping tx machine\");\n      service.stop();\n    },\n    [service]\n  );\n\n  const [submitting, setSubmitting] = useState(false);\n  const [timeoutError, setTimeoutError] = useState(false);\n  const handleSubmit = useCallback(() => {\n    setSubmitting(true);\n    send({ type: \"SUBMIT\" });\n  }, [send]);\n  const handleReload = useCallback(() => {\n    history.replace({\n      ...location,\n      state: {\n        txState: {\n          reloadTx: true,\n        },\n      },\n    });\n  }, [history, location]);\n\n  useEffect(() => {\n    if (current.value === \"srcSettling\") {\n      history.replace({\n        pathname: paths.RELEASE_TRANSACTION,\n        search: \"?\" + createTxQueryString(current.context.tx),\n      });\n    }\n  }, [history, current.value, current.context.tx]);\n\n  // const forceState = \"errorReleasing\";\n  const state = current.value as keyof BurnMachineSchema[\"states\"];\n  console.debug(tx.id, state);\n  switch (state) {\n    // switch (forceState as keyof BurnMachineSchema[\"states\"]) {\n    case \"created\":\n      return (\n        <ReleaseProgressStatus\n          tx={tx}\n          onSubmit={handleSubmit}\n          submitting={submitting}\n          submittingError={timeoutError}\n          onReload={handleReload}\n        />\n      );\n    case \"errorBurning\":\n    case \"errorReleasing\":\n    case \"srcSettling\":\n      return (\n        <ReleaseProgressStatus\n          tx={current.context.tx}\n          pending\n          generalError={state !== \"srcSettling\"}\n          onReload={handleReload}\n        />\n      );\n    case \"srcConfirmed\":\n      return <ProgressStatus reason=\"Submitting to RenVM\" />;\n    case \"accepted\":\n      return <ProgressStatus reason=\"Releasing from RenVM\" />;\n    case \"destInitiated\":\n      return <ReleaseCompletedStatus tx={current.context.tx} />;\n    default:\n      return <ProgressStatus />;\n  }\n};\n","import React, { FunctionComponent, useCallback, useState } from 'react'\nimport { RouteComponentProps } from 'react-router'\nimport { Route } from 'react-router-dom'\nimport { paths } from '../../pages/routes'\nimport { usePageTitle } from '../../providers/TitleProviders'\nimport { TransactionTypeTabs } from '../transactions/components/TransactionTypeTabs'\nimport { TxConfigurationStep } from '../transactions/transactionsUtils'\nimport { ReleaseFeesStep } from './steps/ReleaseFeesStep'\nimport { ReleaseInitialStep } from './steps/ReleaseInitialStep'\nimport { ReleaseProcessStep } from './steps/ReleaseProcessStep'\n\nconst ReleaseConfiguration: FunctionComponent<RouteComponentProps> = () => {\n  const [step, setStep] = useState(TxConfigurationStep.INITIAL);\n  const onInitialNext = useCallback(() => {\n    setStep(TxConfigurationStep.FEES);\n  }, []);\n  const onFeesPrev = useCallback(() => {\n    setStep(TxConfigurationStep.INITIAL);\n  }, []);\n\n  return (\n    <>\n      {step === TxConfigurationStep.INITIAL && (\n        <>\n          <TransactionTypeTabs />\n          <ReleaseInitialStep onNext={onInitialNext} />\n        </>\n      )}\n      {step === TxConfigurationStep.FEES && (\n        <ReleaseFeesStep onPrev={onFeesPrev} />\n      )}\n    </>\n  );\n};\n\nexport const ReleaseFlow: FunctionComponent = () => {\n  usePageTitle(\"Releasing\");\n  return (\n    <>\n      <Route exact path={paths.RELEASE} component={ReleaseConfiguration} />\n      <Route\n        exact\n        path={paths.RELEASE_TRANSACTION}\n        component={ReleaseProcessStep}\n      />\n    </>\n  );\n};\n","import { RenNetwork } from \"@renproject/interfaces\";\nimport queryString from \"query-string\";\nimport { useEffect } from \"react\";\nimport { useDispatch } from \"react-redux\";\nimport { useLocation } from \"react-router-dom\";\nimport { setRenNetwork } from \"./networkSlice\";\n\nexport const supportedParamNetworks = [\n  RenNetwork.Mainnet,\n  RenNetwork.Testnet,\n  RenNetwork.TestnetVDot3,\n  RenNetwork.MainnetVDot3,\n];\n\nexport const useSetNetworkFromParam = () => {\n  const location = useLocation();\n  const dispatch = useDispatch();\n  const parsed = queryString.parse(location.search);\n\n  useEffect(() => {\n    const network = parsed.network as RenNetwork;\n    if (network) {\n      if (supportedParamNetworks.indexOf(network) > -1)\n        dispatch(setRenNetwork(parsed.network as RenNetwork));\n    }\n  }, [dispatch, parsed.network]);\n};\n","import queryString from \"query-string\";\n\nimport { env } from \"./environmentVariables\";\n\nexport const featureFlags = {\n  enableBSCMetamask:\n    env.BSC_MM_ENABLED ||\n    queryString.parse(window.location.search).bscMetamaskEnabled,\n  enableMEWConnect:\n    env.MEWCONNECT_ENABLED ||\n    queryString.parse(window.location.search).MEWConnectEnabled,\n  enableWalletConnect:\n    env.WALLETCONNECT_ENABLED ||\n    queryString.parse(window.location.search).walletConnectEnabled,\n};\n","import { RenNetwork } from \"@renproject/interfaces\";\nimport { BinanceSmartChainInjectedConnector } from \"@renproject/multiwallet-binancesmartchain-injected-connector\";\nimport { EthereumInjectedConnector } from \"@renproject/multiwallet-ethereum-injected-connector\";\nimport { EthereumMEWConnectConnector } from \"@renproject/multiwallet-ethereum-mewconnect-connector\";\nimport { EthereumWalletConnectConnector } from \"@renproject/multiwallet-ethereum-walletconnect-connector\";\nimport { MultiwalletProvider as RenMultiwalletProvider } from \"@renproject/multiwallet-ui\";\nimport React, { FunctionComponent } from \"react\";\nimport {\n  BinanceConnectorInfo,\n} from \"../../components/wallet/WalletHelpers\";\nimport { env } from \"../../constants/environmentVariables\";\nimport { featureFlags } from \"../../constants/featureFlags\";\nimport { RenChain } from \"../../utils/assetConfigs\";\n\nconst networkMapping: Record<number, RenNetwork[]> = {\n  1: [RenNetwork.Mainnet],\n  42: [RenNetwork.Testnet, RenNetwork.TestnetVDot3],\n};\n\nexport const renNetworkToEthNetwork = (id: RenNetwork): number | undefined => {\n  const entry = Object.entries(networkMapping).find(([_, x]) => x.includes(id));\n  if (!entry) return entry;\n  return parseInt(entry[0]);\n};\n\nexport const ethNetworkToRenNetwork = (id: string | number): RenNetwork => {\n  const index = Number(id);\n  return networkMapping[index]?.[0] || RenNetwork.Testnet;\n};\n\nexport const walletPickerModalConfig = (targetEthChainId: number) => ({\n  chains: {\n    [RenChain.ethereum]: [\n      {\n        name: \"Metamask\",\n        logo: \"https://avatars1.githubusercontent.com/u/11744586?s=60&v=4s\",\n        connector: new EthereumInjectedConnector({\n          debug: env.DEV,\n          networkIdMapper: ethNetworkToRenNetwork,\n        }),\n      },\n      ...(featureFlags.enableMEWConnect\n        ? [\n            {\n              name: \"MEW\",\n              logo:\n                \"https://avatars1.githubusercontent.com/u/24321658?s=60&v=4s\",\n              connector: new EthereumMEWConnectConnector({\n                debug: env.DEV,\n                rpc: {\n                  42: `wss://kovan.infura.io/ws/v3/${env.INFURA_ID}`,\n                  1: `wss://mainnet.infura.io/ws/v3/${env.INFURA_ID}`,\n                },\n                chainId: targetEthChainId,\n              }),\n            },\n          ]\n        : []),\n      ...(featureFlags.enableWalletConnect\n        ? [\n            {\n              name: \"WalletConnect\",\n              logo:\n                \"https://avatars0.githubusercontent.com/u/37784886?s=60&v=4\",\n              connector: new EthereumWalletConnectConnector({\n                rpc: {\n                  42: `https://kovan.infura.io/v3/${env.INFURA_ID}`,\n                  1: `wss://mainnet.infura.io/ws/v3/${env.INFURA_ID}`,\n                },\n                qrcode: true,\n                debug: true,\n              }),\n            },\n          ]\n        : []),\n    ],\n    [RenChain.binanceSmartChain]: [\n      ...(featureFlags.enableBSCMetamask\n        ? [\n            {\n              name: \"Metamask\",\n              logo:\n                \"https://avatars2.githubusercontent.com/u/45615063?s=60&v=4\",\n              connector: (() => {\n                const connector = new BinanceSmartChainInjectedConnector({\n                  debug: true,\n                });\n                connector.getProvider = () => (window as any).ethereum;\n                return connector;\n              })(),\n            },\n          ]\n        : []),\n    ],\n  },\n});\n\nexport const MultiwalletProvider: FunctionComponent = ({ children }) => {\n  return <RenMultiwalletProvider>{children}</RenMultiwalletProvider>;\n};\n","import {\n  Button,\n  Divider,\n  Drawer,\n  ListItem,\n  Menu,\n  Box,\n  MenuItem,\n  Typography,\n  useTheme,\n} from \"@material-ui/core\";\nimport IconButton from \"@material-ui/core/IconButton\";\nimport CloseIcon from \"@material-ui/icons/Close\";\nimport MenuIcon from \"@material-ui/icons/Menu\";\nimport {\n  MultiwalletProvider,\n  useMultiwallet,\n  WalletPickerModal,\n  WalletPickerProps,\n} from \"@renproject/multiwallet-ui\";\nimport classNames from \"classnames\";\nimport React, {\n  FunctionComponent,\n  useCallback,\n  useEffect,\n  useMemo,\n  useState,\n} from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { useDebounce, useWindowSize } from \"react-use\";\nimport { env } from \"../constants/environmentVariables\";\nimport { $renNetwork } from \"../features/network/networkSlice\";\nimport { useSetNetworkFromParam } from \"../features/network/networkUtils\";\nimport { TransactionHistory } from \"../features/transactions/TransactionHistory\";\nimport {\n  $transactionsData,\n  $transactionsNeedsAction,\n  setTxHistoryOpened,\n} from \"../features/transactions/transactionsSlice\";\nimport { useSubNetworkName } from \"../features/ui/uiHooks\";\n\nimport {\n  useAuthentication,\n  useSelectedChainWallet,\n  useSyncMultiwalletNetwork,\n  useWallet,\n  useWeb3Signatures,\n} from \"../features/wallet/walletHooks\";\nimport { copyToClipboard } from \"../utils/copyToClipboard\";\n\nimport {\n  $authRequired,\n  $multiwalletChain,\n  $walletPickerOpened,\n  setWalletPickerOpened,\n} from \"../features/wallet/walletSlice\";\nimport {\n  renNetworkToEthNetwork,\n  walletPickerModalConfig,\n} from \"../providers/multiwallet/Multiwallet\";\nimport { TransactionHistoryMenuIconButton } from \"../components/buttons/Buttons\";\nimport { Debug } from \"../components/utils/Debug\";\nimport {\n  useWalletPickerStyles,\n  WalletChainLabel,\n  WalletConnectingInfo,\n  WalletConnectionStatusButton,\n  WalletEntryButton,\n  WalletWrongNetworkInfo,\n} from \"../components/wallet/WalletHelpers\";\nimport { Footer } from \"../components/layout/Footer\";\nimport {\n  MobileLayout,\n  MainLayoutVariantProps,\n  useMobileLayoutStyles,\n} from \"../components/layout/MobileLayout\";\nimport { BridgeLogoIcon } from \"../components/icons/RenIcons\";\nimport { Link } from \"react-router-dom\";\n\nexport const MainLayout: FunctionComponent<MainLayoutVariantProps> = ({\n  children,\n}) => {\n  const styles = useMobileLayoutStyles();\n  const dispatch = useDispatch();\n  useSetNetworkFromParam();\n  useSyncMultiwalletNetwork();\n  useWeb3Signatures();\n  const {\n    authenticate,\n    isAuthenticated,\n    isAuthenticating,\n  } = useAuthentication();\n  const {\n    status,\n    account,\n    walletConnected,\n    deactivateConnector,\n    symbol,\n  } = useSelectedChainWallet();\n  const { txHistoryOpened } = useSelector($transactionsData);\n  const txsNeedsAction = useSelector($transactionsNeedsAction);\n\n  const authRequired = useSelector($authRequired);\n  const [authWarningOpened, setAuthWarningOpened] = useState(false);\n  useDebounce(\n    () => {\n      const shouldAuthWarningOpened =\n        walletConnected &&\n        !isAuthenticated &&\n        !isAuthenticating &&\n        (authRequired || txHistoryOpened);\n\n      setAuthWarningOpened(shouldAuthWarningOpened);\n    },\n    1000, // the authentication process takes a few seconds\n    [walletConnected, isAuthenticated, authRequired, txHistoryOpened]\n  );\n  // const authWarningOpened =\n  //   walletConnected && !isAuthenticated && (authRequired || txHistoryOpened);\n\n  const [mobileMenuOpen, setMobileMenuOpen] = useState(true);\n  const handleMobileMenuClose = useCallback(() => {\n    setMobileMenuOpen(false);\n  }, []);\n  const handleMobileMenuOpen = useCallback(() => {\n    setMobileMenuOpen(true);\n  }, []);\n  const { width } = useWindowSize();\n  const theme = useTheme();\n  useEffect(() => {\n    if (width > theme.breakpoints.values[\"sm\"]) {\n      setMobileMenuOpen(false);\n    }\n  }, [width, theme.breakpoints]);\n\n  const handleTxHistoryToggle = useCallback(() => {\n    dispatch(setTxHistoryOpened(!txHistoryOpened));\n  }, [dispatch, txHistoryOpened]);\n\n  const multiwalletChain = useSelector($multiwalletChain);\n  const walletPickerOpen = useSelector($walletPickerOpened);\n  const renNetwork = useSelector($renNetwork);\n  const pickerClasses = useWalletPickerStyles();\n  const [\n    walletMenuAnchor,\n    setWalletMenuAnchor,\n  ] = React.useState<null | HTMLElement>(null);\n  const handleWalletPickerClose = useCallback(() => {\n    dispatch(setWalletPickerOpened(false));\n  }, [dispatch]);\n  const handleWalletMenuClose = useCallback(() => {\n    setWalletMenuAnchor(null);\n  }, []);\n\n  const handleWalletButtonClick = useCallback(\n    (event: React.MouseEvent<HTMLElement>) => {\n      if (walletConnected) {\n        setWalletMenuAnchor(event.currentTarget);\n      } else {\n        dispatch(setWalletPickerOpened(true));\n      }\n    },\n    [dispatch, walletConnected]\n  );\n\n  const handleDisconnectWallet = useCallback(() => {\n    deactivateConnector();\n    handleWalletMenuClose();\n  }, [deactivateConnector, handleWalletMenuClose]);\n  const walletPickerOptions = useMemo(() => {\n    const options: WalletPickerProps<any, any> = {\n      targetNetwork: renNetwork,\n      chain: multiwalletChain,\n      onClose: handleWalletPickerClose,\n      pickerClasses,\n      // DefaultInfo: DebugComponentProps,\n      ConnectingInfo: WalletConnectingInfo,\n      WrongNetworkInfo: WalletWrongNetworkInfo,\n      WalletEntryButton,\n      WalletChainLabel,\n      config: walletPickerModalConfig(renNetworkToEthNetwork(renNetwork) || 1),\n    };\n    return options;\n  }, [multiwalletChain, handleWalletPickerClose, pickerClasses, renNetwork]);\n\n  const debugWallet = useWallet(multiwalletChain); //remove\n  const debugMultiwallet = useMultiwallet(); //remove\n  const debugNetworkName = useSubNetworkName();\n\n  const drawerId = \"main-menu-mobile\";\n  const showTxIndicator = walletConnected && txsNeedsAction;\n  const [copied, setCopied] = useState(false);\n  const handleClick = useCallback(() => {\n    if (!copied) {\n      copyToClipboard(\"0x361C60b7c2828fCAb80988d00D1D542c83387b50\");\n      setCopied(true);\n      setTimeout(() => {\n        setCopied(false);\n      }, 2000);\n    }\n  }, [copied]);\n\n  const handleClick2 = useCallback(() => {\n    \n  }, []);\n\n  const ToolbarMenu = (\n    <>\n      <div className={styles.desktopMenu}>\n        <Button variant=\"outlined\" onClick={()=> window.open(\"https://bscscan.com/address/0x3961a7B7d2CeB33ad5740624901f6264023C9aC0#code\", \"_blank\")} color=\"secondary\" className={styles.rightMargin}>\n          <span>{\"Smart Contract\"}</span>\n        </Button>\n        <Button variant=\"outlined\" onClick={handleClick} color=\"secondary\" className={styles.rightMargin}>\n          <span>{!copied ? \"BSC-DFI Token Address\" : \"Copied to Clipboard\"}</span>\n        </Button>\n        <WalletConnectionStatusButton\n          onClick={handleWalletButtonClick}\n          hoisted={txHistoryOpened}\n          status={status}\n          account={account}\n          wallet={symbol}\n        />\n        <WalletPickerModal\n          open={walletPickerOpen}\n          options={walletPickerOptions}\n        />\n      </div>\n      <div className={styles.mobileMenu}>\n        <IconButton\n          aria-label=\"show more\"\n          aria-controls={drawerId}\n          aria-haspopup=\"true\"\n          onClick={handleMobileMenuOpen}\n          color=\"inherit\"\n        >\n          <MenuIcon />\n        </IconButton>\n      </div>\n    </>\n  );\n  const DrawerMenu = (\n    <Drawer\n      anchor=\"right\"\n      id={drawerId}\n      keepMounted\n      open={mobileMenuOpen}\n      onClose={handleMobileMenuClose}\n      PaperProps={{ className: styles.drawerPaper }}\n    >\n      <div className={styles.drawerHeader}>\n        <IconButton\n          aria-label=\"close\"\n          className={styles.drawerClose}\n          onClick={handleMobileMenuClose}\n        >\n          <CloseIcon />\n        </IconButton>\n      </div>\n      <Divider />\n      <ListItem\n        divider\n        className={styles.drawerListItem}\n        button\n        onClick={handleWalletButtonClick}\n      >\n        <WalletConnectionStatusButton\n          className={styles.mobileMenuButton}\n          mobile\n          status={status}\n          account={account}\n          wallet={symbol}\n        />\n      </ListItem>\n\n      <ListItem\n        className={classNames(\n          styles.drawerListItem,\n          styles.drawerFooterListItem\n        )}\n      >\n        <Footer mobile />\n      </ListItem>\n    </Drawer>\n  );\n\n  const WalletLogo = (\n    <Link to=\"/\" style={{ color: 'black' }}><Box display=\"inline-block\" p={3}>\n          <BridgeLogoIcon width=\"auto\" height=\"auto\"/>\n    </Box></Link>\n  );\n\n  const WalletMenu = (\n    <Menu\n      id=\"wallet-menu\"\n      getContentAnchorEl={null}\n      anchorEl={walletMenuAnchor}\n      keepMounted\n      open={Boolean(walletMenuAnchor)}\n      onClose={handleWalletMenuClose}\n      anchorOrigin={{ vertical: \"bottom\", horizontal: \"left\" }}\n      transformOrigin={{ vertical: \"top\", horizontal: \"left\" }}\n    >\n      <MenuItem onClick={handleDisconnectWallet}>\n        <Typography color=\"error\">Disconnect wallet</Typography>\n      </MenuItem>\n    </Menu>\n  );\n\n  return (\n    <MobileLayout\n      ToolbarMenu={ToolbarMenu}\n      DrawerMenu={DrawerMenu}\n      WalletMenu={WalletMenu}\n      Logo={WalletLogo}\n    >\n      {children}\n      <Debug\n        it={{\n          isAuthenticated,\n          debugNetworkName,\n          debugWallet,\n          debugMultiwallet,\n          env,\n        }}\n      />\n    </MobileLayout>\n  );\n};\n\nexport const ConnectedMainLayout: FunctionComponent = ({ children }) => (\n  <MultiwalletProvider>\n    <MainLayout>{children}</MainLayout>\n  </MultiwalletProvider>\n);\n","import React, { FunctionComponent } from 'react'\nimport { useSelector } from 'react-redux'\nimport { RouteComponentProps } from 'react-router'\nimport { Route } from 'react-router-dom'\nimport { BridgePaperWrapper, BridgePurePaper, } from '../components/layout/Paper'\nimport { storageKeys } from '../constants/constants'\nimport { MintFlow } from '../features/mint/MintFlow'\nimport { ReleaseFlow } from '../features/release/ReleaseFlow'\nimport { $ui } from '../features/ui/uiSlice'\nimport { PaperTitleProvider } from '../providers/TitleProviders'\nimport { ConnectedMainLayout } from './MainLayout'\nimport { paths } from './routes'\n\nconst MainPage: FunctionComponent<RouteComponentProps> = ({\n  history,\n  location,\n}) => {\n  if (!localStorage.getItem(storageKeys.TERMS_AGREED)) {\n    history.replace(paths.WELCOME);\n  }\n  if (location.pathname === \"/\") {\n    history.replace(paths.WELCOME);\n  }\n  //useExchangeRates();\n  //useGasPrices(); TODODO\n  const { paperShaking } = useSelector($ui);\n  return (\n    <>\n      <ConnectedMainLayout>\n        <PaperTitleProvider>\n          <BridgePaperWrapper>\n            <BridgePurePaper shaking={paperShaking}>\n              <Route path={paths.MINT} component={MintFlow} />\n              <Route path={paths.RELEASE} component={ReleaseFlow} />\n            </BridgePurePaper>\n          </BridgePaperWrapper>\n        </PaperTitleProvider>\n      </ConnectedMainLayout>\n    </>\n  );\n};\n\nexport default MainPage;\n"],"sourceRoot":""}