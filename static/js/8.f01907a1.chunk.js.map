{"version":3,"sources":["services/bridge.ts","components/layout/Paper.tsx","features/transactions/components/TransactionTypeTabs.tsx","services/database/firebase/firebaseUtils.ts","services/database/firebase/firebase.ts","components/utils/types.ts","services/database/database.ts","utils/strings.ts","services/wallets/bsc.ts","features/release/releaseAddressValidator.ts","features/wallet/walletHooks.ts","features/transactions/transactionsHooks.ts","components/inputs/InputHelpers.tsx","components/utils/Debug.tsx","features/fees/feesHooks.ts","utils/formatters.ts","components/formatting/NumberFormatText.tsx","components/modals/BridgeModal.tsx","features/transactions/components/TransactionsHelpers.tsx","features/mint/components/MintHelpers.tsx","features/transactions/components/TransactionFees.tsx","features/ui/uiHooks.ts","features/mint/steps/MintFeesStep.tsx","features/wallet/walletUtils.ts","components/dropdowns/AssetDropdown.tsx","features/mint/steps/MintInitialStep.tsx","components/wallet/WalletHelpers.tsx","features/notifications/notificationsUtils.ts","features/mint/components/MintStatuses.tsx","features/mint/components/MultipleDepositsHelpers.tsx","features/mint/steps/MintProcessStep.tsx","features/mint/mintHooks.ts","features/mint/MintFlow.tsx","features/release/components/ReleaseStatuses.tsx","features/release/components/ReleaseHelpers.tsx","features/release/steps/ReleaseFeesStep.tsx","components/inputs/OutlinedTextField.tsx","features/release/steps/ReleaseInitialStep.tsx","features/notifications/components/NotificationsHelpers.tsx","features/transactions/components/TransactionMenu.tsx","features/release/releaseHooks.ts","features/release/steps/ReleaseProcessStep.tsx","features/release/ReleaseFlow.tsx","features/network/networkUtils.ts","constants/featureFlags.ts","providers/multiwallet/Multiwallet.tsx","pages/MainLayout.tsx","pages/MainPage.tsx"],"names":["defichain","bip32","public","private","messagePrefix","pubKeyHash","scriptHash","wif","strToSatoshi","val","sts","getTransactionN","address","txid","Promise","resolve","reject","a","getTxOutsWhale","objTx","console","log","data","length","forEach","element","scriptPubKey","script","type","recoveredAddress","hex","bitcoin","fromOutputScript","Buffer","from","toLowerCase","vt","n","satoshi","value","buildUrl","destChain","env","ETHEREUM_BACKEND_ENDPOINT","BSC_BACKEND_ENDPOINT","getDepositAddress","userAddress","url","settings","method","fetch","then","res","json","getDeposits","getKeySignatures","getLogs","useBridgePaperStyles","makeStyles","theme","root","maxWidth","margin","position","overflow","BridgePurePaper","shaking","className","props","classes","shakingStyles","useShakingStyles","resolvedClassName","classNames","Paper","BridgePaperWrapper","styled","marginTop","SMALL_PADDING","getPadding","variant","usePaperContentStyles","paddingLeft","paddingVariant","paddingRight","top","paddingTop","bottom","paddingBottom","darker","backgroundColor","customColors","whiteDarker","PaperContent","topPadding","bottomPadding","children","styles","PaperHeader","display","justifyContent","alignItems","PaperNav","justifySelf","minWidth","PaperActions","marginLeft","marginRight","PaperTitle","textAlign","width","useSpacedContentStyles","minHeight","rootSmaller","SpacedPaperContent","smaller","rest","TransactionTypeTabs","history","useHistory","path","useRouteMatch","onTabChange","useCallback","event","newPath","push","Tabs","onChange","indicatorColor","Tab","label","paths","MINT","RELEASE","require","createOrUpdateProfileData","db","uid","doc","collection","get","docData","exists","update","updated","firebase","firestore","Timestamp","fromDate","Date","now","set","signatures","error","signInOrRegister","id","signature","token","functions","httpsCallable","signed","account","Error","auth","signInWithCustomToken","user","getFirebaseUser","currentUser","signOut","rawSignature","FIREBASE_KEY","warn","initializeApp","apiKey","authDomain","window","location","hostname","projectId","FIREBASE_PROJECT_ID","WalletStatus","addTx","tx","localWeb3Address","fsSignature","timestamps","dbTx","created","walletSignature","createdSeconds","seconds","JSON","stringify","catch","e","updateTx","deleteTx","deleted","getTx","parse","getTxs","where","fsDataSnapshot","fsTransactions","empty","getUser","this","trimAddress","chars","start","slice","end","split","Network","AddressType","useWallet","chain","useMultiwallet","enabledChains","targetNetwork","activateConnector","setTargetNetwork","status","provider","symbol","isMetaMask","BridgeWallet","METAMASKW","chainId","indexOf","BINANCESMARTW","isMewConnect","isMEWConnect","MEWCONNECTW","UNKNOWNW","resolveWallet","deactivateConnector","connector","deactivate","walletConnected","CONNECTED","useSelectedChainWallet","multiwalletChain","useSelector","$multiwalletChain","ABI","useWeb3","useMemo","Web3","sendRedeemTxHook","web3","targetAddress","amount","bridge","r","s","v","currentProvider","connection","myContract","eth","Contract","SS","ETH_CONTRACT_ADDRESS","BSC_CONTRACT_ADDRESS","padStart","methods","mintToken","send","on","addBinanceChainHook","request","params","chainName","nativeCurrency","name","decimals","rpcUrls","blockExplorerUrls","err","added","addEthereumChainHook","sendBurnTxHook","burnToken","toString","useRedeem","dispatch","useDispatch","getSignatures","toUpperCase","result","code","message","useToken","getToken","sendAsync","options","ETH_TOKEN_ADDRESS","BSC_TOKEN_ADDRESS","image","addTokenHook","useAddBsc","chainname","updateBsc","useSignatures","debug","useAuthRequired","authRequired","useEffect","setAuthRequired","useRenNetworkTracker","currency","renChain","renNetwork","$renNetwork","networkMapping","getCurrencyConfig","networkMappings","newNetwork","isTestnetNetwork","testnet","isMainnetNetwork","mainnet","setRenNetwork","useSetCurrentTxId","currentId","$currentTxId","setCurrentTxId","CheckboxWrapper","useStyles","background","wrapper","height","wrapperEnabled","off","DEV","DebugWrapper","enabled","useState","show","setShow","toggleShow","onClick","getCircularReplacer","seen","WeakSet","key","has","add","Debug","it","force","disable","target","noClick","stopPropagation","DebugComponentProps","useFetchFees","txType","mint","burn","lock","release","fees","pending","numberFormatOptions","thousandSeparator","allowLeadingZeros","allowNegative","allowedDecimalSeparators","NumberFormatText","spacedSuffix","suffix","resolvedSuffix","displayType","useBridgeModalTitleStyles","dialogTitle","borderBottom","palette","divider","titleWrapper","flexGrow","title","customContentWrapper","closeButtonWrapper","closeButton","color","grey","prevButtonWrapper","prevButton","BridgeModalTitle","onClose","onPrev","disableTypography","IconButton","aria-label","fontSize","Typography","BridgeModal","open","Dialog","useNestedDrawerStyles","backdrop","right","left","zIndex","positioner","paper","flexDirection","NestedDrawerWrapper","NestedDrawerContent","NestedDrawerActions","NestedDrawer","Backdrop","ProgressStatus","marginBottom","reason","processing","useTheme","usePaperTitle","setTitle","primary","main","ErrorIconWrapper","lineHeight","textLight","ErrorDialog","actionText","onAction","align","gutterBottom","component","SubmitErrorDialog","GeneralErrorDialog","external","href","links","BUGS_LOG","underline","WarningDialog","mainActionText","onMainAction","mainActionDisabled","alternativeActionText","onAlternativeAction","alternativeActionDisabled","showMainAction","disabled","WrongAddressWarningDialog","addressExplorerLink","mintTooltips","DepositWrapper","MultipleDepositsMessage","TransactionFees","hideButton","targetChainConfig","getChainConfig","getTransactionFees","renVMFee","networkFee","renVMFeeAmount","sourceCurrency","TxType","toReleasedCurrency","sourceCurrencyConfig","sourceCurrencyChainConfig","sourceChain","tooltips","getFeeTooltips","mintFee","releaseFee","fromGwei","labelTooltip","renVmFee","decimalScale","full","sourceChainMinerFee","short","renCurrencyChainFee","hoverable","useSubNetworkName","flow","useLocation","pathname","useLocationFlow","$chain","mintCurrency","$mintCurrency","releaseCurrency","$releaseCurrency","BridgeChain","ETHC","renCurrency","toMintedCurrency","ethTestnet","EthTestnet","KOVAN","MintFeesStep","chainNativeCurrencyConfig","mintingInitialized","setMintingInitialized","$mint","$wallet","network","currentSessionCount","$currentSessionCount","destinationChainConfig","GreyIcon","destinationChainNativeCurrencyConfig","mintDynamicTooltips","acknowledge","mintedCurrency","ackChecked","setAckChecked","touched","setTouched","showAckError","handleAckCheckboxChange","checked","shake","timeout","setPaperShaking","setTimeout","useShakePaper","createMintTransaction","destAddress","mintedCurrencyChain","dayIndex","txValid","preValidateMintTransaction","canInitializeMinting","handleConfirm","setWalletPickerOpened","onMintTxCreated","destination","jsonObj","gatewayAddress","addTransaction","MINT_TRANSACTION","search","createTxQueryString","state","txState","newTx","creatingMintTx","setCreatingMintTx","finally","strvalue","Divider","FormControl","FormControlLabel","control","Checkbox","FormLabel","htmlFor","TooltipWithIcon","useFetchBalances","currencySymbols","bridgeChain","bridgeChainConfig","Chain","mintChainClassMap","rentxName","resetBalances","fetchAssetBalance","currencyConfig","chainMapping","isSupportedByCurrentNetwork","getBalance","balance","toNumber","useDebounce","currencySymbol","sourceCurrencySymbol","addOrUpdateBalance","getAssetBalance","balances","balanceEntry","find","entry","getOptions","mode","Object","values","chainsConfig","currenciesConfig","iconStyles","useCondensedSelectStyles","select","useAssetDropdownStyles","borderRadius","shape","border","grayLight","inputRoot","supplementalText","iconWrapper","listIcon","assetName","assetFullName","listSubheader","pointerEvents","listSubheaderLabel","AssetDropdown","available","condensed","condensedSelectClasses","availabilityFilter","option","includes","createAvailabilityFilter","valueRenderer","selected","getOptionBySymbol","Icon","EmptyCircleIcon","MainIcon","getAssetData","Box","Select","undefined","renderValue","displayEmpty","MenuProps","anchorOrigin","vertical","horizontal","getContentAnchorEl","ListSubheader","filter","map","MenuItem","AssetDropdownWrapper","MintInitialStep","onNext","recoverOpened","setRecoverOpened","recoverTxId","setRecoverTxId","recoverTarget","setRecoverTarget","recoverError","setRecoverError","recoverGood","setRecoverGood","recoverProcessing","setRecoverProcessing","setSignatures","nnn","setNnn","handleRecover","preventDefault","handleRecoverClose","handleCurrencyChange","setMintCurrency","handleChainChange","setChain","handleNextStep","handleRecoverFinal","siggy","handleRecoverNext","signmsg","blame","fail_reason","mintedCurrencySymbol","supportedLockCurrencies","supportedMintDestinationChains","DialogContent","mb","Alert","severity","mt","TextField","autoFocus","style","useWalletPickerStyles","body","padding","header","headerTitle","headerCloseIcon","button","chainTitle","textTransform","useWalletEntryButtonStyles","alignContent","icon","WalletEntryButton","logo","iconClassName","walletConfig","getWalletConfigByRentxName","Button","size","fullWidth","WalletChainLabel","chainConfig","getChainConfigByRentxName","WalletConnectingInfo","walletSymbol","getWalletConfig","labels","initialTitle","actionTitle","initialMessage","actionMessage","getLabels","useTimeout","passed","isPassed","skyBlueLight","useWalletConnectionProgressStyles","WalletConnectionProgress","redLighter","WalletWrongNetworkInfo","subNetworkName","networkName","getNetworkConfigByRentxName","updateEth","AddBscMetamask","ret","createIndicatorClass","createPulseAnimation","pulsingStyles","pulsingKeyframes","useWalletConnectionIndicatorStyles","success","info","warning","WalletConnectionIndicator","classNameProp","connected","wrongNetwork","WRONG_NETWORK","disconnected","DISCONNECTED","connecting","CONNECTING","useWalletConnectionStatusButtonStyles","common","white","borderColor","boxShadow","defaultShadow","hoisted","tooltip","indicator","indicatorMobile","WalletConnectionStatusButton","wallet","mobile","indicatorClassName","indicatorMobileClassName","accountClassName","hoistedClassName","getWalletConnectionLabel","trimmedAddress","buttonProps","useBrowserNotifications","onEnabled","Notification","permission","handleEnable","requestPermission","showBrowserNotification","onclick","MintDepositToStatus","getLockAndMintParams","lockCurrencyConfig","lockChainConfig","suggestedAmount","mintAddressLink","useSetPaperTitle","orangeLight","Grow","in","getPaymentLink","content","MintDepositConfirmationStatus","depositHash","lockTxHash","lockTxLink","lockTxAmount","lockConfirmations","lockTargetConfirmations","dep","lockProcessingTime","transactions","confirmations","vout","confirmed","targetConfirmations","link","MintDepositAcceptedStatus","onSubmit","onReload","submitting","submittingError","useSetActionRequired","mintChainConfig","notificationMessage","showNotification","useNotifications","useEffectOnce","skyBlue","DestinationPendingStatus","mintTxLink","mintTxHash","MintCompletedStatus","mintHash","mintCurrencyConfig","conversionTotal","handleReturn","resetMint","showNotifications","flexWrap","py","useBigNavButtonStyles","transition","cursor","dark","opacity","hidden","BigNavButton","direction","rootClassName","NavigatePrevIcon","NavigateNextIcon","ButtonBase","DepositPrevButton","DepositNextButton","MintProcessStep","useLocalStorage","rdtx","setRdtx","useTxParam","parsedTx","depositN","setDepositHash","setTx","usePageTitle","getTxPageTitle","paperTitle","setPaperTitle","handlePreviousStepClick","goBack","handleWalletPickerOpen","showTransactionStatus","replace","feeCurrency","getCurrencyConfigByRentxName","sourceAsset","interval","setInterval","txChange","changes","i","keys","clearInterval","updateHash","hash","MintTransactionStatus","setState","depositSourceHash","sortedDeposits","orderedHashes","deposit","total","initial","currentHash","setCurrentHash","currentIndex","nextHash","prevHash","handleNext","handlePrev","useDepositPagination","closeNotification","timeOut","setTimeOut","timeoutTimer","timeoutFunc","clearTimeout","good","submitSignRequest","submitToBridge","parseInt","activeDeposit","value_satoshi","persist","rdCopy","sigs","sigCopy","wrongAddressDialogOpened","setWrongAddressDialogOpened","handleCloseWrongAddressDialog","queryTx","parseTxQueryString","accountExplorerLink","getAddressExplorerLink","submitter","pagination","MintTransactionDepositStatus","MintConfiguration","TxConfigurationStep","INITIAL","step","setStep","onInitialNext","FEES","onFeesPrev","MintFlow","match","exact","ReleaseProgressStatus","generalError","getBurnAndReleaseParams","burnChainConfig","releaseCurrencyConfig","burnTxHash","burnTxLink","handleSubmit","buttonSubmitting","Boolean","ReleaseCompletedStatus","releaseChainConfig","releaseTxLink","releaseAddressLink","resetRelease","targetAmount","ReleaseShortcutCompletedStatus","sha256","payload","createHash","digest","addressTypes","p2pkh","p2sh","getAddressInfo","decoded","prefix","substr","bech32","decode","df","tb","bcrt","regtest","witnessVersion","words","fromWords","p2wpkh","p2tr","p2wsh","parseBech32","base58_to_binary","version","checksum","expectedChecksum","some","index","Number","addressType","validate","addressInfo","releaseTooltips","ReleaseFeesStep","releasingInitialized","setReleasingInitialized","releaseTxId","setReleaseTxId","ethconf","setEthconf","$release","BURN","getBurn","amount_bgint","BigInt","utils","toWei","useBurn","destinationCurrency","createReleaseTransaction","canInitializeReleasing","preValidateReleaseTransaction","targetCurrency","validateAddress","getter","Executed","Confirmations","input","OutlinedTextField","InputProps","notched","OutlinedTextFieldWrapper","BigOutlinedTextFieldWrapper","SmallOutlinedTextFieldWrapper","ReleaseInitialStep","supportedReleaseCurrencies","setReleaseCurrency","handleAddressChange","setReleaseAddress","handleAmountChange","setReleaseAmount","basicCondition","hasBalance","DefiTx","overflowWrap","supportedBurnChains","placeholder","BrowserNotificationsDrawer","onEnable","BrowserNotificationButton","pressed","onTooltipClose","tooltipOpened","ClickAwayListener","onClickAway","Tooltip","disableFocusListener","disableHoverListener","disableTouchListener","useTransactionMenuItemStyles","TransactionMenuItem","dense","ListItemIcon","useTransactionMenuStyles","modalTitle","titleIconWrapper","menuItems","transferId","TransactionMenu","onDeleteTx","onUpdateTx","handleClose","confirmOpen","setConfirmOpen","handleConfirmClose","handleDeleteWithConfirm","updateOpen","setUpdateOpen","handleUpdateClose","handleUpdateOpen","TxSettingsIcon","AddIcon","DeleteIcon","externalLinkAttributes","ConfirmTransactionDeletionDrawer","deleting","setDeleting","handleDeleteTx","startIcon","isValidInteger","isInteger","UpdateTransactionDrawer","setAmount","setVout","setHash","updating","setUpdating","valid","newValue","handleVoutChange","handleHashChange","handleUpdateTx","useReleaseTransactionPersistence","service","ReleaseProcessStep","reloading","setReloading","reloadTx","menuOpened","setMenuOpened","handleMenuClose","handleMenuOpen","removeTransaction","useTransactionDeletion","modalOpened","setModalOpened","setTooltipOpened","handleTooltipClose","handleModalOpen","handleModalClose","useBrowserNotificationsConfirmation","burnCurrencyConfig","valueEquivalent","fixedDecimalScale","ReleaseTransactionStatus","burnTransaction","cloneTx","providers","entries","reduce","c","machineHook","useMachine","burnMachine","context","sdk","getRenJs","fromChainMap","burnChainMap","toChainMap","releaseChainMap","autoSubmit","devTools","XSTATE_DEVTOOLS","useBurnMachine","current","stop","setSubmitting","timeoutError","handleReload","RELEASE_TRANSACTION","ReleaseConfiguration","ReleaseFlow","supportedParamNetworks","RenNetwork","Mainnet","Testnet","TestnetVDot3","MainnetVDot3","featureFlags","BSC_MM_ENABLED","queryString","bscMetamaskEnabled","MEWCONNECT_ENABLED","MEWConnectEnabled","WALLETCONNECT_ENABLED","walletConnectEnabled","1","42","renNetworkToEthNetwork","ethNetworkToRenNetwork","walletPickerModalConfig","targetEthChainId","chains","RenChain","ethereum","EthereumInjectedConnector","networkIdMapper","EthereumMEWConnectConnector","rpc","INFURA_ID","EthereumWalletConnectConnector","qrcode","binanceSmartChain","BinanceSmartChainInjectedConnector","getProvider","MainLayout","useMobileLayoutStyles","parsed","useSetNetworkFromParam","useSyncMultiwalletNetwork","useWeb3Signatures","$walletUser","isAuthenticating","$isAuthenticating","isAuthenticated","authenticate","useAuthentication","txHistoryOpened","$transactionsData","$transactionsNeedsAction","$authRequired","setAuthWarningOpened","mobileMenuOpen","setMobileMenuOpen","handleMobileMenuClose","handleMobileMenuOpen","useWindowSize","breakpoints","setTxHistoryOpened","walletPickerOpen","$walletPickerOpened","pickerClasses","React","walletMenuAnchor","setWalletMenuAnchor","handleWalletPickerClose","handleWalletMenuClose","handleWalletButtonClick","currentTarget","handleDisconnectWallet","walletPickerOptions","ConnectingInfo","WrongNetworkInfo","config","debugWallet","debugMultiwallet","debugNetworkName","drawerId","copied","setCopied","handleClick","copyToClipboard","ToolbarMenu","desktopMenu","rightMargin","mobileMenu","aria-controls","aria-haspopup","DrawerMenu","Drawer","anchor","keepMounted","PaperProps","drawerPaper","drawerHeader","drawerClose","ListItem","drawerListItem","mobileMenuButton","drawerFooterListItem","Footer","WalletLogo","to","p","WalletMenu","Menu","anchorEl","transformOrigin","MobileLayout","Logo","ConnectedMainLayout","MainPage","localStorage","getItem","storageKeys","TERMS_AGREED","WELCOME","paperShaking","$ui"],"mappings":"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","file":"static/js/8.f01907a1.chunk.js","sourcesContent":["import { env } from '../constants/environmentVariables'\r\nimport fetch from 'node-fetch';\r\nimport * as bitcoin from 'bitcoinjs-lib'\r\nimport * as sts from 'satoshi-bitcoin-ts'\r\nimport { VpnKeyTwoTone } from '@material-ui/icons';\r\nexport class Blame {\r\n        fail_reason?: string\r\n}\r\n\r\nexport class DepositMessage {\r\n        status?: number\r\n        result?: string\r\n        extra?: string\r\n        blame?: Blame\r\n}\r\n\r\nexport class Vout {\r\n  txid?: string\r\n  n?: number\r\n  value?: string\r\n  value_satoshi?: number\r\n}\r\n\r\nexport class TxOutWhaleScript{\r\n  type?: string\r\n  hex?: string\r\n}\r\nexport class TxOutWhale{\r\n  id?: string\r\n  txid?: string\r\n  n?: number\r\n  value?: string\r\n  tokenId?: number\r\n  script?: TxOutWhaleScript\r\n}\r\n\r\nexport class TxOutsWhale {\r\n  data?: TxOutWhale[]\r\n}\r\n\r\n\r\nexport class DepositEntry {\r\n        vout?: Vout\r\n        current_height?: number;\r\n        tx_height?: number;\r\n        confirmations?: number\r\n        good?: boolean\r\n        good_buffer?: boolean\r\n        destTxHash?: string\r\n}\r\n\r\nexport class Data {\r\n  data?: DepositEntry[]\r\n}\r\n\r\nexport class DepositsMessage {\r\n  status?: number\r\n  result?: Data\r\n  extra?: string\r\n  blame?: Blame\r\n}\r\nexport class Log {\r\n  From?: string\r\n  To?: string\r\n  Bridge?: string\r\n  Value?: number\r\n  Extradata?: number\r\n}\r\nexport class LogsMessage {\r\n  Confirmations?: number\r\n  Executed?: boolean\r\n  Log?: Log\r\n  DefiTx?: string\r\n  status?: number\r\n  blame?: Blame\r\n}\r\n\r\nexport class Signature {\r\n  signed_msg?: string\r\n  r?: string\r\n  s?: string\r\n  recovery_id?: string\r\n}\r\n\r\nexport class SignatureMessage {\r\n  status?: number\r\n  signatures?: Signature[]\r\n  blame?: Blame\r\n}\r\n\r\nvar defichain = {\r\n  bip32: {\r\n    public: 0x0488b21e,\r\n    private: 0x0488ade4\r\n  },\r\n  messagePrefix: '\\Defichain Signed Message:\\n',\r\n  pubKeyHash: 0x12,\r\n  scriptHash: 0x51,\r\n  wif: 0x80\r\n}  as bitcoin.networks.Network\r\n\r\nexport const pkshToAddress = (scriptPubKey: string) => {\r\n  var address = bitcoin.address.fromOutputScript(Buffer.from(scriptPubKey, \"hex\"), defichain)\r\n  return address\r\n}\r\n\r\nexport const strToSatoshi = (val: string) => {\r\n  return sts.toSatoshi(val)\r\n}\r\n\r\nexport const getTransactionN = (address: string, txid: string) => {\r\n  return new Promise(async (resolve, reject) => {\r\n    const objTx = await getTxOutsWhale(txid)\r\n    console.log(objTx)\r\n    if ((objTx?.data?.length || 0) == 0){\r\n        reject(\"This TxID is not known on the Defichain blockchain\")\r\n    }\r\n    objTx?.data?.forEach(element => {\r\n       if ((element?.script?.type || \"\") === \"pubkeyhash\"){\r\n         let recoveredAddress = pkshToAddress(element?.script?.hex || \"\")\r\n         console.log(recoveredAddress.toLowerCase(),\"==\",address.toLowerCase())\r\n         if(recoveredAddress.toLowerCase() === address.toLowerCase()) {\r\n           var vt: VoutViktor = {n: element?.n, satoshi: element?.value}\r\n           resolve(vt)\r\n         }\r\n       }\r\n    });\r\n\r\n    reject(\"This transaction does not pay into your deposit address\")\r\n  })\r\n}\r\n\r\n\r\nexport const buildUrl = (destChain: string) => {\r\n  if (destChain == \"ethereum\")\r\n    return env.ETHEREUM_BACKEND_ENDPOINT;\r\n  else return env.BSC_BACKEND_ENDPOINT;\r\n}\r\nexport const getDepositAddress = async (userAddress: string, destChain: string) => {\r\n  let url = buildUrl(destChain) + \"/deposit/\" + userAddress;\r\n  let settings = { method: \"Get\" };\r\n\r\n  return fetch(url, settings).then(res => res.json() as DepositMessage);\r\n};\r\n\r\nexport type VoutViktor = {\r\n  n?: number;\r\n  satoshi?: string;\r\n};\r\n\r\nexport const getTxOutsWhale = async (txid: string) => {\r\n  let url = \"https://ocean.defichain.com/v0/mainnet/transactions/\" + txid + \"/vouts\"\r\n  let settings = { method: \"Get\" };\r\n\r\n  return fetch(url, settings).then(res => res.json() as TxOutsWhale);\r\n};\r\n\r\nexport const getDeposits = async (userAddress: string, destChain: string) => {\r\n  let url = buildUrl(destChain) + \"/eligible/\" + userAddress;\r\n  let settings = { method: \"Get\" };\r\n  return fetch(url, settings).then(res => res.json() as DepositsMessage);\r\n};\r\n\r\nexport const getKeySignatures = async (userAddress: string, txid: string, n: number, destChain: string) => {\r\n  let url = buildUrl(destChain) + \"/mint/\" + userAddress + \"/\" + txid + \"/\" + n;\r\n  console.log(url)\r\n  let settings = { method: \"Get\" };\r\n  return fetch(url, settings).then(res => res.json() as SignatureMessage);\r\n};\r\n\r\nexport const getLogs = async (txid: string, destChain: string) => {\r\n  let url = buildUrl(destChain) + \"/logs/\" + txid;\r\n  let settings = { method: \"Get\" };\r\n  return fetch(url, settings).then(res => res.json() as LogsMessage);\r\n};","import {\r\n  makeStyles,\r\n  Paper,\r\n  PaperProps,\r\n  styled,\r\n  Theme,\r\n} from \"@material-ui/core\";\r\nimport classNames from \"classnames\";\r\nimport React, { FunctionComponent } from \"react\";\r\nimport { useShakingStyles } from \"../../theme/animationUtils\";\r\n\r\nconst useBridgePaperStyles = makeStyles((theme) => {\r\n  return {\r\n    root: {\r\n      maxWidth: 400,\r\n      margin: \"0 auto\",\r\n      position: \"relative\",\r\n      overflow: \"hidden\",\r\n    },\r\n  };\r\n});\r\n\r\ntype BridgePurePaperProps = PaperProps & {\r\n  shaking?: boolean;\r\n};\r\n\r\nexport const BridgePurePaper: FunctionComponent<BridgePurePaperProps> = ({\r\n  shaking,\r\n  className,\r\n  ...props\r\n}) => {\r\n  const classes = useBridgePaperStyles();\r\n  const shakingStyles = useShakingStyles();\r\n  const resolvedClassName = classNames(className, {\r\n    [shakingStyles.shaking]: shaking,\r\n  });\r\n  return <Paper className={resolvedClassName} classes={classes} {...props} />;\r\n};\r\n\r\ntype BridgePaperProps = PaperContentProps & BridgePurePaperProps;\r\n\r\n// deprecated - used only in catalog - remove gradually\r\nexport const BridgePaper: FunctionComponent<BridgePaperProps> = ({\r\n  topPadding,\r\n  bottomPadding = true,\r\n  children,\r\n  ...rest\r\n}) => {\r\n  return (\r\n    <BridgePurePaper {...rest}>\r\n      <PaperContent topPadding={topPadding} bottomPadding={bottomPadding}>\r\n        {children}\r\n      </PaperContent>\r\n    </BridgePurePaper>\r\n  );\r\n};\r\n\r\nexport const BridgePaperWrapper = styled(\"div\")({\r\n  marginTop: 40,\r\n});\r\n\r\nconst SMALL_PADDING = 10;\r\nconst MEDIUM_PADDING = 20;\r\nconst BIG_PADDING = 40;\r\n\r\nconst getPadding = (variant: PaddingVariant = \"big\") => {\r\n  switch (variant) {\r\n    case \"small\":\r\n      return SMALL_PADDING;\r\n    case \"medium\":\r\n      return MEDIUM_PADDING;\r\n    case \"big\":\r\n    default:\r\n      return BIG_PADDING;\r\n  }\r\n};\r\n\r\nconst usePaperContentStyles = makeStyles<Theme, PaperContentProps>((theme) => ({\r\n  root: {\r\n    paddingLeft: ({ paddingVariant }) => getPadding(paddingVariant),\r\n    paddingRight: ({ paddingVariant }) => getPadding(paddingVariant),\r\n  },\r\n  top: {\r\n    paddingTop: ({ paddingVariant }) => getPadding(paddingVariant),\r\n  },\r\n  bottom: {\r\n    paddingBottom: ({ paddingVariant }) => getPadding(paddingVariant),\r\n  },\r\n  darker: {\r\n    backgroundColor: theme.customColors.whiteDarker,\r\n  },\r\n}));\r\n\r\ntype PaddingVariant = \"big\" | \"medium\" | \"small\";\r\n\r\nexport type PaperContentProps = {\r\n  darker?: boolean;\r\n  topPadding?: boolean;\r\n  bottomPadding?: boolean;\r\n  paddingVariant?: PaddingVariant;\r\n  className?: string;\r\n};\r\n\r\nexport const PaperContent: FunctionComponent<PaperContentProps> = ({\r\n  topPadding,\r\n  bottomPadding,\r\n  darker,\r\n  paddingVariant,\r\n  className,\r\n  children,\r\n}) => {\r\n  const styles = usePaperContentStyles({ paddingVariant: paddingVariant });\r\n  const resolvedClassName = classNames(styles.root, className, {\r\n    [styles.top]: topPadding,\r\n    [styles.bottom]: bottomPadding,\r\n    [styles.darker]: darker,\r\n  });\r\n  return <div className={resolvedClassName}>{children}</div>;\r\n};\r\n\r\nexport const PaperHeader = styled(\"header\")({\r\n  display: \"flex\",\r\n  justifyContent: \"space-between\",\r\n  alignItems: \"center\",\r\n  paddingTop: SMALL_PADDING,\r\n  paddingBottom: SMALL_PADDING,\r\n  paddingLeft: SMALL_PADDING,\r\n  paddingRight: SMALL_PADDING,\r\n});\r\n\r\nexport const PaperNav = styled(\"div\")({\r\n  justifySelf: \"flex-start\",\r\n  minWidth: 72,\r\n});\r\n\r\nexport const PaperActions = styled(\"div\")({\r\n  justifySelf: \"flex-end\",\r\n  minWidth: 72,\r\n  \"& > *\": {\r\n    margin: \"0 4px\",\r\n    \"&:first-child\": {\r\n      marginLeft: 0,\r\n    },\r\n    \"&:last-child\": {\r\n      marginRight: 0,\r\n    },\r\n  },\r\n});\r\n\r\nexport const PaperTitle = styled(\"div\")({\r\n  justifySelf: \"center\",\r\n  textAlign: \"center\",\r\n  width: \"100%\",\r\n});\r\n\r\nconst useSpacedContentStyles = makeStyles({\r\n  root: {\r\n    minHeight: 200,\r\n  },\r\n  rootSmaller: {\r\n    minHeight: 130,\r\n  },\r\n});\r\n\r\ntype SpacedPaperContentProps = PaperContentProps & {\r\n  smaller?: boolean;\r\n};\r\n\r\nexport const SpacedPaperContent: FunctionComponent<SpacedPaperContentProps> = ({\r\n  smaller,\r\n  ...rest\r\n}) => {\r\n  const styles = useSpacedContentStyles();\r\n  const className = classNames(styles.root, {\r\n    [styles.rootSmaller]: smaller,\r\n  });\r\n  return <PaperContent className={className} {...rest} />;\r\n};\r\n","import { Tab, Tabs, TabsProps } from \"@material-ui/core\";\r\nimport React, { FunctionComponent, useCallback } from \"react\";\r\nimport { useHistory, useRouteMatch } from \"react-router-dom\";\r\nimport { paths } from \"../../../pages/routes\";\r\n\r\nexport const TransactionTypeTabs: FunctionComponent<TabsProps> = () => {\r\n  const history = useHistory();\r\n  const { path } = useRouteMatch();\r\n  const onTabChange = useCallback(\r\n    (event: React.ChangeEvent<{}>, newPath: string) => {\r\n      history.push(newPath);\r\n    },\r\n    [history]\r\n  );\r\n\r\n  return (\r\n    <>\r\n      <Tabs\r\n        value={path}\r\n        onChange={onTabChange}\r\n        indicatorColor=\"primary\"\r\n        variant=\"fullWidth\"\r\n      >\r\n        <Tab\r\n          label={\"Pull From Defichain\"}\r\n          value={paths.MINT}\r\n        />\r\n        <Tab\r\n          label={\"Send To Defichain\"}\r\n          value={paths.RELEASE}\r\n        />\r\n      </Tabs>\r\n    </>\r\n  );\r\n};\r\n","import firebase from \"firebase/app\";\r\n\r\nrequire(\"firebase/auth\");\r\nrequire(\"firebase/firestore\");\r\nrequire(\"firebase/functions\");\r\n\r\n// Creates a user profile\r\nconst createOrUpdateProfileData = async (\r\n  db: firebase.firestore.Firestore,\r\n  uid: string\r\n) => {\r\n  // update user collection\r\n  const doc = db.collection(\"users\").doc(uid);\r\n  const docData = await doc.get();\r\n  try {\r\n    if (docData.exists) {\r\n      // add a new signature if needed\r\n      await doc.update({\r\n        updated: firebase.firestore.Timestamp.fromDate(new Date(Date.now())),\r\n      });\r\n    } else {\r\n      // create user\r\n      await doc.set({\r\n        uid,\r\n        updated: firebase.firestore.Timestamp.fromDate(new Date(Date.now())),\r\n        signatures: [],\r\n      });\r\n    }\r\n  } catch (e) {\r\n    console.error(\"failed to update user profile\", e);\r\n    throw e;\r\n  }\r\n};\r\n\r\n// Check if an account exists for the given id and signature,\r\n// otherwise attempt to register\r\nconst signInOrRegister = async (\r\n  id: string,\r\n  signature: string\r\n): Promise<firebase.User | null> => {\r\n  let token: string | null = null;\r\n  try {\r\n    const res = await firebase.functions().httpsCallable(\"authenticate\")({\r\n      signed: signature,\r\n      account: id,\r\n    });\r\n\r\n    token = res.data.token;\r\n    if (!token) {\r\n      throw new Error(\"missing token\");\r\n    }\r\n  } catch (e) {\r\n    console.error(\"Failed to create token\", e);\r\n    throw e;\r\n  }\r\n\r\n  let user;\r\n  try {\r\n    user = token && (await firebase.auth().signInWithCustomToken(token)).user;\r\n  } catch (e) {\r\n    // FIXME: we should probably handle wrong signatures here, as it would imply\r\n    // some sort of corruption or attack.\r\n    console.error(\"Failed to authenticate with token\", e);\r\n    throw e;\r\n  }\r\n  if (!user) return null;\r\n  // always create / update profile data\r\n  await createOrUpdateProfileData(firebase.firestore(), user.uid);\r\n  return user;\r\n};\r\n\r\n// Check if the user is currently authenticated for the correct address,\r\n// otherwise attempt to sign in or register for that address\r\n// TODO: remove \"signature\" and only rely on \"rawSignature\" because\r\n// only rawSignature can be verified\r\nexport const getFirebaseUser = async (\r\n  address: string,\r\n  signatures: { rawSignature: string; signature: string }\r\n) => {\r\n  const { currentUser } = firebase.auth();\r\n  if (!currentUser || currentUser.uid !== address) {\r\n    // If the user is logged in with another wallet, sign out first\r\n    if (currentUser?.uid !== address) {\r\n      await firebase.auth().signOut();\r\n    }\r\n    return signInOrRegister(address, signatures.rawSignature);\r\n  } else {\r\n    return currentUser;\r\n  }\r\n};\r\n","import { GatewaySession } from \"@renproject/ren-tx\";\r\nimport firebase from \"firebase/app\";\r\nimport { env } from \"../../../constants/environmentVariables\";\r\n\r\nimport { Database } from \"../database\";\r\nimport { getFirebaseUser } from \"./firebaseUtils\";\r\n\r\nif (!env.FIREBASE_KEY) {\r\n  console.warn(`No database key set.`);\r\n}\r\n\r\nfirebase.initializeApp({\r\n  apiKey: env.FIREBASE_KEY,\r\n  authDomain: window.location.hostname,\r\n  projectId: env.FIREBASE_PROJECT_ID,\r\n});\r\n\r\nrequire(\"firebase/firestore\");\r\n\r\ntype DbTimestamps = {\r\n  seconds: number;\r\n  nanoseconds: number;\r\n};\r\n\r\nexport type DbMeta = {\r\n  state: string;\r\n};\r\n\r\nexport type DbGatewaySession = GatewaySession & {\r\n  updated: DbTimestamps;\r\n  created: DbTimestamps;\r\n  meta: DbMeta;\r\n};\r\n\r\nexport class FireBase<Transaction extends { id: string }>\r\n  implements Database<Transaction> {\r\n  private db: firebase.firestore.Firestore;\r\n\r\n  constructor() {\r\n    this.db = firebase.firestore();\r\n  }\r\n\r\n  public addTx = async (\r\n    tx: Transaction,\r\n    localWeb3Address: string,\r\n    fsSignature: string | null\r\n  ) => {\r\n    // add timestamps\r\n    const timestamps = firebase.firestore.Timestamp.fromDate(\r\n      new Date(Date.now())\r\n    ) as DbTimestamps;\r\n\r\n    const dbTx = {\r\n      ...tx,\r\n      created: timestamps,\r\n      updated: timestamps,\r\n    };\r\n\r\n    await this.db\r\n      .collection(\"transactions\")\r\n      .doc(tx.id)\r\n      .set({\r\n        user: localWeb3Address.toLowerCase(),\r\n        walletSignature: fsSignature,\r\n        id: tx.id,\r\n        updated: timestamps,\r\n        createdSeconds: timestamps.seconds,\r\n        data: JSON.stringify(dbTx),\r\n      })\r\n      .catch((e) => console.error(\"failed to track tx\", e));\r\n  };\r\n\r\n  public updateTx = async (tx: Transaction) => {\r\n    const timestamps = firebase.firestore.Timestamp.fromDate(\r\n      new Date(Date.now())\r\n    );\r\n    const dbTx = { ...tx, updated: timestamps };\r\n    try {\r\n      await this.db\r\n        .collection(\"transactions\")\r\n        .doc(tx.id)\r\n        .update({\r\n          data: JSON.stringify(dbTx),\r\n          updated: timestamps,\r\n        });\r\n    } catch (e) {\r\n      console.error(\"failed to update\", e);\r\n      throw e;\r\n    }\r\n  };\r\n\r\n  public deleteTx = async (tx: Transaction) => {\r\n    try {\r\n      await this.db\r\n        .collection(\"transactions\")\r\n        .doc(tx.id)\r\n        .update({ deleted: true });\r\n    } catch (e) {\r\n      console.error(\"failed to delete\", e);\r\n      throw e;\r\n    }\r\n  };\r\n\r\n  public getTx = async (tx: Transaction) => {\r\n    return this.db\r\n      .collection(\"transactions\")\r\n      .doc(tx.id)\r\n      .get()\r\n      .then((doc) => {\r\n        if (doc.exists) {\r\n          const data = doc.data();\r\n          if (data && !data.deleted) {\r\n            return JSON.parse(data.data);\r\n          }\r\n        }\r\n        throw new Error(`Tx: ${tx.id} not found`);\r\n      })\r\n      .catch((e) => {\r\n        console.error(\"Failed to get tx\", e);\r\n        throw e;\r\n      });\r\n  };\r\n\r\n  public getTxs = async (uid: string): Promise<Transaction[]> => {\r\n    try {\r\n      const fsDataSnapshot = await this.db\r\n        .collection(\"transactions\")\r\n        .where(\"user\", \"==\", uid.toLowerCase())\r\n        .get();\r\n      const fsTransactions: Transaction[] = [];\r\n      if (!fsDataSnapshot.empty) {\r\n        fsDataSnapshot.forEach((doc: any) => {\r\n          const data = doc.data();\r\n          if (data.deleted) return;\r\n          const tx: Transaction = JSON.parse(data.data);\r\n          fsTransactions.push(tx);\r\n        });\r\n      }\r\n      return fsTransactions;\r\n    } catch (e) {\r\n      console.error(\"failed to fetch txs\", e);\r\n      throw e;\r\n    }\r\n  };\r\n\r\n  public getUser = async (\r\n    address: string,\r\n    signatures: { signature: string; rawSignature: string }\r\n  ) => {\r\n    const user = await getFirebaseUser(address, signatures);\r\n    return (\r\n      user && {\r\n        uid: user.uid,\r\n      }\r\n    );\r\n  };\r\n}\r\n","export type TransactionStatusType = \"completed\" | \"pending\" | \"submitted\";\r\n\r\n// multiwallet compatible\r\nexport enum WalletStatus {\r\n  DISCONNECTED = \"disconnected\",\r\n  CONNECTING = \"connecting\",\r\n  CONNECTED = \"connected\",\r\n  WRONG_NETWORK = \"wrong_network\",\r\n}\r\n\r\nexport type WalletConnectionStatusType =\r\n  | \"disconnected\"\r\n  | \"connecting\"\r\n  | \"connected\"\r\n  | \"wrong_network\";\r\n","import { FireBase } from \"./firebase/firebase\";\r\n\r\nexport interface Database<Transaction extends { id: string }> {\r\n  addTx: (\r\n    tx: Transaction,\r\n    localWeb3Address: string,\r\n    fsSignature: string | null\r\n  ) => Promise<void>;\r\n\r\n  updateTx: (tx: Transaction) => Promise<void>;\r\n\r\n  deleteTx: (tx: Transaction) => Promise<void>;\r\n\r\n  getTxs: (signature: string) => Promise<Transaction[]>;\r\n\r\n  getUser: (\r\n    address: string,\r\n    signatures: { rawSignature: string; signature: string }\r\n  ) => Promise<{ uid: string } | null>;\r\n}\r\n\r\nexport const newDefaultDatabase = <Transaction extends { id: string }>() =>\r\n  new FireBase<Transaction>();\r\n\r\nexport const db = newDefaultDatabase();\r\n","export const trimAddress = (address?: string, chars = 4) => {\r\n  if (!address) {\r\n    return \"\";\r\n  }\r\n  if (address.length <= 2 * chars) {\r\n    return address;\r\n  }\r\n  const start = address.slice(0, chars);\r\n  const end = address.slice(-chars);\r\n  return `${start}...${end}`;\r\n};\r\n\r\nconst vowels = \"eaiou\".split(\"\");\r\nexport const isFirstVowel = (str: string) =>\r\n  Boolean(str) && str.length > 0 && vowels.includes(str.charAt(0).toLowerCase());\r\n","const connectBinanceChain = () => {\r\n  if (getBinanceChain() !== \"undefined\") {\r\n    getBinanceChain().enable().catch(console.error);\r\n  }\r\n};\r\n\r\nconst getBinanceChain = () => {\r\n  return (window as any).BinanceChain;\r\n};\r\n\r\nexport const signWithBinanceChain: (msg: string) => Promise<string> = (\r\n  msg: string\r\n) =>\r\n  new Promise((resolve, reject) => {\r\n    if (!getBinanceChain()) {\r\n      reject(\"no binance chain\");\r\n    }\r\n    getBinanceChain()\r\n      .request({ method: \"eth_requestAccounts\" })\r\n      .then((addresses: Array<string>) => {\r\n        const from = addresses[0];\r\n        if (!from) return connectBinanceChain();\r\n        getBinanceChain()\r\n          .request({\r\n            method: \"eth_sign\",\r\n            params: [from, msg],\r\n          })\r\n          .then(resolve)\r\n          .catch(reject);\r\n      });\r\n  });\r\n","import { base58_to_binary } from 'base58-js'\r\nimport { bech32, bech32m } from 'bech32';\r\nimport { createHash } from 'sha256-uint8array';\r\n\r\nconst sha256 = (payload: Uint8Array) => createHash().update(payload).digest();\r\n\r\nenum Network {\r\n  mainnet = 'mainnet',\r\n  testnet = 'testnet',\r\n  regtest = 'regtest',\r\n}\r\n\r\nenum AddressType {\r\n  p2pkh = 'p2pkh',\r\n  p2sh = 'p2sh',\r\n  p2wpkh = 'p2wpkh',\r\n  p2wsh = 'p2wsh',\r\n  p2tr = 'p2tr',\r\n}\r\n\r\ntype AddressInfo = {\r\n  bech32: boolean;\r\n  network: Network;\r\n  address: string;\r\n  type: AddressType;\r\n};\r\n\r\nconst addressTypes: { [key: number]: { type: AddressType; network: Network } } = {\r\n  0x12: {\r\n    type: AddressType.p2pkh,\r\n    network: Network.mainnet,\r\n  },\r\n\r\n\r\n  0x5a: {\r\n    type: AddressType.p2sh,\r\n    network: Network.mainnet,\r\n  },\r\n\r\n};\r\n\r\nconst parseBech32 = (address: string): AddressInfo => {\r\n  let decoded;\r\n\r\n  try {\r\n    //if (address.startsWith('bc1p') || address.startsWith('tb1p') || address.startsWith('bcrt1p')) {\r\n    //  decoded = bech32m.decode(address);\r\n    //} else {\r\n      decoded = bech32.decode(address);\r\n    //}\r\n  } catch (error) {\r\n    throw new Error('Invalid address');\r\n  }\r\n\r\n  const mapPrefixToNetwork: { [key: string]: Network } = {\r\n    df: Network.mainnet,\r\n    tb: Network.testnet,\r\n    bcrt: Network.regtest,\r\n  };\r\n\r\n  const network: Network = mapPrefixToNetwork[decoded.prefix];\r\n\r\n  if (network === undefined) {\r\n    throw new Error('Invalid address');\r\n  }\r\n\r\n  const witnessVersion = decoded.words[0];\r\n\r\n  if (witnessVersion < 0 || witnessVersion > 16) {\r\n    throw new Error('Invalid address');\r\n  }\r\n  const data = bech32.fromWords(decoded.words.slice(1));\r\n\r\n  let type;\r\n\r\n  if (data.length === 20) {\r\n    type = AddressType.p2wpkh;\r\n  } else if (witnessVersion === 1) {\r\n    type = AddressType.p2tr;\r\n  } else {\r\n    type = AddressType.p2wsh;\r\n  }\r\n\r\n  return {\r\n    bech32: true,\r\n    network,\r\n    address,\r\n    type,\r\n  };\r\n};\r\n\r\nconst getAddressInfo = (address: string): AddressInfo => {\r\n  let decoded: Uint8Array;\r\n  const prefix = address.substr(0, 2).toLowerCase();\r\n\r\n  if (prefix === 'df' || prefix === 'tb') {\r\n    return parseBech32(address);\r\n  }\r\n\r\n  try {\r\n    decoded = base58_to_binary(address);\r\n  } catch (error) {\r\n    throw new Error('Invalid address');\r\n  }\r\n\r\n  const { length } = decoded;\r\n\r\n  if (length !== 25) {\r\n    throw new Error('Invalid address');\r\n  }\r\n\r\n  const version = decoded[0];\r\n\r\n  const checksum = decoded.slice(length - 4, length);\r\n  const body = decoded.slice(0, length - 4);\r\n\r\n  const expectedChecksum = sha256(sha256(body)).slice(0, 4);\r\n\r\n  if (checksum.some((value: number, index: number) => value !== expectedChecksum[index])) {\r\n    throw new Error('Invalid address');\r\n  }\r\n\r\n  const validVersions = Object.keys(addressTypes).map(Number);\r\n\r\n  if (!validVersions.includes(version)) {\r\n    throw new Error('Invalid address');\r\n  }\r\n\r\n  const addressType = addressTypes[version];\r\n\r\n  return {\r\n    ...addressType,\r\n    address,\r\n    bech32: false,\r\n  };\r\n};\r\n\r\nconst validate = (address: string, network?: Network) => {\r\n  try {\r\n    const addressInfo = getAddressInfo(address);\r\n    console.log(addressInfo)\r\n    if (network) {\r\n      return network === addressInfo.network;\r\n    }\r\n\r\n    return true;\r\n  } catch (error) {\r\n    return false;\r\n  }\r\n};\r\n\r\nexport { getAddressInfo, Network, AddressType, validate };\r\nexport default validate;","import { RenNetwork } from \"@renproject/interfaces\";\r\nimport { useMultiwallet } from \"@renproject/multiwallet-ui\";\r\nimport { env } from \"process\";\r\nimport { env as SS } from \"../../constants/environmentVariables\";\r\n\r\nimport { useCallback, useEffect, useMemo } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport Web3 from \"web3\";\r\nimport { AbiItem } from 'web3-utils'\r\nimport {\r\n  WalletConnectionStatusType,\r\n  WalletStatus,\r\n} from \"../../components/utils/types\";\r\nimport { storageKeys } from \"../../constants/constants\";\r\nimport { db } from \"../../services/database/database\";\r\nimport { signWithBinanceChain } from \"../../services/wallets/bsc\";\r\nimport { BridgeWallet, RenChain } from \"../../utils/assetConfigs\";\r\nimport { $renNetwork } from \"../network/networkSlice\";\r\nimport {\r\n  $isAuthenticating,\r\n  $multiwalletChain,\r\n  $walletUser,\r\n  setAuthRequired,\r\n  setSignatures,\r\n  settingUser,\r\n  setUser,\r\n} from \"./walletSlice\";\r\n\r\ntype WalletData = ReturnType<typeof useMultiwallet> & {\r\n  account: string;\r\n  status: WalletConnectionStatusType;\r\n  walletConnected: boolean;\r\n  provider: any;\r\n  symbol: BridgeWallet;\r\n  deactivateConnector: () => void;\r\n};\r\n\r\nconst resolveWallet = (provider: any) => {\r\n  if (provider?.isMetaMask) {\r\n    return BridgeWallet.METAMASKW;\r\n  }\r\n\r\n  if (provider?.chainId === \"0x61\" || provider?.chainId?.indexOf(\"Binance\")) {\r\n    return BridgeWallet.BINANCESMARTW;\r\n  }\r\n\r\n  if (provider?.isMewConnect || provider?.isMEWConnect) {\r\n    return BridgeWallet.MEWCONNECTW;\r\n  }\r\n\r\n  return BridgeWallet.UNKNOWNW;\r\n};\r\n\r\ntype UseWallet = (chain: string) => WalletData;\r\n\r\nexport const useWallet: UseWallet = (chain) => {\r\n  const {\r\n    enabledChains,\r\n    targetNetwork,\r\n    activateConnector,\r\n    setTargetNetwork,\r\n  } = useMultiwallet();\r\n  const { account = \"\", status = \"disconnected\" } =\r\n    enabledChains?.[chain] || {};\r\n  const provider = enabledChains?.[chain]?.provider;\r\n  const symbol = resolveWallet(provider);\r\n  const emptyFn = () => {};\r\n  const deactivateConnector =\r\n    enabledChains[chain]?.connector.deactivate || emptyFn;\r\n\r\n  return {\r\n    account,\r\n    status,\r\n    walletConnected: status === WalletStatus.CONNECTED,\r\n    provider,\r\n    symbol,\r\n    targetNetwork,\r\n    enabledChains,\r\n    activateConnector,\r\n    setTargetNetwork,\r\n    deactivateConnector,\r\n  } as WalletData;\r\n};\r\n\r\nexport const useSelectedChainWallet = () => {\r\n  const multiwalletChain = useSelector($multiwalletChain);\r\n  return useWallet(multiwalletChain);\r\n};\r\n\r\nexport const useSyncMultiwalletNetwork = () => {\r\n  const { targetNetwork, setTargetNetwork } = useSelectedChainWallet();\r\n  const renNetwork = useSelector($renNetwork);\r\n  useEffect(() => {\r\n    if (renNetwork !== targetNetwork) {\r\n      console.info(\"syncing multiwallet with network\", renNetwork);\r\n      setTargetNetwork(\r\n        renNetwork.includes(\"mainnet\")\r\n          ? RenNetwork.Mainnet\r\n          : renNetwork.includes(\"testnet\")\r\n          ? RenNetwork.Testnet\r\n          : renNetwork\r\n      );\r\n    }\r\n  }, [renNetwork, setTargetNetwork, targetNetwork]);\r\n};\r\n\r\nconst SIGN_MESSAGE = \"You are not supposed to do this!!\";\r\n\r\nconst ABI = [\r\n  {\r\n    \"anonymous\": false,\r\n    \"inputs\": [\r\n      {\r\n        \"indexed\": false,\r\n        \"internalType\": \"address\",\r\n        \"name\": \"From\",\r\n        \"type\": \"address\"\r\n      },\r\n      {\r\n        \"indexed\": false,\r\n        \"internalType\": \"string\",\r\n        \"name\": \"To\",\r\n        \"type\": \"string\"\r\n      },\r\n      {\r\n        \"indexed\": false,\r\n        \"internalType\": \"string\",\r\n        \"name\": \"Bridge\",\r\n        \"type\": \"string\"\r\n      },\r\n      {\r\n        \"indexed\": false,\r\n        \"internalType\": \"uint256\",\r\n        \"name\": \"Value\",\r\n        \"type\": \"uint256\"\r\n      },\r\n      {\r\n        \"indexed\": false,\r\n        \"internalType\": \"uint256\",\r\n        \"name\": \"Extradata\",\r\n        \"type\": \"uint256\"\r\n      }\r\n    ],\r\n    \"name\": \"DepositToDefichain\",\r\n    \"type\": \"event\"\r\n  },\r\n  {\r\n    \"inputs\": [],\r\n    \"name\": \"owner\",\r\n    \"outputs\": [\r\n      {\r\n        \"internalType\": \"address\",\r\n        \"name\": \"\",\r\n        \"type\": \"address\"\r\n      }\r\n    ],\r\n    \"stateMutability\": \"view\",\r\n    \"type\": \"function\",\r\n    \"constant\": true\r\n  },\r\n  {\r\n    \"inputs\": [\r\n      {\r\n        \"internalType\": \"bytes\",\r\n        \"name\": \"\",\r\n        \"type\": \"bytes\"\r\n      }\r\n    ],\r\n    \"name\": \"spent_outputs\",\r\n    \"outputs\": [\r\n      {\r\n        \"internalType\": \"bool\",\r\n        \"name\": \"\",\r\n        \"type\": \"bool\"\r\n      }\r\n    ],\r\n    \"stateMutability\": \"view\",\r\n    \"type\": \"function\",\r\n    \"constant\": true\r\n  },\r\n  {\r\n    \"inputs\": [\r\n      {\r\n        \"internalType\": \"string\",\r\n        \"name\": \"\",\r\n        \"type\": \"string\"\r\n      }\r\n    ],\r\n    \"name\": \"supported_bridges\",\r\n    \"outputs\": [\r\n      {\r\n        \"internalType\": \"address\",\r\n        \"name\": \"\",\r\n        \"type\": \"address\"\r\n      }\r\n    ],\r\n    \"stateMutability\": \"view\",\r\n    \"type\": \"function\",\r\n    \"constant\": true\r\n  },\r\n  {\r\n    \"inputs\": [\r\n      {\r\n        \"internalType\": \"address\",\r\n        \"name\": \"new_owner\",\r\n        \"type\": \"address\"\r\n      }\r\n    ],\r\n    \"name\": \"transferOwnership\",\r\n    \"outputs\": [],\r\n    \"stateMutability\": \"nonpayable\",\r\n    \"type\": \"function\"\r\n  },\r\n  {\r\n    \"inputs\": [\r\n      {\r\n        \"internalType\": \"string\",\r\n        \"name\": \"name\",\r\n        \"type\": \"string\"\r\n      },\r\n      {\r\n        \"internalType\": \"address\",\r\n        \"name\": \"tokenAddress\",\r\n        \"type\": \"address\"\r\n      }\r\n    ],\r\n    \"name\": \"addNewToken\",\r\n    \"outputs\": [],\r\n    \"stateMutability\": \"nonpayable\",\r\n    \"type\": \"function\"\r\n  },\r\n  {\r\n    \"inputs\": [\r\n      {\r\n        \"internalType\": \"string\",\r\n        \"name\": \"name\",\r\n        \"type\": \"string\"\r\n      }\r\n    ],\r\n    \"name\": \"removeToken\",\r\n    \"outputs\": [],\r\n    \"stateMutability\": \"nonpayable\",\r\n    \"type\": \"function\"\r\n  },\r\n  {\r\n    \"inputs\": [\r\n      {\r\n        \"internalType\": \"string\",\r\n        \"name\": \"bridge\",\r\n        \"type\": \"string\"\r\n      }\r\n    ],\r\n    \"name\": \"haveBridge\",\r\n    \"outputs\": [\r\n      {\r\n        \"internalType\": \"bool\",\r\n        \"name\": \"\",\r\n        \"type\": \"bool\"\r\n      }\r\n    ],\r\n    \"stateMutability\": \"view\",\r\n    \"type\": \"function\",\r\n    \"constant\": true\r\n  },\r\n  {\r\n    \"inputs\": [\r\n      {\r\n        \"internalType\": \"address\",\r\n        \"name\": \"targetAddress\",\r\n        \"type\": \"address\"\r\n      },\r\n      {\r\n        \"internalType\": \"uint256\",\r\n        \"name\": \"txid\",\r\n        \"type\": \"uint256\"\r\n      },\r\n      {\r\n        \"internalType\": \"uint256\",\r\n        \"name\": \"n\",\r\n        \"type\": \"uint256\"\r\n      },\r\n      {\r\n        \"internalType\": \"uint256\",\r\n        \"name\": \"amount\",\r\n        \"type\": \"uint256\"\r\n      },\r\n      {\r\n        \"internalType\": \"string\",\r\n        \"name\": \"bridge\",\r\n        \"type\": \"string\"\r\n      }\r\n    ],\r\n    \"name\": \"messageToSign\",\r\n    \"outputs\": [\r\n      {\r\n        \"internalType\": \"bytes\",\r\n        \"name\": \"\",\r\n        \"type\": \"bytes\"\r\n      }\r\n    ],\r\n    \"stateMutability\": \"pure\",\r\n    \"type\": \"function\",\r\n    \"constant\": true\r\n  },\r\n  {\r\n    \"inputs\": [\r\n      {\r\n        \"internalType\": \"address\",\r\n        \"name\": \"targetAddress\",\r\n        \"type\": \"address\"\r\n      },\r\n      {\r\n        \"internalType\": \"uint256\",\r\n        \"name\": \"txid\",\r\n        \"type\": \"uint256\"\r\n      },\r\n      {\r\n        \"internalType\": \"uint256\",\r\n        \"name\": \"n\",\r\n        \"type\": \"uint256\"\r\n      },\r\n      {\r\n        \"internalType\": \"uint256\",\r\n        \"name\": \"amount\",\r\n        \"type\": \"uint256\"\r\n      },\r\n      {\r\n        \"internalType\": \"string\",\r\n        \"name\": \"bridge\",\r\n        \"type\": \"string\"\r\n      }\r\n    ],\r\n    \"name\": \"hashToSign\",\r\n    \"outputs\": [\r\n      {\r\n        \"internalType\": \"bytes32\",\r\n        \"name\": \"\",\r\n        \"type\": \"bytes32\"\r\n      }\r\n    ],\r\n    \"stateMutability\": \"pure\",\r\n    \"type\": \"function\",\r\n    \"constant\": true\r\n  },\r\n  {\r\n    \"inputs\": [\r\n      {\r\n        \"internalType\": \"string\",\r\n        \"name\": \"targetAddress\",\r\n        \"type\": \"string\"\r\n      },\r\n      {\r\n        \"internalType\": \"string\",\r\n        \"name\": \"bridge\",\r\n        \"type\": \"string\"\r\n      },\r\n      {\r\n        \"internalType\": \"uint256\",\r\n        \"name\": \"amount\",\r\n        \"type\": \"uint256\"\r\n      }\r\n    ],\r\n    \"name\": \"burnToken\",\r\n    \"outputs\": [\r\n      {\r\n        \"internalType\": \"uint256\",\r\n        \"name\": \"\",\r\n        \"type\": \"uint256\"\r\n      }\r\n    ],\r\n    \"stateMutability\": \"nonpayable\",\r\n    \"type\": \"function\"\r\n  },\r\n  {\r\n    \"inputs\": [\r\n      {\r\n        \"internalType\": \"address\",\r\n        \"name\": \"targetAddress\",\r\n        \"type\": \"address\"\r\n      },\r\n      {\r\n        \"internalType\": \"uint256\",\r\n        \"name\": \"txid\",\r\n        \"type\": \"uint256\"\r\n      },\r\n      {\r\n        \"internalType\": \"uint256\",\r\n        \"name\": \"n\",\r\n        \"type\": \"uint256\"\r\n      },\r\n      {\r\n        \"internalType\": \"uint256\",\r\n        \"name\": \"amount\",\r\n        \"type\": \"uint256\"\r\n      },\r\n      {\r\n        \"internalType\": \"string\",\r\n        \"name\": \"bridge\",\r\n        \"type\": \"string\"\r\n      },\r\n      {\r\n        \"internalType\": \"bytes32\",\r\n        \"name\": \"signature_r\",\r\n        \"type\": \"bytes32\"\r\n      },\r\n      {\r\n        \"internalType\": \"bytes32\",\r\n        \"name\": \"signature_s\",\r\n        \"type\": \"bytes32\"\r\n      },\r\n      {\r\n        \"internalType\": \"uint8\",\r\n        \"name\": \"signature_v\",\r\n        \"type\": \"uint8\"\r\n      }\r\n    ],\r\n    \"name\": \"whoSignedThis\",\r\n    \"outputs\": [\r\n      {\r\n        \"internalType\": \"address\",\r\n        \"name\": \"\",\r\n        \"type\": \"address\"\r\n      }\r\n    ],\r\n    \"stateMutability\": \"pure\",\r\n    \"type\": \"function\",\r\n    \"constant\": true\r\n  },\r\n  {\r\n    \"inputs\": [\r\n      {\r\n        \"internalType\": \"address\",\r\n        \"name\": \"targetAddress\",\r\n        \"type\": \"address\"\r\n      },\r\n      {\r\n        \"internalType\": \"uint256\",\r\n        \"name\": \"txid\",\r\n        \"type\": \"uint256\"\r\n      },\r\n      {\r\n        \"internalType\": \"uint256\",\r\n        \"name\": \"n\",\r\n        \"type\": \"uint256\"\r\n      },\r\n      {\r\n        \"internalType\": \"uint256\",\r\n        \"name\": \"amount\",\r\n        \"type\": \"uint256\"\r\n      },\r\n      {\r\n        \"internalType\": \"string\",\r\n        \"name\": \"bridge\",\r\n        \"type\": \"string\"\r\n      },\r\n      {\r\n        \"internalType\": \"bytes32\",\r\n        \"name\": \"signature_r\",\r\n        \"type\": \"bytes32\"\r\n      },\r\n      {\r\n        \"internalType\": \"bytes32\",\r\n        \"name\": \"signature_s\",\r\n        \"type\": \"bytes32\"\r\n      },\r\n      {\r\n        \"internalType\": \"uint8\",\r\n        \"name\": \"signature_v\",\r\n        \"type\": \"uint8\"\r\n      }\r\n    ],\r\n    \"name\": \"mintToken\",\r\n    \"outputs\": [],\r\n    \"stateMutability\": \"nonpayable\",\r\n    \"type\": \"function\"\r\n  },\r\n  {\r\n    \"inputs\": [\r\n      {\r\n        \"internalType\": \"address\",\r\n        \"name\": \"in_signer\",\r\n        \"type\": \"address\"\r\n      }\r\n    ],\r\n    \"name\": \"initialize_gateway\",\r\n    \"outputs\": [],\r\n    \"stateMutability\": \"nonpayable\",\r\n    \"type\": \"function\"\r\n  },\r\n  {\r\n    \"inputs\": [\r\n      {\r\n        \"internalType\": \"address\",\r\n        \"name\": \"new_signer\",\r\n        \"type\": \"address\"\r\n      }\r\n    ],\r\n    \"name\": \"newSigner\",\r\n    \"outputs\": [],\r\n    \"stateMutability\": \"nonpayable\",\r\n    \"type\": \"function\"\r\n  },\r\n  {\r\n    \"inputs\": [\r\n      {\r\n        \"internalType\": \"uint256\",\r\n        \"name\": \"amount\",\r\n        \"type\": \"uint256\"\r\n      }\r\n    ],\r\n    \"name\": \"precisionRebase\",\r\n    \"outputs\": [\r\n      {\r\n        \"internalType\": \"uint256\",\r\n        \"name\": \"\",\r\n        \"type\": \"uint256\"\r\n      }\r\n    ],\r\n    \"stateMutability\": \"pure\",\r\n    \"type\": \"function\",\r\n    \"constant\": true\r\n  },\r\n  {\r\n    \"inputs\": [\r\n      {\r\n        \"internalType\": \"uint256\",\r\n        \"name\": \"amount\",\r\n        \"type\": \"uint256\"\r\n      }\r\n    ],\r\n    \"name\": \"reducePrecision\",\r\n    \"outputs\": [\r\n      {\r\n        \"internalType\": \"uint256\",\r\n        \"name\": \"\",\r\n        \"type\": \"uint256\"\r\n      }\r\n    ],\r\n    \"stateMutability\": \"pure\",\r\n    \"type\": \"function\",\r\n    \"constant\": true\r\n  },\r\n  {\r\n    \"inputs\": [\r\n      {\r\n        \"internalType\": \"uint256\",\r\n        \"name\": \"txid\",\r\n        \"type\": \"uint256\"\r\n      },\r\n      {\r\n        \"internalType\": \"uint256\",\r\n        \"name\": \"n\",\r\n        \"type\": \"uint256\"\r\n      }\r\n    ],\r\n    \"name\": \"manuallySpend\",\r\n    \"outputs\": [],\r\n    \"stateMutability\": \"nonpayable\",\r\n    \"type\": \"function\"\r\n  }\r\n];\r\n\r\n// TODO TBD: cache for more wallet providers?\r\nconst useWeb3 = () => {\r\n  const { provider } = useSelectedChainWallet();\r\n  return useMemo(() => new Web3(provider), [provider]);\r\n};\r\n\r\n\r\n\r\nconst sendRedeemTxHook = async (address: string,\r\n  web3: Web3,\r\n  chain: RenChain, targetAddress: string, txid: string, n: number, amount: number, bridge: string, r: string, s: string,v: number) => {    \r\n    return new Promise((resolve, reject) => {\r\n\r\n    if ((web3.currentProvider as any).connection.isMetaMask) {\r\n        let myContract = new web3.eth.Contract(ABI as AbiItem[], chain==\"ethereum\" ? SS.ETH_CONTRACT_ADDRESS : SS.BSC_CONTRACT_ADDRESS);\r\n        console.log(r.padStart(64, \"0\"), s.padStart(64, \"0\"));\r\n        myContract.methods.mintToken(targetAddress, '0x' + txid, n, amount, bridge, r, s, v).send({from: address}).on('transactionHash', resolve)\r\n        .on('error', reject);;\r\n    }\r\n  })\r\n}\r\n\r\nconst addTokenHook = (web3: Web3, chain: RenChain) => {    \r\n  console.log(\"Add Token for Network:\", chain)\r\n      if ((web3.currentProvider as any).connection.isMetaMask) {\r\n        (web3.currentProvider as any).connection\r\n        .sendAsync({\r\n          method: 'wallet_watchAsset',\r\n          params: {\r\n            type: 'ERC20',\r\n            options: {\r\n              address: chain==\"ethereum\" ? SS.ETH_TOKEN_ADDRESS : SS.BSC_TOKEN_ADDRESS,\r\n              symbol: 'DFI',\r\n              decimals: 18,\r\n              image: 'https://cryptologos.cc/logos/defichain-dfi-logo.svg?v=018',\r\n            },\r\n          },\r\n        }, (err: any, added: any) => {\r\n          console.log('provider returned', err, added)\r\n        })\r\n      }\r\n}\r\n\r\nconst addBinanceChainHook = async (web3: Web3, chain: RenChain) => {    \r\n  \r\n  return new Promise((resolve, reject) => {\r\n    let networkData = [\r\n      {\r\n        chainId: '0x38',\r\n            chainName: 'Binance Smart Chain',\r\n            nativeCurrency:\r\n                {\r\n                    name: 'BNB',\r\n                    symbol: 'BNB',\r\n                    decimals: 18\r\n                },\r\n            rpcUrls: ['https://bsc-dataseed.binance.org/'],\r\n            blockExplorerUrls: ['https://bscscan.com/'],\r\n      },\r\n    ];\r\n    if ((web3.currentProvider as any).connection.isMetaMask) {\r\n      (web3.currentProvider as any).connection\r\n      .request\r\n      ({\r\n        method: \"wallet_addEthereumChain\",\r\n        params: networkData,\r\n    \r\n      }, (err: any, added: any) => {\r\n        console.log('provider returned', err, added)\r\n        if (err || 'error' in added) {\r\n            reject(\"error\")\r\n        } else {\r\n            resolve(\"good\")\r\n        }\r\n    })\r\n    }\r\n})\r\n}\r\n\r\nconst addEthereumChainHook = async (web3: Web3, chain: RenChain) => {    \r\n  return new Promise((resolve, reject) => {\r\n    let networkData = [\r\n      {\r\n        chainId: '0x1',\r\n      },\r\n    ];\r\n    if ((web3.currentProvider as any).connection.isMetaMask) {\r\n      (web3.currentProvider as any).connection\r\n      .request\r\n      ({\r\n        method: \"wallet_switchEthereumChain\",\r\n        params: networkData,\r\n    \r\n      }, (err: any, added: any) => {\r\n        console.log('provider returned', err, added)\r\n        if (err || 'error' in added) {\r\n            reject(\"error\")\r\n        } else {\r\n            resolve(\"good\")\r\n        }\r\n    })\r\n    }\r\n})\r\n}\r\n\r\nconst sendBurnTxHook = async (address: string,\r\n  web3: Web3,\r\n  chain: RenChain, targetAddress: string, amount: bigint, bridge: string) => {    \r\n\r\n  return new Promise((resolve, reject) => {\r\n    if ((web3.currentProvider as any).connection.isMetaMask) {\r\n        let myContract = new web3.eth.Contract(ABI as AbiItem[], chain==\"ethereum\" ? SS.ETH_CONTRACT_ADDRESS : SS.BSC_CONTRACT_ADDRESS);\r\n        let response = myContract.methods.burnToken(targetAddress, bridge, \"0x\"+amount.toString(16)).send({from: address}).on('transactionHash', resolve)\r\n        .on('error', reject);;\r\n    }\r\n  })\r\n}\r\n\r\nexport const useRedeem = () => {\r\n  const chain = useSelector($multiwalletChain);\r\n  const { account, status } = useWallet(chain);\r\n  const web3 = useWeb3();\r\n  const dispatch = useDispatch();\r\n  const getSignatures = useCallback(async (targetAddress: string, txid: string, n: number, amount: number, bridge: string, r: string, s: string,v: number) => {\r\n    amount = amount - 0.01*100000000 // TODO make 0.1 fee variable\r\n    if (account && web3 && status === \"connected\") {\r\n      try {\r\n        console.log(targetAddress, txid, n, amount, bridge.toUpperCase(), r, s, v)\r\n        const signatures = await sendRedeemTxHook(account, web3, chain, targetAddress, txid, n, amount, bridge.toUpperCase(), r, s, v);\r\n        return {err:null, result:signatures}\r\n      } catch (error) {\r\n        return {err:error, result:null};\r\n      }\r\n    }\r\n    return {err:{code:-1, message:\"something went wrong\"}, result:null}\r\n  }, [account, web3, status, chain, dispatch]);\r\n\r\n  return { getSignatures };\r\n};\r\n\r\nexport const useToken = () => {\r\n  const chain = useSelector($multiwalletChain);\r\n  const web3 = useWeb3();\r\n  const getToken = useCallback(() => {\r\n    if (web3) {\r\n      addTokenHook(web3, chain)\r\n    }\r\n  }, [web3, chain]);\r\n\r\n  return { getToken };\r\n};\r\n\r\nexport const useAddBsc = (chainname: string) => {\r\n  const chain = useSelector($multiwalletChain);\r\n  const { account, status } = useWallet(chain);\r\n  const web3 = useWeb3();\r\n  const dispatch = useDispatch();\r\n  const updateBsc = useCallback(async () => {\r\n    if (web3) {\r\n      try {\r\n        if(chainname==\"Ethereum\"){\r\n            const signatures = await addEthereumChainHook(web3, chain);\r\n            return {err:null, result:signatures}\r\n        }else{\r\n            const signatures = await addBinanceChainHook(web3, chain);\r\n            return {err:null, result:signatures}\r\n        }\r\n      } catch (error) {\r\n        return {err:error, result:null};\r\n      }\r\n    }\r\n    return {err:{code:-1, message:\"something went wrong\"}, result:null}\r\n  }, [account, web3, status, chain, dispatch]);\r\n\r\n  return { updateBsc };\r\n};\r\n\r\n\r\nexport const useBurn = () => {\r\n  const chain = useSelector($multiwalletChain);\r\n  const { account, status } = useWallet(chain);\r\n  const web3 = useWeb3();\r\n  const dispatch = useDispatch();\r\n  const getBurn = useCallback(async (targetAddress: string, amount: number, bridge: string) => {\r\n    // TODO FIX THIS SHIT amount = amount*1000000000000000000 - 0.1*1000000000000000000 // TODO make 0.1 fee variable\r\n    var amount_bgint = BigInt(web3.utils.toWei(amount.toString(), 'ether'))\r\n    \r\n    if (account && web3 && status === \"connected\") {\r\n      try {\r\n        const signatures = await sendBurnTxHook(account, web3, chain, targetAddress, amount_bgint, bridge.toUpperCase());\r\n        return {err:null, result:signatures}\r\n      } catch (error) {\r\n        return {err:error, result:null};\r\n      }\r\n    }\r\n    return {err:{code:-1, message:\"something went wrong\"}, result:null}\r\n  }, [account, web3, status, chain, dispatch]);\r\n\r\n  return { getBurn };\r\n};\r\n\r\nconst getWeb3Signatures = async (\r\n  address: string,\r\n  web3: Web3,\r\n  chain: RenChain\r\n) => {\r\n  const localSigMap = JSON.parse(\r\n    localStorage.getItem(storageKeys.SIG_MAP) || \"{}\"\r\n  );\r\n  const localRawSigMap = JSON.parse(\r\n    localStorage.getItem(storageKeys.RAW_SIG_MAP) || \"{}\"\r\n  );\r\n  const addressLowerCase = address.toLowerCase();\r\n\r\n  let signature: string = localSigMap[addressLowerCase] || \"\";\r\n  let rawSignature: string = localRawSigMap[addressLowerCase] || \"\";\r\n\r\n  if (!signature || !rawSignature) {\r\n    // get unique wallet signature for database backup\r\n    if (\r\n      chain === RenChain.ethereum ||\r\n      // signing is actually based on wallet, not chain,\r\n      // so use this style if the provider is eth\r\n      // TODO: move signing functionality into multiwallet?\r\n      (web3.currentProvider as any).connection.isMetaMask\r\n    ) {\r\n      console.info(\"signing\");\r\n      rawSignature = await web3.eth.personal.sign(\r\n        web3.utils.utf8ToHex(SIGN_MESSAGE),\r\n        addressLowerCase,\r\n        \"\"\r\n      );\r\n    } else if (chain === RenChain.binanceSmartChain) {\r\n      rawSignature = await signWithBinanceChain(SIGN_MESSAGE);\r\n    }\r\n\r\n    localRawSigMap[addressLowerCase] = rawSignature;\r\n    localStorage.setItem(\r\n      storageKeys.RAW_SIG_MAP,\r\n      JSON.stringify(localRawSigMap)\r\n    );\r\n\r\n    signature = web3.utils.sha3(rawSignature);\r\n    localSigMap[addressLowerCase] = signature;\r\n    localStorage.setItem(storageKeys.SIG_MAP, JSON.stringify(localSigMap));\r\n  }\r\n  return { signature, rawSignature };\r\n};\r\n\r\nexport const useSignatures = () => {\r\n  const dispatch = useDispatch();\r\n  const chain = useSelector($multiwalletChain);\r\n  const { account, status } = useWallet(chain);\r\n  const web3 = useWeb3();\r\n  const getSignatures = useCallback(async () => {\r\n    console.debug(\"reauth\");\r\n    if (account && web3 && status === \"connected\") {\r\n      /*try {\r\n        const signatures = await getWeb3Signatures(account, web3, chain);\r\n        dispatch(setSignatures(signatures));\r\n        console.debug(\"account\", account);\r\n        dispatch(settingUser());\r\n        const userData = await db.getUser(account.toLowerCase(), signatures);\r\n        dispatch(setUser(userData));\r\n      } catch (error) {\r\n        // FIXME: dispatch some error here to handle in UI\r\n        console.error(error);\r\n      }*/\r\n    }\r\n  }, [account, web3, status, chain, dispatch]);\r\n\r\n  return { getSignatures };\r\n};\r\n\r\nexport const useWeb3Signatures = () => {\r\n  const { getSignatures } = useSignatures();\r\n  useEffect(() => {\r\n    getSignatures();\r\n  }, [getSignatures]);\r\n\r\n  return { getSignatures };\r\n};\r\n\r\nexport const useAuthentication = () => {\r\n  const { account } = useSelectedChainWallet();\r\n  const user = useSelector($walletUser);\r\n  const isAuthenticating = useSelector($isAuthenticating);\r\n  const { getSignatures } = useSignatures();\r\n  const isAuthenticated = user !== null && account.toLowerCase() === user.uid;\r\n\r\n  return { isAuthenticated, isAuthenticating, authenticate: getSignatures };\r\n};\r\n\r\nexport const useAuthRequired = (authRequired: boolean) => {\r\n  const dispatch = useDispatch();\r\n  useEffect(() => {\r\n    dispatch(setAuthRequired(authRequired));\r\n    return () => {\r\n      dispatch(setAuthRequired(false));\r\n    };\r\n  }, [dispatch, authRequired]);\r\n};\r\n","import { RenNetwork } from \"@renproject/interfaces\";\r\nimport { GatewaySession } from \"@renproject/ren-tx\";\r\nimport { useCallback, useEffect, useState } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport { paths } from \"../../pages/routes\";\r\nimport { useNotifications } from \"../../providers/Notifications\";\r\nimport { db } from \"../../services/database/database\";\r\nimport {\r\n  BridgeCurrency,\r\n  getCurrencyConfig,\r\n  isMainnetNetwork,\r\n  isTestnetNetwork,\r\n} from \"../../utils/assetConfigs\";\r\nimport { trimAddress } from '../../utils/strings'\r\nimport { $renNetwork, setRenNetwork } from \"../network/networkSlice\";\r\nimport { useSelectedChainWallet } from \"../wallet/walletHooks\";\r\nimport { $multiwalletChain } from \"../wallet/walletSlice\";\r\nimport {\r\n  $currentTxId,\r\n  removeTransaction,\r\n  setCurrentTxId,\r\n} from \"./transactionsSlice\";\r\nimport { TxType } from \"./transactionsUtils\";\r\n\r\nexport const useTransactionDeletion = (tx: GatewaySession) => {\r\n  const dispatch = useDispatch();\r\n  const history = useHistory();\r\n  const { showNotification } = useNotifications();\r\n  const { walletConnected } = useSelectedChainWallet();\r\n\r\n  const [menuOpened, setMenuOpened] = useState(false);\r\n  const handleMenuClose = useCallback(() => {\r\n    setMenuOpened(false);\r\n  }, []);\r\n  const handleMenuOpen = useCallback(() => {\r\n    if (walletConnected) {\r\n      setMenuOpened(true);\r\n    }\r\n  }, [walletConnected]);\r\n  const handleDeleteTx = useCallback(() => {\r\n    db.deleteTx(tx).then(() => {\r\n      dispatch(removeTransaction(tx));\r\n      showNotification(`Transaction ${trimAddress(tx.id, 6)} deleted.`);\r\n      history.push(tx.type === TxType.MINT ? paths.MINT : paths.RELEASE);\r\n    });\r\n  }, [dispatch, history, showNotification, tx]);\r\n\r\n  return { menuOpened, handleMenuOpen, handleMenuClose, handleDeleteTx };\r\n};\r\n\r\nexport const useRenNetworkTracker = (currency: BridgeCurrency) => {\r\n  const dispatch = useDispatch();\r\n  const renChain = useSelector($multiwalletChain);\r\n  const renNetwork = useSelector($renNetwork);\r\n  useEffect(() => {\r\n    const currencyConfig = getCurrencyConfig(currency);\r\n    const networkMapping = currencyConfig.networkMappings[renChain];\r\n    let newNetwork: RenNetwork | null = null;\r\n    if (isTestnetNetwork(renNetwork)) {\r\n      newNetwork = networkMapping.testnet;\r\n    } else if (isMainnetNetwork(renNetwork)) {\r\n      newNetwork = networkMapping.mainnet;\r\n    } else {\r\n      console.error(`Unknown network ${newNetwork}`);\r\n    }\r\n    if (newNetwork && renNetwork !== newNetwork) {\r\n      dispatch(setRenNetwork(newNetwork));\r\n    }\r\n  }, [dispatch, renChain, currency, renNetwork]);\r\n};\r\n\r\nexport const useSetCurrentTxId = (id: string) => {\r\n  const dispatch = useDispatch();\r\n  const currentId = useSelector($currentTxId);\r\n  useEffect(() => {\r\n    if (id !== currentId) {\r\n      dispatch(setCurrentTxId(id));\r\n    }\r\n  }, [dispatch, id, currentId]);\r\n};\r\n","import { styled } from \"@material-ui/core\";\r\n\r\nexport const CheckboxWrapper = styled(\"div\")({\r\n  marginTop: 10,\r\n  textAlign: 'center'\r\n});\r\n","import React, { FunctionComponent, useCallback, useState } from \"react\";\r\nimport { makeStyles } from \"@material-ui/core\";\r\nimport classNames from \"classnames\";\r\nimport {DEV} from \"../../constants/environmentVariables\"\r\nconst useStyles = makeStyles({\r\n  root: {\r\n    background: \"lightgray\",\r\n  },\r\n  wrapper: {\r\n    background: \"gray\",\r\n    overflow: \"hidden\",\r\n    height: 5,\r\n    \"&:hover\": {\r\n      height: 10,\r\n    },\r\n  },\r\n  wrapperEnabled: {\r\n    height: \"auto\",\r\n    \"&:hover\": {\r\n      height: \"auto\",\r\n    },\r\n  },\r\n});\r\n\r\nconst off = DEV == false;\r\n\r\ntype DebugProps = {\r\n  it: any;\r\n  force?: boolean;\r\n  disable?: boolean;\r\n  wrapper?: boolean;\r\n};\r\n\r\n\r\ntype DebugWrapperProps = {\r\n  enabled: boolean;\r\n};\r\n\r\n\r\n\r\nconst DebugWrapper: FunctionComponent<DebugWrapperProps> = ({\r\n  enabled,\r\n  children,\r\n}) => {\r\n  const classes = useStyles();\r\n  const [show, setShow] = useState(false);\r\n  const toggleShow = useCallback(() => {\r\n    setShow(!show);\r\n  }, [show]);\r\n  if (!enabled) {\r\n    return <>{children}</>;\r\n  }\r\n  const className = classNames(classes.wrapper, {\r\n    [classes.wrapperEnabled]: show,\r\n  });\r\n  return (\r\n    <div className={className} onClick={toggleShow}>\r\n      {children}\r\n    </div>\r\n  );\r\n};\r\n\r\nconst getCircularReplacer = () => {\r\n  const seen = new WeakSet();\r\n  return (key : any, value : any) => {\r\n    if (value && value.type === \"Buffer\") {\r\n      return \"buffer\";\r\n    }\r\n    if (typeof value === \"object\" && value !== null) {\r\n      if (seen.has(value)) {\r\n        return;\r\n      }\r\n      seen.add(value);\r\n    }\r\n    return value;\r\n  };\r\n};\r\n\r\nexport const Debug: FunctionComponent<DebugProps> = ({\r\n  it,\r\n  force,\r\n  disable,\r\n  wrapper,\r\n  children,\r\n}) => {\r\n  const classes = useStyles();\r\n  const target = it || children;\r\n  const show = !off || force;\r\n  const noClick = useCallback((event) => {\r\n    event.stopPropagation();\r\n  }, []);\r\n  return show && !disable ? (\r\n    <DebugWrapper enabled={!!wrapper}>\r\n      <pre className={classes.root} onClick={noClick}>\r\n        {JSON.stringify(target, getCircularReplacer(), 2)}\r\n      </pre>\r\n    </DebugWrapper>\r\n  ) : null;\r\n};\r\n\r\nexport const DebugComponentProps: FunctionComponent<any> = (props) => (\r\n  <Debug it={props} />\r\n);\r\n","import { useState } from \"react\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { useDebounce } from \"react-use\";\r\nimport {\r\n  getBurnAndReleaseFees,\r\n  getLockAndMintFees,\r\n} from \"../../services/rentx\";\r\nimport { BridgeCurrency } from \"../../utils/assetConfigs\";\r\nimport { $renNetwork } from \"../network/networkSlice\";\r\nimport { TxType } from \"../transactions/transactionsUtils\";\r\nimport { useWallet } from \"../wallet/walletHooks\";\r\nimport { $multiwalletChain } from \"../wallet/walletSlice\";\r\nimport { isSupportedByCurrentNetwork } from \"../wallet/walletUtils\";\r\nimport { SimpleFee } from \"./feesUtils\";\r\n\r\nconst feesCache: Record<string, SimpleFee> = {};\r\nexport const useFetchFees = (currency: BridgeCurrency, txType: TxType) => {\r\n  const multiwalletChain = useSelector($multiwalletChain);\r\n  const { provider, walletConnected } = useWallet(multiwalletChain);\r\n  const renNetwork = useSelector($renNetwork);\r\n  const initialFees: SimpleFee = {\r\n    mint: 20,\r\n    burn: 20,\r\n    lock: 1000000,\r\n    release: 1000000,\r\n  };\r\n  const [fees, setFees] = useState(initialFees);\r\n  const [pending, setPending] = useState(false);\r\n\r\n\r\n  return { fees, pending };\r\n};\r\n","import Numeral from \"numeral\";\r\n\r\nexport const toUsdFormat = (value: string | number) => {\r\n  return Numeral(value).format(\"$0,0.00\");\r\n};\r\n\r\nexport const numberFormatOptions = {\r\n  thousandSeparator: true,\r\n  allowLeadingZeros: false,\r\n  allowNegative: false,\r\n  allowedDecimalSeparators: [\".\", \",\"],\r\n};\r\n","import React, { FunctionComponent } from \"react\";\r\nimport NumberFormat, { NumberFormatProps } from \"react-number-format\";\r\nimport { numberFormatOptions } from \"../../utils/formatters\";\r\n\r\ntype NumberFormatTextProps = NumberFormatProps & {\r\n  spacedSuffix?: string;\r\n};\r\nexport const NumberFormatText: FunctionComponent<NumberFormatTextProps> = ({\r\n  spacedSuffix,\r\n  suffix,\r\n  ...props\r\n}) => {\r\n  const resolvedSuffix = spacedSuffix ? ` ${spacedSuffix}` : suffix;\r\n  return (\r\n    <NumberFormat\r\n      {...numberFormatOptions}\r\n      displayType=\"text\"\r\n      suffix={resolvedSuffix}\r\n      {...props}\r\n    />\r\n  );\r\n};\r\n","import { Backdrop } from \"@material-ui/core\";\r\nimport Dialog, { DialogProps } from \"@material-ui/core/Dialog\";\r\nimport MuiDialogTitle, {\r\n  DialogTitleProps,\r\n} from \"@material-ui/core/DialogTitle\";\r\nimport IconButton from \"@material-ui/core/IconButton\";\r\nimport { makeStyles, styled } from \"@material-ui/core/styles\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport CloseIcon from \"@material-ui/icons/Close\";\r\nimport classNames from \"classnames\";\r\nimport React, { FunctionComponent } from \"react\";\r\nimport { BackArrowIcon } from \"../icons/RenIcons\";\r\nimport { BridgePurePaper } from \"../layout/Paper\";\r\n\r\nexport const useBridgeModalTitleStyles = makeStyles((theme) => ({\r\n  dialogTitle: {\r\n    display: \"flex\",\r\n    justifyContent: \"space-between\",\r\n    alignItems: \"stretch\",\r\n    borderBottom: `1px solid ${theme.palette.divider}`,\r\n  },\r\n  titleWrapper: {\r\n    flexGrow: 1,\r\n    paddingLeft: 30, // compensating icons for visual text centering\r\n    paddingRight: 30,\r\n    textAlign: \"center\",\r\n  },\r\n  title: {},\r\n  customContentWrapper: {\r\n    flexGrow: 1,\r\n    display: \"flex\",\r\n    alignItems: \"center\",\r\n    justifyContent: \"center\"\r\n  },\r\n  closeButtonWrapper: {\r\n    minWidth: 30,\r\n  },\r\n  closeButton: {\r\n    color: theme.palette.grey[600],\r\n  },\r\n  prevButtonWrapper: {\r\n    minWidth: 30,\r\n  },\r\n  prevButton: {\r\n    color: theme.palette.grey[600],\r\n  },\r\n}));\r\n\r\ntype BridgeModalTitleProps = DialogTitleProps &\r\n  Pick<DialogProps, \"onClose\"> & {\r\n    onPrev?: () => void;\r\n  };\r\n\r\nexport const BridgeModalTitle: FunctionComponent<BridgeModalTitleProps> = ({\r\n  title,\r\n  onClose,\r\n  onPrev,\r\n  className,\r\n  children,\r\n}) => {\r\n  const styles = useBridgeModalTitleStyles();\r\n  const handleClose = () => {\r\n    if (onClose) {\r\n      onClose({}, \"backdropClick\");\r\n    }\r\n  };\r\n  const handlePrev = () => {\r\n    if (onPrev) {\r\n      onPrev();\r\n    }\r\n  };\r\n\r\n  return (\r\n    <MuiDialogTitle\r\n      disableTypography\r\n      className={classNames(className, styles.dialogTitle)}\r\n    >\r\n      <div className={styles.prevButtonWrapper}>\r\n        {onPrev ? (\r\n          <IconButton\r\n            aria-label=\"prev\"\r\n            className={styles.prevButton}\r\n            onClick={handlePrev}\r\n          >\r\n            <BackArrowIcon fontSize=\"inherit\" />\r\n          </IconButton>\r\n        ) : null}\r\n      </div>\r\n      {title && (\r\n        <div className={styles.titleWrapper}>\r\n          <Typography variant=\"body1\" className={styles.title}>\r\n            {title}\r\n          </Typography>\r\n        </div>\r\n      )}\r\n      {children && (\r\n        <div className={styles.customContentWrapper}>{children}</div>\r\n      )}\r\n      <div className={styles.closeButtonWrapper}>\r\n        {onClose ? (\r\n          <IconButton\r\n            aria-label=\"close\"\r\n            className={styles.closeButton}\r\n            onClick={handleClose}\r\n          >\r\n            <CloseIcon fontSize=\"inherit\" />\r\n          </IconButton>\r\n        ) : null}\r\n      </div>\r\n    </MuiDialogTitle>\r\n  );\r\n};\r\n\r\nexport const BridgeModal: FunctionComponent<DialogProps> = ({\r\n  title,\r\n  open,\r\n  onClose,\r\n  children,\r\n  maxWidth,\r\n}) => {\r\n  return (\r\n    <Dialog onClose={onClose} open={open} maxWidth={maxWidth}>\r\n      <BridgeModalTitle onClose={onClose} title={title} />\r\n      {children}\r\n    </Dialog>\r\n  );\r\n};\r\n\r\nconst useNestedDrawerStyles = makeStyles((theme) => ({\r\n  backdrop: {\r\n    position: \"absolute\",\r\n    top: 0,\r\n    right: 0,\r\n    bottom: 0,\r\n    left: 0,\r\n    zIndex: \"auto\",\r\n  },\r\n  positioner: {\r\n    position: \"relative\",\r\n    top: 0,\r\n    right: 0,\r\n    bottom: 0,\r\n    left: 0,\r\n  },\r\n  paper: {\r\n    position: \"absolute\",\r\n    top: 160,\r\n    bottom: 0,\r\n    width: \"100%\",\r\n    display: \"flex\",\r\n    flexDirection: \"column\",\r\n  },\r\n}));\r\n\r\ntype NestedDrawerProps = DialogProps & {\r\n  open: boolean;\r\n};\r\n\r\nconst stopPropagation = (event: any) => {\r\n  event.stopPropagation();\r\n};\r\n\r\nexport const NestedDrawerWrapper = styled(\"div\")({\r\n  display: \"flex\",\r\n  flexDirection: \"column\",\r\n  flexGrow: 2,\r\n  justifyContent: \"space-between\",\r\n});\r\n\r\nexport const NestedDrawerContent = styled(\"div\")({});\r\nexport const NestedDrawerActions = styled(\"div\")({});\r\n\r\nexport const NestedDrawer: FunctionComponent<NestedDrawerProps> = ({\r\n  open,\r\n  onClose,\r\n  title,\r\n  className,\r\n  children,\r\n}) => {\r\n  const styles = useNestedDrawerStyles();\r\n  const resolvedClassName = classNames(className, styles.paper);\r\n\r\n  return (\r\n    <Backdrop className={styles.backdrop} open={open} onClick={onClose as any}>\r\n      <BridgePurePaper className={resolvedClassName} onClick={stopPropagation}>\r\n        {title && <BridgeModalTitle onClose={onClose} title={title} />}\r\n        {children}\r\n      </BridgePurePaper>\r\n    </Backdrop>\r\n  );\r\n};\r\n","import {\r\n  Button,\r\n  DialogProps,\r\n  styled,\r\n  Typography,\r\n  useTheme,\r\n} from '@material-ui/core'\r\nimport { GatewaySession } from '@renproject/ren-tx'\r\nimport React, {\r\n  FunctionComponent,\r\n  useCallback,\r\n  useEffect,\r\n  useState,\r\n} from 'react'\r\nimport { useHistory } from 'react-router-dom'\r\nimport { useInterval } from 'react-use'\r\nimport {\r\n  ActionButton,\r\n  ActionButtonWrapper,\r\n  RedButton,\r\n} from '../../../components/buttons/Buttons'\r\nimport {\r\n  SpecialAlertIcon,\r\n  WarningIcon,\r\n} from '../../../components/icons/RenIcons'\r\nimport {\r\n  PaperContent,\r\n  SpacedPaperContent,\r\n} from '../../../components/layout/Paper'\r\nimport { Link } from '../../../components/links/Links'\r\nimport {\r\n  BridgeModal,\r\n  NestedDrawer,\r\n  NestedDrawerActions,\r\n  NestedDrawerContent,\r\n  NestedDrawerWrapper,\r\n} from '../../../components/modals/BridgeModal'\r\nimport {\r\n  ProgressWithContent,\r\n  ProgressWrapper,\r\n  TransactionStatusInfo,\r\n} from '../../../components/progress/ProgressHelpers'\r\nimport { links } from '../../../constants/constants'\r\nimport { paths } from '../../../pages/routes'\r\nimport { usePaperTitle } from '../../../providers/TitleProviders'\r\nimport { getFormattedHMS } from '../../../utils/dates'\r\nimport { trimAddress } from '../../../utils/strings'\r\n\r\nexport const ProcessingTimeWrapper = styled(\"div\")({\r\n  marginTop: 5,\r\n  marginBottom: 5,\r\n});\r\n\r\ntype BookmarkPageWarningProps = {\r\n  onClosed?: () => void;\r\n};\r\n\r\nexport const BookmarkPageWarning: FunctionComponent<BookmarkPageWarningProps> = ({\r\n  onClosed,\r\n}) => {\r\n  const [open] = useState(true);\r\n  const handleClose = useCallback(() => {\r\n    if (onClosed) {\r\n      onClosed();\r\n    }\r\n    // setOpen(false);\r\n  }, [onClosed]);\r\n  return (\r\n    <NestedDrawer title=\"Warning\" open={open} onClose={handleClose}>\r\n      <NestedDrawerWrapper>\r\n        <NestedDrawerContent>\r\n          <PaperContent topPadding bottomPadding>\r\n            <Typography variant=\"h5\" align=\"center\" gutterBottom>\r\n              Bookmark this page\r\n            </Typography>\r\n            <Typography variant=\"body2\" align=\"center\" gutterBottom>\r\n              To ensure you don’t lose track of your transaction, please\r\n              bookmark this page.\r\n            </Typography>\r\n          </PaperContent>\r\n        </NestedDrawerContent>\r\n        <NestedDrawerActions>\r\n          <PaperContent bottomPadding>\r\n            <ActionButtonWrapper>\r\n              <ActionButton onClick={handleClose}>I understand</ActionButton>\r\n            </ActionButtonWrapper>\r\n          </PaperContent>\r\n        </NestedDrawerActions>\r\n      </NestedDrawerWrapper>\r\n    </NestedDrawer>\r\n  );\r\n};\r\n\r\ntype ProgressStatusProps = {\r\n  reason?: string;\r\n  processing?: boolean;\r\n};\r\n\r\nexport const ProgressStatus: FunctionComponent<ProgressStatusProps> = ({\r\n  reason = \"\",\r\n  processing = true,\r\n}) => {\r\n  const theme = useTheme();\r\n  const [, setTitle] = usePaperTitle();\r\n  useEffect(() => {\r\n    setTitle(reason);\r\n  }, [setTitle, reason]);\r\n  return (\r\n    <>\r\n      <ProgressWrapper>\r\n        <ProgressWithContent\r\n          processing={processing}\r\n          color={theme.palette.primary.main}\r\n        >\r\n          <TransactionStatusInfo status={reason} />\r\n        </ProgressWithContent>\r\n      </ProgressWrapper>\r\n    </>\r\n  );\r\n};\r\n\r\nexport type TransactionItemProps = {\r\n  tx: GatewaySession;\r\n  isActive?: boolean;\r\n  onContinue?: ((depositHash?: string) => void) | (() => void);\r\n};\r\n\r\ntype HMSCountdownProps = { milliseconds: number };\r\n\r\nexport const HMSCountdown: FunctionComponent<HMSCountdownProps> = ({\r\n  milliseconds,\r\n}) => {\r\n  const [count, setCount] = useState(milliseconds);\r\n  useInterval(() => {\r\n    setCount((ms) => ms - 1000);\r\n  }, 1000);\r\n  const time = getFormattedHMS(count);\r\n\r\n  return <strong>{time}</strong>;\r\n};\r\n\r\nconst ErrorIconWrapper = styled(\"div\")(({ theme }) => ({\r\n  fontSize: 72,\r\n  lineHeight: 1,\r\n  marginTop: 8,\r\n  textAlign: \"center\",\r\n  color: theme.customColors.textLight,\r\n}));\r\n\r\ntype ErrorWithActionProps = DialogProps & {\r\n  title?: string;\r\n  onAction?: () => void;\r\n  reason?: string;\r\n  actionText?: string;\r\n};\r\n\r\nexport const ErrorDialog: FunctionComponent<ErrorWithActionProps> = ({\r\n  title = \"Error\",\r\n  open,\r\n  reason = \"\",\r\n  actionText = \"\",\r\n  onAction,\r\n  children,\r\n}) => {\r\n  return (\r\n    <BridgeModal open={open} title={title} maxWidth=\"xs\">\r\n      <SpacedPaperContent>\r\n        <ErrorIconWrapper>\r\n          <WarningIcon fontSize=\"inherit\" color=\"inherit\" />\r\n        </ErrorIconWrapper>\r\n        <Typography variant=\"h5\" align=\"center\" gutterBottom>\r\n          {reason}\r\n        </Typography>\r\n        <Typography\r\n          color=\"textSecondary\"\r\n          align=\"center\"\r\n          gutterBottom\r\n          component=\"div\"\r\n        >\r\n          {children}\r\n        </Typography>\r\n      </SpacedPaperContent>\r\n      <PaperContent bottomPadding>\r\n        <ActionButtonWrapper>\r\n          <ActionButton onClick={onAction}>{actionText}</ActionButton>\r\n        </ActionButtonWrapper>\r\n      </PaperContent>\r\n    </BridgeModal>\r\n  );\r\n};\r\n\r\nexport const SubmitErrorDialog: FunctionComponent<ErrorWithActionProps> = (\r\n  props\r\n) => (\r\n  <ErrorDialog\r\n    reason=\"Error submitting\"\r\n    actionText=\"Return to submission screen\"\r\n    {...props}\r\n  >\r\n    <span>Return to previous screen to resubmit</span>\r\n  </ErrorDialog>\r\n);\r\n\r\nexport const GeneralErrorDialog: FunctionComponent<ErrorWithActionProps> = (\r\n  props\r\n) => (\r\n  <ErrorDialog\r\n    reason=\"An error has occurred\"\r\n    actionText=\"Refresh page\"\r\n    {...props}\r\n  >\r\n    <span>\r\n      Please ensure you have this page bookmarked before refreshing. If this\r\n      error persists, please{\" \"}\r\n      <Link external href={links.BUGS_LOG} color=\"primary\" underline=\"hover\">\r\n        submit a bug here\r\n      </Link>\r\n      .\r\n    </span>\r\n  </ErrorDialog>\r\n);\r\n\r\nexport const ExpiredErrorDialog: FunctionComponent<ErrorWithActionProps> = (\r\n  props\r\n) => {\r\n  const history = useHistory();\r\n  const goToHome = useCallback(() => {\r\n    history.push(paths.HOME);\r\n  }, [history]);\r\n\r\n  return (\r\n    <ErrorDialog\r\n      title=\"Expired\"\r\n      reason=\"This transaction has expired\"\r\n      actionText=\"Restart transaction\"\r\n      {...props}\r\n    >\r\n      <span>\r\n        Transactions expire after 24 hours. Please restart the transaction if\r\n        you wish to continue.\r\n      </span>\r\n      <ActionButtonWrapper>\r\n        <Button variant=\"text\" color=\"inherit\" onClick={goToHome}>\r\n          Back to home\r\n        </Button>\r\n      </ActionButtonWrapper>\r\n    </ErrorDialog>\r\n  );\r\n};\r\n\r\ntype WarningWithActionsProps = DialogProps & {\r\n  title?: string;\r\n  reason?: string;\r\n  onMainAction?: () => void;\r\n  mainActionText?: string;\r\n  mainActionDisabled?: boolean;\r\n  onAlternativeAction?: () => void;\r\n  alternativeActionText?: string;\r\n  alternativeActionDisabled?: boolean;\r\n};\r\n\r\nexport const WarningDialog: FunctionComponent<WarningWithActionsProps> = ({\r\n  title = \"Warning\",\r\n  open,\r\n  reason = \"\",\r\n  mainActionText = \"\",\r\n  onMainAction,\r\n  mainActionDisabled,\r\n  alternativeActionText = \"\",\r\n  onAlternativeAction,\r\n  alternativeActionDisabled,\r\n  children,\r\n}) => {\r\n  const showMainAction = onMainAction && mainActionText;\r\n  return (\r\n    <BridgeModal open={open} title={title} maxWidth=\"xs\">\r\n      <SpacedPaperContent>\r\n        <ErrorIconWrapper>\r\n          <SpecialAlertIcon fontSize=\"inherit\" color=\"inherit\" />\r\n        </ErrorIconWrapper>\r\n        <Typography variant=\"h5\" align=\"center\" gutterBottom>\r\n          {reason}\r\n        </Typography>\r\n        <Typography\r\n          color=\"textSecondary\"\r\n          align=\"center\"\r\n          gutterBottom\r\n          component=\"div\"\r\n        >\r\n          {children}\r\n        </Typography>\r\n      </SpacedPaperContent>\r\n      <PaperContent bottomPadding>\r\n        <ActionButtonWrapper>\r\n          <RedButton\r\n            variant=\"text\"\r\n            color=\"inherit\"\r\n            onClick={onAlternativeAction}\r\n            disabled={alternativeActionDisabled}\r\n          >\r\n            {alternativeActionText}\r\n          </RedButton>\r\n        </ActionButtonWrapper>\r\n        {showMainAction && (\r\n          <ActionButtonWrapper>\r\n            <ActionButton onClick={onMainAction} disabled={mainActionDisabled}>\r\n              {mainActionText}\r\n            </ActionButton>\r\n          </ActionButtonWrapper>\r\n        )}\r\n      </PaperContent>\r\n    </BridgeModal>\r\n  );\r\n};\r\n\r\ntype WrongAddressWarningDialog = WarningWithActionsProps & {\r\n  address: string;\r\n  addressExplorerLink: string;\r\n  currency: string;\r\n};\r\n\r\nexport const WrongAddressWarningDialog: FunctionComponent<WrongAddressWarningDialog> = ({\r\n  address,\r\n  addressExplorerLink,\r\n  currency,\r\n  ...props\r\n}) => {\r\n  return (\r\n    <WarningDialog\r\n      reason=\"Different account detected\"\r\n      alternativeActionText=\"Continue anyway\"\r\n      {...props}\r\n    >\r\n      <span>\r\n        This transaction was created with a different account to the current\r\n        account (\r\n        <Link\r\n          external\r\n          href={addressExplorerLink}\r\n          color=\"primary\"\r\n          underline=\"hover\"\r\n        >\r\n          {trimAddress(address, 5)}\r\n        </Link>\r\n        ). If you do not have access to the account that created the\r\n        transaction, you will not be able to access the {currency}. Please\r\n        switch account in your wallet.\r\n      </span>\r\n    </WarningDialog>\r\n  );\r\n};\r\n\r\n","import React, { FunctionComponent } from \"react\";\r\nimport { styled } from \"@material-ui/core\";\r\nimport { BridgeChainConfig, CurrencyConfig } from \"../../../utils/assetConfigs\";\r\nimport { HMSCountdown } from \"../../transactions/components/TransactionsHelpers\";\r\nimport { props } from \"../../../theme/props\";\r\n\r\nexport const mintTooltips = {\r\n  sending: \"The amount and asset you’re sending before fees are applied.\",\r\n  to: \"The blockchain you’re sending the asset to.\",\r\n  recipientAddress: \"The wallet that will receive the minted assets.\",\r\n};\r\n\r\nexport const getMintDynamicTooltips = (\r\n  chainConfig: BridgeChainConfig,\r\n  chainNativeCurrencyConfig: CurrencyConfig\r\n) => ({\r\n  acknowledge: `Minting an asset on ${chainConfig.full} requires you to submit a transaction. It will cost you a small amount of ${chainNativeCurrencyConfig.short}.`,\r\n});\r\n\r\nexport const DepositWrapper = styled(\"div\")({\r\n  position: \"relative\",\r\n});\r\n\r\ntype AddressValidityMessageProps = {\r\n  milliseconds: number;\r\n  destNetwork: string;\r\n};\r\n\r\ntype GenericProps = {\r\n  msg: string;\r\n};\r\n\r\nexport const AddressValidityMessage: FunctionComponent<AddressValidityMessageProps> = ({\r\n  milliseconds,\r\n  destNetwork,\r\n}) => {\r\n  return (\r\n    <span>\r\n      This Gateway Address expires in{\" \"}\r\n      <HMSCountdown milliseconds={milliseconds} />. Do not send multiple\r\n      deposits or deposit after it has expired. <br />\r\n      Once you have deposited funds to the Gateway Address, you have 24 hours to\r\n      submit the mint transaction to {destNetwork}\r\n    </span>\r\n  );\r\n};\r\n\r\nexport const MultipleDepositsMessage: FunctionComponent = () => {\r\n  return (\r\n    <span>\r\n      DefiChain-Bridge has detected another deposit to the same gateway address. It\r\n      will require an additional submission to to the destination chain via your\r\n      web3 wallet.\r\n    </span>\r\n  );\r\n};\r\n\r\nexport const GenericMessage: FunctionComponent<GenericProps> = (msg) => {\r\n  return (\r\n    <span>\r\n      {msg}\r\n    </span>\r\n  );\r\n};","import React, { FunctionComponent } from \"react\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { NumberFormatText } from \"../../../components/formatting/NumberFormatText\";\r\nimport { CenteredProgress } from \"../../../components/progress/ProgressHelpers\";\r\nimport {\r\n  LabelWithValue,\r\n  MiddleEllipsisText,\r\n} from \"../../../components/typography/TypographyHelpers\";\r\nimport { Debug } from \"../../../components/utils/Debug\";\r\nimport { WalletStatus } from \"../../../components/utils/types\";\r\nimport { MINT_GAS_UNIT_COST } from \"../../../constants/constants\";\r\nimport {\r\n  BridgeChain,\r\n  BridgeCurrency,\r\n  getChainConfig,\r\n  getCurrencyConfig,\r\n  toReleasedCurrency,\r\n} from \"../../../utils/assetConfigs\";\r\nimport { ActionButton, ActionButtonWrapper, ActionButtonWrapperGapped } from \"../../../components/buttons/Buttons\";\r\n\r\nimport { fromGwei } from \"../../../utils/converters\";\r\nimport { useFetchFees } from \"../../fees/feesHooks\";\r\nimport { getTransactionFees } from \"../../fees/feesUtils\";\r\n\r\nimport { mintTooltips } from \"../../mint/components/MintHelpers\";\r\nimport { useAddBsc, useSelectedChainWallet, useToken } from \"../../wallet/walletHooks\";\r\nimport { getFeeTooltips, TxType } from \"../transactionsUtils\";\r\n\r\ntype TransactionFeesProps = {\r\n  type: TxType;\r\n  currency: BridgeCurrency;\r\n  chain: BridgeChain;\r\n  address?: string;\r\n  hideButton?: boolean;\r\n};\r\n\r\nexport const TransactionFees: FunctionComponent<TransactionFeesProps> = ({\r\n  currency,\r\n  type,\r\n  chain,\r\n  address,\r\n  hideButton\r\n}) => {\r\n  const { status } = useSelectedChainWallet();\r\n  const currencyConfig = getCurrencyConfig(currency);\r\n  const targetChainConfig = getChainConfig(chain);\r\n\r\n\r\n  const { fees, pending } = useFetchFees(currency, type);\r\n  const { renVMFee, renVMFeeAmount, networkFee } = getTransactionFees({\r\n    fees,\r\n    type,\r\n  });\r\n \r\n  const {getToken} = useToken();\r\n\r\n\r\n  const sourceCurrency =\r\n    type === TxType.MINT ? currency : toReleasedCurrency(currency);\r\n  const sourceCurrencyConfig = getCurrencyConfig(sourceCurrency);\r\n  const sourceCurrencyChainConfig = getChainConfig(\r\n    sourceCurrencyConfig.sourceChain\r\n  );\r\n\r\n  const tooltips = getFeeTooltips({\r\n    mintFee: fees.mint / 10000,\r\n    releaseFee: fees.burn / 10000,\r\n    sourceCurrency,\r\n    chain,\r\n  });\r\n\r\n  const feeInGwei = 1337; // TODO: gas price to real gas price adjustment\r\n  const targetChainFeeNative = fromGwei(feeInGwei);\r\n  const targetChainCurrency = getCurrencyConfig(\r\n    targetChainConfig.nativeCurrency\r\n  );\r\n\r\n  if (status !== WalletStatus.CONNECTED) {\r\n    return null;\r\n  }\r\n\r\n  if (pending) {\r\n    return <CenteredProgress />;\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <Debug it={{ currency, fees }} />\r\n      <LabelWithValue\r\n        label=\"Bridge Node Fee\"\r\n        labelTooltip={tooltips.renVmFee}\r\n        value={\r\n          <NumberFormatText\r\n            value={renVMFee}\r\n            spacedSuffix={\"%\"}\r\n            decimalScale={2}\r\n          />\r\n        }\r\n      />\r\n      <LabelWithValue\r\n        label={`${sourceCurrencyChainConfig.full} Miner Fee`}\r\n        labelTooltip={tooltips.sourceChainMinerFee}\r\n        value={\r\n          <NumberFormatText\r\n            value={networkFee}\r\n            spacedSuffix={sourceCurrencyChainConfig.short}\r\n          />\r\n        }\r\n      />\r\n      <LabelWithValue\r\n        label={`Esti. ${targetChainConfig.short} Fee`}\r\n        labelTooltip={tooltips.renCurrencyChainFee}\r\n        value={\"See Metamask\"}\r\n      />\r\n      {address && (\r\n        <LabelWithValue\r\n          label=\"Recipient Address\"\r\n          labelTooltip={mintTooltips.recipientAddress}\r\n          value={<MiddleEllipsisText hoverable>{address}</MiddleEllipsisText>}\r\n        />\r\n      )}\r\n      {!hideButton && (\r\n      /*<ActionButtonWrapperGapped>\r\n          <ActionButton\r\n            variant=\"contained\"\r\n            color=\"secondary\"\r\n            onClick={getToken}\r\n          >\r\n            Add DFI Token To Metamask\r\n          </ActionButton>\r\n        </ActionButtonWrapperGapped>*/<></>\r\n        )}\r\n    </>\r\n  );\r\n};\r\n","import { useEffect } from 'react'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { useLocation } from 'react-router-dom'\r\nimport { paths } from '../../pages/routes'\r\nimport {\r\n  BridgeChain,\r\n  EthTestnet,\r\n  getCurrencyConfig,\r\n  isMainnetNetwork,\r\n  toMintedCurrency,\r\n} from '../../utils/assetConfigs'\r\nimport { $mintCurrency } from '../mint/mintSlice'\r\nimport { $renNetwork } from '../network/networkSlice'\r\nimport { $releaseCurrency } from '../release/releaseSlice'\r\nimport { $chain } from '../wallet/walletSlice'\r\nimport { setPaperShaking } from './uiSlice'\r\n\r\nexport const useShakePaper = (shake: boolean, timeout = 600) => {\r\n  const dispatch = useDispatch();\r\n  useEffect(() => {\r\n    if (shake) {\r\n      dispatch(setPaperShaking(true));\r\n      setTimeout(() => {\r\n        dispatch(setPaperShaking(false));\r\n      }, timeout);\r\n    }\r\n    return () => {\r\n      dispatch(setPaperShaking(false));\r\n    };\r\n  }, [dispatch, shake, timeout]);\r\n};\r\n\r\nexport const useLocationFlow = () => {\r\n  const location = useLocation();\r\n  if (location.pathname.indexOf(paths.MINT) > -1) {\r\n    return \"mint\";\r\n  } else if (location.pathname.indexOf(paths.RELEASE) > -1) {\r\n    return \"burn\";\r\n  }\r\n  return null;\r\n};\r\n\r\nexport const useSubNetworkName = () => {\r\n  const flow = useLocationFlow();\r\n  const chain = useSelector($chain);\r\n  const renNetwork = useSelector($renNetwork);\r\n  const mintCurrency = useSelector($mintCurrency);\r\n  const releaseCurrency = useSelector($releaseCurrency);\r\n  if (\r\n    chain !== BridgeChain.ETHC ||\r\n    flow == null ||\r\n    isMainnetNetwork(renNetwork)\r\n  ) {\r\n    return \"\";\r\n  }\r\n  const renCurrency =\r\n    flow === \"mint\" ? toMintedCurrency(mintCurrency) : releaseCurrency;\r\n  const currencyConfig = getCurrencyConfig(renCurrency);\r\n  return currencyConfig.ethTestnet || EthTestnet.KOVAN;\r\n};\r\n","import {\r\n  Checkbox,\r\n  Divider,\r\n  FormControl,\r\n  FormControlLabel,\r\n  FormLabel,\r\n  IconButton,\r\n  Typography,\r\n} from \"@material-ui/core\";\r\nimport React, {\r\n  FunctionComponent,\r\n  useCallback,\r\n  useEffect,\r\n  useMemo,\r\n  useState,\r\n} from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport {\r\n  ActionButton,\r\n  ActionButtonWrapper,\r\n} from \"../../../components/buttons/Buttons\";\r\nimport { NumberFormatText } from \"../../../components/formatting/NumberFormatText\";\r\nimport { BackArrowIcon } from \"../../../components/icons/RenIcons\";\r\nimport { CheckboxWrapper } from \"../../../components/inputs/InputHelpers\";\r\nimport {\r\n  PaperActions,\r\n  PaperContent,\r\n  PaperHeader,\r\n  PaperNav,\r\n  PaperTitle,\r\n} from \"../../../components/layout/Paper\";\r\nimport { CenteredProgress } from \"../../../components/progress/ProgressHelpers\";\r\nimport { TooltipWithIcon } from \"../../../components/tooltips/TooltipWithIcon\";\r\nimport {\r\n  AssetInfo,\r\n  BigAssetAmount,\r\n  BigAssetAmountWrapper,\r\n  LabelWithValue,\r\n  Label,\r\n  MiddleEllipsisText,\r\n  SpacedDivider,\r\n} from \"../../../components/typography/TypographyHelpers\";\r\nimport { Debug } from \"../../../components/utils/Debug\";\r\nimport { WalletStatus } from \"../../../components/utils/types\";\r\nimport { paths } from \"../../../pages/routes\";\r\nimport { db } from \"../../../services/database/database\";\r\nimport {\r\n  getChainConfig,\r\n  getCurrencyConfig,\r\n  toMintedCurrency,\r\n} from \"../../../utils/assetConfigs\";\r\nimport { useFetchFees } from \"../../fees/feesHooks\";\r\nimport { getTransactionFees } from \"../../fees/feesUtils\";\r\n\r\nimport { $renNetwork } from \"../../network/networkSlice\";\r\nimport { TransactionFees } from \"../../transactions/components/TransactionFees\";\r\nimport {\r\n  $currentSessionCount,\r\n  addTransaction,\r\n  setCurrentTxId,\r\n} from \"../../transactions/transactionsSlice\";\r\nimport {\r\n  createTxQueryString,\r\n  LocationTxState,\r\n  TxConfigurationStepProps,\r\n  TxType,\r\n} from \"../../transactions/transactionsUtils\";\r\nimport { useShakePaper } from \"../../ui/uiHooks\";\r\nimport {\r\n  useAuthRequired,\r\n  useSelectedChainWallet,\r\n} from \"../../wallet/walletHooks\";\r\nimport { $wallet, setWalletPickerOpened } from \"../../wallet/walletSlice\";\r\nimport {\r\n  getMintDynamicTooltips,\r\n  mintTooltips,\r\n} from \"../components/MintHelpers\";\r\nimport { $mint } from \"../mintSlice\";\r\nimport {\r\n  createMintTransaction,\r\n  preValidateMintTransaction,\r\n} from \"../mintUtils\";\r\n\r\nimport {getDepositAddress} from \"../../../services/bridge\"\r\n\r\nexport const MintFeesStep: FunctionComponent<TxConfigurationStepProps> = ({\r\n  onPrev,\r\n}) => {\r\n  useAuthRequired(true);\r\n  const dispatch = useDispatch();\r\n  const history = useHistory();\r\n  const { status, walletConnected, account } = useSelectedChainWallet();\r\n  const [mintingInitialized, setMintingInitialized] = useState(false);\r\n  const { currency } = useSelector($mint);\r\n  const {\r\n    chain,\r\n    signatures: { signature },\r\n  } = useSelector($wallet);\r\n  const network = useSelector($renNetwork);\r\n  const currentSessionCount = useSelector($currentSessionCount);\r\n  const { fees, pending } = useFetchFees(currency, TxType.MINT);\r\n\r\n  \r\n  const lockCurrencyConfig = getCurrencyConfig(currency);\r\n  const { GreyIcon } = lockCurrencyConfig;\r\n\r\n  const destinationChainConfig = getChainConfig(chain);\r\n  const destinationChainNativeCurrencyConfig = getCurrencyConfig(\r\n    destinationChainConfig.nativeCurrency\r\n  );\r\n  const mintDynamicTooltips = getMintDynamicTooltips(\r\n    destinationChainConfig,\r\n    destinationChainNativeCurrencyConfig\r\n  );\r\n  const mintedCurrency = toMintedCurrency(currency);\r\n\r\n  const mintedCurrencyConfig = getCurrencyConfig(mintedCurrency);\r\n\r\n  const [ackChecked, setAckChecked] = useState(false);\r\n  const [touched, setTouched] = useState(false);\r\n  const showAckError = !ackChecked && touched;\r\n  const handleAckCheckboxChange = useCallback((event) => {\r\n    setTouched(true);\r\n    setAckChecked(event.target.checked);\r\n  }, []);\r\n  useShakePaper(showAckError);\r\n\r\n  const tx = useMemo(\r\n    () =>\r\n      createMintTransaction({\r\n        currency: currency,\r\n        destAddress: account,\r\n        mintedCurrency: toMintedCurrency(currency),\r\n        mintedCurrencyChain: chain,\r\n        userAddress: account,\r\n        network: network,\r\n        dayIndex: currentSessionCount,\r\n      }),\r\n    [currency, account, chain, network, currentSessionCount]\r\n  );\r\n  const txValid = preValidateMintTransaction(tx);\r\n  const canInitializeMinting = ackChecked && txValid;\r\n\r\n  const handleConfirm = useCallback(() => {\r\n    if (status === WalletStatus.CONNECTED) {\r\n      setTouched(true);\r\n      if (canInitializeMinting) {\r\n        setMintingInitialized(true);\r\n      } else {\r\n        setMintingInitialized(false);\r\n      }\r\n    } else {\r\n      setTouched(false);\r\n      setMintingInitialized(false);\r\n      dispatch(setWalletPickerOpened(true));\r\n    }\r\n  }, [dispatch, status, canInitializeMinting]);\r\n\r\n  const onMintTxCreated = useCallback(\r\n    async (tx) => {\r\n      // This is where we fetch gateway info from our Backend\r\n      const jsonObj = await getDepositAddress(tx.userAddress, tx.destination);\r\n      if(jsonObj.status == 1) {\r\n        tx.gatewayAddress = jsonObj.result;\r\n\r\n        dispatch(setCurrentTxId(tx.id));\r\n        dispatch(addTransaction(tx));\r\n        history.push({\r\n          pathname: paths.MINT_TRANSACTION,\r\n          search: \"?\" + createTxQueryString(tx),\r\n          state: {\r\n            txState: { newTx: true },\r\n          } as LocationTxState,\r\n        });\r\n      } else {\r\n        // Error popup TODOTODO\r\n      }\r\n    },\r\n    [dispatch, history, account, signature]\r\n  );\r\n\r\n  // there is a dependency loop, because we depend on the number\r\n  // of txes to determine the dayIndex, which updates when we create\r\n  // a new tx, leading to multiple txes being created for the same\r\n  // parameters.\r\n  // This flag prevents that\r\n  const [creatingMintTx, setCreatingMintTx] = useState(false);\r\n\r\n  useEffect(() => {\r\n    if (mintingInitialized && !creatingMintTx) {\r\n      setCreatingMintTx(true);\r\n      onMintTxCreated(tx).finally();\r\n    }\r\n  }, [onMintTxCreated, mintingInitialized, tx, creatingMintTx]);\r\n\r\n  return (\r\n    <>\r\n      <PaperHeader>\r\n        <PaperNav>\r\n          <IconButton onClick={onPrev}>\r\n            <BackArrowIcon />\r\n          </IconButton>\r\n        </PaperNav>\r\n        <PaperTitle>Fees & Confirm</PaperTitle>\r\n        <PaperActions />\r\n      </PaperHeader>\r\n      <PaperContent bottomPadding>\r\n        <Typography variant=\"body1\" gutterBottom>\r\n          Details\r\n        </Typography>\r\n        <Label\r\n          label=\"Sending\"\r\n          labelTooltip={mintTooltips.sending}\r\n          strvalue={currency + \" on \" + getCurrencyConfig(currency).full}/>\r\n        <LabelWithValue\r\n          label=\"To\"\r\n          labelTooltip={mintTooltips.to}\r\n          value={destinationChainConfig.full}\r\n        />\r\n        <LabelWithValue\r\n          label=\"Recipient Address\"\r\n          labelTooltip={mintTooltips.recipientAddress}\r\n          value={\r\n            <MiddleEllipsisText hoverable>{tx.userAddress}</MiddleEllipsisText>\r\n          }\r\n        />\r\n        <SpacedDivider />\r\n        <Typography variant=\"body1\" gutterBottom>\r\n          Fees\r\n        </Typography>\r\n        <TransactionFees\r\n          chain={chain}\r\n          currency={currency}\r\n          type={TxType.MINT}\r\n          hideButton={true}\r\n        />\r\n      </PaperContent>\r\n      <Divider />\r\n      <PaperContent darker topPadding bottomPadding>\r\n        <CheckboxWrapper>\r\n          <FormControl error={showAckError}>\r\n            <FormControlLabel\r\n              control={\r\n                <Checkbox\r\n                  checked={ackChecked}\r\n                  onChange={handleAckCheckboxChange}\r\n                  name=\"ack\"\r\n                  color=\"primary\"\r\n                />\r\n              }\r\n              label={\r\n                <FormLabel htmlFor=\"ack\" component={Typography}>\r\n                  <Typography\r\n                    variant=\"caption\"\r\n                    color={showAckError ? \"inherit\" : \"textPrimary\"}\r\n                  >\r\n                    I acknowledge this transaction requires{\" \"}\r\n                    {destinationChainNativeCurrencyConfig.short}{\" \"}\r\n                    <TooltipWithIcon title={mintDynamicTooltips.acknowledge} />\r\n                  </Typography>\r\n                </FormLabel>\r\n              }\r\n            />\r\n          </FormControl>\r\n        </CheckboxWrapper>\r\n        <ActionButtonWrapper>\r\n          <ActionButton\r\n            onClick={handleConfirm}\r\n            disabled={!ackChecked || mintingInitialized || !walletConnected}\r\n          >\r\n            {!walletConnected\r\n              ? \"Connect Wallet\"\r\n              : mintingInitialized\r\n              ? \"Confirming...\"\r\n              : \"Confirm\"}\r\n          </ActionButton>\r\n        </ActionButtonWrapper>\r\n      </PaperContent>\r\n      <Debug it={{ tx }} />\r\n    </>\r\n  );\r\n};\r\n","import { RenNetwork } from \"@renproject/interfaces\";\r\nimport { useCallback, useEffect } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { useDebounce } from \"react-use\";\r\nimport { mintChainClassMap } from \"../../services/rentx\";\r\nimport {\r\n  BridgeCurrency,\r\n  getChainConfig,\r\n  getCurrencyConfig,\r\n  RenChain,\r\n  toReleasedCurrency,\r\n} from \"../../utils/assetConfigs\";\r\nimport { $renNetwork } from \"../network/networkSlice\";\r\nimport { useSelectedChainWallet } from \"./walletHooks\";\r\nimport {\r\n  $chain,\r\n  addOrUpdateBalance,\r\n  AssetBalance,\r\n  resetBalances,\r\n} from \"./walletSlice\";\r\n\r\nexport const isSupportedByCurrentNetwork = (\r\n  currency: BridgeCurrency,\r\n  renNetwork: RenNetwork,\r\n  chain: RenChain\r\n) => {\r\n  const currencyConfig = getCurrencyConfig(currency);\r\n  if (currencyConfig.networkMappings) {\r\n    const chainMapping = currencyConfig.networkMappings[chain];\r\n    return (\r\n      chainMapping.testnet === renNetwork || chainMapping.mainnet === renNetwork\r\n    );\r\n  }\r\n  return true;\r\n};\r\n\r\nexport const useFetchBalances = (currencySymbols: Array<BridgeCurrency>) => {\r\n  const dispatch = useDispatch();\r\n  const bridgeChain = useSelector($chain);\r\n  const { walletConnected, provider, account } = useSelectedChainWallet();\r\n  const renNetwork = useSelector($renNetwork);\r\n  const bridgeChainConfig = getChainConfig(bridgeChain);\r\n  const Chain = (mintChainClassMap as any)[bridgeChainConfig.rentxName];\r\n\r\n  useEffect(() => {\r\n    if (!walletConnected) {\r\n      dispatch(resetBalances());\r\n    }\r\n  }, [dispatch, walletConnected]);\r\n\r\n  const fetchAssetBalance = useCallback(\r\n    (currency: BridgeCurrency) => {\r\n      if (\r\n        provider &&\r\n        account &&\r\n        walletConnected &&\r\n        isSupportedByCurrentNetwork(\r\n          currency,\r\n          renNetwork,\r\n          bridgeChainConfig.rentxName\r\n        )\r\n      ) {\r\n        const chain = Chain(provider, renNetwork);\r\n        return chain\r\n          .getBalance(currency, account)\r\n          .then((balance: any) => {\r\n            return balance.toNumber() / 100000000;\r\n          })\r\n          .catch(console.error);\r\n      } else {\r\n        return Promise.resolve(null);\r\n      }\r\n    },\r\n    [\r\n      Chain,\r\n      account,\r\n      renNetwork,\r\n      provider,\r\n      walletConnected,\r\n      bridgeChainConfig.rentxName,\r\n    ]\r\n  );\r\n\r\n  useDebounce(\r\n    () => {\r\n      if (!walletConnected) {\r\n        return;\r\n      }\r\n      for (const currencySymbol of currencySymbols) {\r\n        const sourceCurrencySymbol = toReleasedCurrency(currencySymbol);\r\n        fetchAssetBalance(sourceCurrencySymbol).then((balance: any) => {\r\n          if (balance === null) {\r\n            return;\r\n          }\r\n          dispatch(\r\n            addOrUpdateBalance({\r\n              symbol: currencySymbol,\r\n              balance,\r\n            })\r\n          );\r\n        });\r\n      }\r\n    },\r\n    1000,\r\n    [dispatch, fetchAssetBalance, walletConnected]\r\n  );\r\n};\r\n\r\nexport const getAssetBalance = (\r\n  balances: Array<AssetBalance>,\r\n  symbol: BridgeCurrency\r\n) => {\r\n  const balanceEntry = balances.find((entry) => entry.symbol === symbol);\r\n  return balanceEntry?.balance;\r\n};\r\n","import {\r\n  Box,\r\n  ListSubheader,\r\n  MenuItem,\r\n  Select,\r\n  SelectProps,\r\n  styled,\r\n  Typography,\r\n} from \"@material-ui/core\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport React, { FunctionComponent, useMemo } from \"react\";\r\nimport { AssetBalance } from \"../../features/wallet/walletSlice\";\r\nimport { getAssetBalance } from \"../../features/wallet/walletUtils\";\r\nimport {\r\n  BridgeChain,\r\n  BridgeChainConfig,\r\n  BridgeCurrency,\r\n  chainsConfig,\r\n  currenciesConfig,\r\n  CurrencyConfig,\r\n} from \"../../utils/assetConfigs\";\r\nimport { NumberFormatText } from \"../formatting/NumberFormatText\";\r\nimport { EmptyCircleIcon } from \"../icons/RenIcons\";\r\n\r\nconst getOptions = (mode: AssetDropdownMode) => {\r\n  const options =\r\n    mode === \"chain\"\r\n      ? Object.values(chainsConfig)\r\n      : Object.values(currenciesConfig);\r\n  return options as Array<BridgeChainConfig | CurrencyConfig>;\r\n};\r\n\r\nconst getOptionBySymbol = (symbol: string, mode: AssetDropdownMode) =>\r\n  getOptions(mode).find((option) => option.symbol === symbol);\r\n\r\nconst createAvailabilityFilter = (available: Array<string> | undefined) => (\r\n  option: BridgeChainConfig | CurrencyConfig\r\n) => {\r\n  if (!available) {\r\n    return true;\r\n  }\r\n  return available.includes(option.symbol);\r\n};\r\n\r\nconst iconStyles = {\r\n  width: 32,\r\n  height: 32,\r\n};\r\n\r\nconst useCondensedSelectStyles = makeStyles(() => ({\r\n  select: {\r\n    paddingTop: 4,\r\n    paddingBottom: 4,\r\n  },\r\n}));\r\n\r\nconst useAssetDropdownStyles = makeStyles((theme) => ({\r\n  root: {\r\n    width: \"100%\",\r\n    borderRadius: theme.shape.borderRadius,\r\n    border: `1px solid ${theme.customColors.grayLight}`,\r\n  },\r\n  inputRoot: {\r\n    width: \"100%\",\r\n  },\r\n  supplementalText: {\r\n    fontSize: 12,\r\n  },\r\n  iconWrapper: {\r\n    display: \"inline-flex\",\r\n    justifyContent: \"center\",\r\n    alignItems: \"center\",\r\n  },\r\n  listIcon: iconStyles,\r\n  assetName: {\r\n    fontSize: 13,\r\n  },\r\n  assetFullName: {\r\n    fontSize: 11,\r\n  },\r\n  balance: {\r\n    fontSize: 12,\r\n  },\r\n  listSubheader: {\r\n    pointerEvents: \"none\",\r\n    fontSize: 10,\r\n    lineHeight: 1,\r\n  },\r\n  listSubheaderLabel: {\r\n    fontSize: 10,\r\n  },\r\n}));\r\n\r\ntype AssetDropdownMode = \"send\" | \"receive\" | \"chain\"; // TODO: remove recaive\r\n\r\ntype AssetDropdownProps = SelectProps & {\r\n  mode: AssetDropdownMode;\r\n  available?: Array<BridgeCurrency | BridgeChain>;\r\n  balances?: Array<AssetBalance>;\r\n  condensed?: boolean;\r\n  label?: string;\r\n};\r\n\r\nconst getAssetData = (\r\n  selected: BridgeChainConfig | CurrencyConfig | undefined\r\n) => {\r\n  let full = \"Select\";\r\n  let short = \"Select\";\r\n  let Icon = EmptyCircleIcon;\r\n  if (selected) {\r\n    full = selected.full;\r\n    short = selected.short;\r\n    Icon = selected.MainIcon;\r\n  }\r\n  return {\r\n    full,\r\n    short,\r\n    Icon,\r\n  };\r\n};\r\n\r\nexport const AssetDropdown: FunctionComponent<AssetDropdownProps> = ({\r\n  mode,\r\n  available,\r\n  condensed = false,\r\n  label,\r\n  balances,\r\n  ...rest\r\n}) => {\r\n  const styles = useAssetDropdownStyles();\r\n  const condensedSelectClasses = useCondensedSelectStyles();\r\n  const availabilityFilter = useMemo(\r\n    () => createAvailabilityFilter(available),\r\n    [available]\r\n  );\r\n  const valueRenderer = useMemo(\r\n    () => (value: any) => {\r\n      const selected = getOptionBySymbol(value, mode);\r\n      const { Icon, full, short } = getAssetData(selected);\r\n      return (\r\n        <Box display=\"flex\" alignItems=\"center\" width=\"100%\">\r\n          {!condensed && (\r\n            <Box width=\"37%\">\r\n              <Typography variant=\"body2\" className={styles.supplementalText}>\r\n                {label}\r\n              </Typography>\r\n            </Box>\r\n          )}\r\n          <Box width=\"45px\" display=\"flex\" alignItems=\"center\">\r\n            <Icon className={styles.listIcon} />\r\n          </Box>\r\n          <Box flexGrow={1}>\r\n            <Typography variant=\"body2\">\r\n              {selected && mode === \"chain\" ? full : full}\r\n            </Typography>\r\n          </Box>\r\n        </Box>\r\n      );\r\n    },\r\n    [mode, styles, label, condensed]\r\n  );\r\n  return (\r\n    <div>\r\n      <Select\r\n        variant=\"outlined\"\r\n        className={condensed ? undefined : styles.inputRoot}\r\n        classes={condensed ? condensedSelectClasses : undefined}\r\n        renderValue={valueRenderer}\r\n        displayEmpty\r\n        MenuProps={{\r\n          anchorOrigin: {\r\n            vertical: \"bottom\",\r\n            horizontal: \"left\",\r\n          },\r\n          getContentAnchorEl: null,\r\n        }}\r\n        {...rest}\r\n      >\r\n        <ListSubheader className={styles.listSubheader}>\r\n          <Box display=\"flex\" alignItems=\"center\" width=\"100%\">\r\n            <Box width=\"45px\" />\r\n            <Box flexGrow={1}>\r\n              <Typography\r\n                variant=\"overline\"\r\n                className={styles.listSubheaderLabel}\r\n              >\r\n                {mode === \"chain\" ? \"Blockchain\" : \"Asset\"}\r\n              </Typography>\r\n            </Box>\r\n            {balances && balances.length > 0 && (\r\n              <Box flexGrow={1} textAlign=\"right\">\r\n                <Typography\r\n                  variant=\"overline\"\r\n                  className={styles.listSubheaderLabel}\r\n                >\r\n                  Your Balance\r\n                </Typography>\r\n              </Box>\r\n            )}\r\n          </Box>\r\n        </ListSubheader>\r\n        {getOptions(mode)\r\n          .filter(availabilityFilter)\r\n          .map(({ symbol, MainIcon, GreyIcon, full, short }) => {\r\n            return (\r\n              <MenuItem key={symbol} value={symbol}>\r\n                <Box display=\"flex\" alignItems=\"center\" width=\"100%\">\r\n                  <Box width=\"45px\" className={styles.iconWrapper}>\r\n                    <MainIcon className={styles.listIcon} />\r\n                  </Box>\r\n                  <Box flexGrow={1}>\r\n                    <Typography variant=\"body1\" className={styles.assetName}>\r\n                      {mode === \"chain\" ? full : short}\r\n                    </Typography>\r\n                    {mode !== \"chain\" && (\r\n                      <Typography\r\n                        color=\"textSecondary\"\r\n                        className={styles.assetFullName}\r\n                      >\r\n                        {full}\r\n                      </Typography>\r\n                    )}\r\n                  </Box>\r\n                  {balances && (\r\n                    <Box\r\n                      flexGrow={1}\r\n                      textAlign=\"right\"\r\n                      className={styles.balance}\r\n                    >\r\n                      <NumberFormatText\r\n                        value={getAssetBalance(\r\n                          balances,\r\n                          symbol as BridgeCurrency\r\n                        )}\r\n                      />\r\n                    </Box>\r\n                  )}\r\n                </Box>\r\n              </MenuItem>\r\n            );\r\n          })}\r\n      </Select>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport const AssetDropdownWrapper = styled(\"div\")({\r\n  marginTop: 10,\r\n});\r\n","import { DialogContent, Divider, Typography, Box,\r\n  Button,\r\n  TextField,\r\n  makeStyles, } from '@material-ui/core'\r\nimport React, { FunctionComponent, useCallback, useState } from 'react'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { Link } from '../../../components/links/Links'\r\nimport {getDepositAddress, getKeySignatures, getTransactionN, pkshToAddress, SignatureMessage, strToSatoshi, VoutViktor} from \"../../../services/bridge\"\r\n\r\nimport {\r\n  ActionButton,\r\n  ActionButtonWrapper,\r\n  ActionButtonWrapperGapped,\r\n} from '../../../components/buttons/Buttons'\r\nimport {\r\n  AssetDropdown,\r\n  AssetDropdownWrapper,\r\n} from '../../../components/dropdowns/AssetDropdown'\r\nimport { NumberFormatText } from '../../../components/formatting/NumberFormatText'\r\nimport {\r\n  BigCurrencyInput,\r\n  BigCurrencyInputWrapper,\r\n} from '../../../components/inputs/BigCurrencyInput'\r\nimport { PaperContent } from '../../../components/layout/Paper'\r\nimport { CenteredProgress, ProgressWithContent, ProgressWrapper } from '../../../components/progress/ProgressHelpers'\r\nimport { TooltipWithIcon } from '../../../components/tooltips/TooltipWithIcon'\r\nimport { AssetInfo } from '../../../components/typography/TypographyHelpers'\r\nimport {\r\n  getCurrencyConfig,\r\n  supportedLockCurrencies,\r\n  supportedMintDestinationChains,\r\n  toMintedCurrency,\r\n} from '../../../utils/assetConfigs'\r\nimport { useFetchFees } from '../../fees/feesHooks'\r\nimport { getTransactionFees } from '../../fees/feesUtils'\r\nimport { useRenNetworkTracker } from '../../transactions/transactionsHooks'\r\nimport {\r\n  isMinimalAmount,\r\n  TxConfigurationStepProps,\r\n  TxType,\r\n} from '../../transactions/transactionsUtils'\r\nimport { useRedeem, useSelectedChainWallet } from '../../wallet/walletHooks'\r\nimport {\r\n  $wallet,\r\n  setChain,\r\n  setWalletPickerOpened,\r\n} from '../../wallet/walletSlice'\r\nimport {\r\n  $mint,\r\n  setMintCurrency,\r\n} from '../mintSlice'\r\nimport { WalletPickerProps } from '@renproject/multiwallet-ui'\r\nimport { BridgeModal, BridgeModalTitle } from '../../../components/modals/BridgeModal'\r\nimport { DebugComponentProps } from '../../../components/utils/Debug'\r\nimport { Alert } from '@material-ui/lab'\r\nimport { $renNetwork } from \"../../network/networkSlice\";\r\n\r\n\r\nexport const MintInitialStep: FunctionComponent<TxConfigurationStepProps> = ({\r\n  onNext,\r\n}) => {\r\n  const dispatch = useDispatch();\r\n\r\n  const { currency } = useSelector($mint);\r\n  const { chain } = useSelector($wallet);\r\n  const { status, walletConnected, account } = useSelectedChainWallet();\r\n  const {getSignatures} = useRedeem()\r\n  const [recoverOpened, setRecoverOpened] = useState(false);\r\n  const [recoverTxId, setRecoverTxId] = useState(\"\");\r\n  const [recoverTarget, setRecoverTarget] = useState(\"\");\r\n  const [recoverError, setRecoverError] = useState(\"\");\r\n  const [recoverGood, setRecoverGood] = useState(\"\");\r\n  const [recoverProcessing, setRecoverProcessing] = useState(false);\r\n  const [signatures, setSignatures] = useState(null)\r\n  const [nnn, setNnn] = useState<VoutViktor>({})\r\n  const handleRecover = useCallback((e) => {\r\n    setRecoverError(\"\");\r\n    setRecoverGood(\"\");\r\n    setSignatures(null)\r\n    setRecoverProcessing(false);\r\n    setRecoverOpened(true);\r\n    e.preventDefault();\r\n  }, []);\r\n  const handleRecoverClose = useCallback(() => {\r\n    setRecoverOpened(false);\r\n  }, []);\r\n \r\n\r\n  const handleCurrencyChange = useCallback(\r\n    (event) => {\r\n      dispatch(setMintCurrency(event.target.value));\r\n    },\r\n    [dispatch]\r\n  );\r\n  const handleChainChange = useCallback(\r\n    (event) => {\r\n      dispatch(setChain(event.target.value));\r\n    },\r\n    [dispatch]\r\n  );\r\n\r\n  const renCurrency = toMintedCurrency(currency);\r\n  useRenNetworkTracker(renCurrency);\r\n\r\n  const enabled = true;\r\n\r\n  const handleNextStep = useCallback(() => {\r\n    if (!walletConnected) {\r\n      dispatch(setWalletPickerOpened(true));\r\n    } else {\r\n      if (onNext && enabled) {\r\n        onNext();\r\n      }\r\n    }\r\n  }, [dispatch, onNext, walletConnected, enabled]);\r\n\r\n  const handleRecoverFinal = useCallback(async () => {\r\n    console.log(\"Submitting via Wallet Provider\")\r\n    const siggy = signatures as any\r\n\r\n    if(siggy['signatures'] == undefined) {\r\n      setRecoverError(\"Signature Object seems bad\")\r\n      console.log(siggy)\r\n      return;\r\n    }\r\n    const r = '0x' + siggy['signatures'][0]['r'].padStart(64,\"0\") || ''\r\n    const s = '0x' + siggy['signatures'][0]['s'].padStart(64,\"0\") || ''\r\n    const v = siggy['signatures'][0]['recovery_id']==\"00\" ? 0 : 1\r\n    // toto more  assets source asset\r\n    let res: any = await getSignatures(recoverTarget, recoverTxId, (nnn as VoutViktor).n || 0, strToSatoshi((nnn as VoutViktor).satoshi  || \"0\"), \"DFI\", r, s, v + 27)\r\n    if(res.err!==null && res.err?.code != 0) {\r\n      setRecoverError(res.err?.message)\r\n      console.log(siggy)\r\n      return;\r\n    }else{\r\n      setRecoverGood(res.result)\r\n    }\r\n  },[account, chain, recoverTarget, recoverTxId, signatures, nnn])\r\n\r\n  const handleRecoverNext = useCallback(async () => {\r\n    setRecoverError(\"\") \r\n    setRecoverGood(\"\")\r\n      setRecoverProcessing(true);\r\n      try {\r\n        console.log(\"recover on chain:\", chain.toString()==\"BSCC\" ? \"binance\" : \"ethereum\")\r\n\r\n        \r\n        const jsonObj = await getDepositAddress(recoverTarget, chain.toString()==\"BSCC\" ? \"binance\" : \"ethereum\");\r\n        console.log(\"deposit address was:\", jsonObj.result)\r\n        // check if transaction id exists\r\n        getTransactionN(jsonObj.result || \"\", recoverTxId).then(n => {\r\n          console.log(\"found n:\", n)\r\n          setNnn((n as VoutViktor))\r\n          console.log(\"SATOS:\", strToSatoshi((n as VoutViktor).satoshi || \"0\"))\r\n          // check if we already have a finished (or can finish) the signature for that?\r\n          const sign = getKeySignatures(recoverTarget, recoverTxId, (n as VoutViktor).n || 0, chain.toString()==\"BSCC\" ? \"binance\" : \"ethereum\");\r\n          sign.then(signmsg => {\r\n            console.log(signmsg)\r\n            if (signmsg.status == 1){\r\n              setSignatures(signmsg as any)\r\n              // all good man, its recovered\r\n            }else{\r\n              // nah, brother, didnt work\r\n              setRecoverError(signmsg?.blame?.fail_reason || \"Unknown Error\")\r\n              setRecoverProcessing(false);\r\n              return\r\n            }\r\n          }).catch(reason => {\r\n              // some other issue here\r\n            setRecoverError(reason)\r\n            setRecoverProcessing(false);\r\n            return\r\n          })\r\n\r\n          // if not \"wait for confirmations\"\r\n\r\n        }).catch((reason) => {\r\n          setRecoverError(reason)\r\n          setRecoverProcessing(false);\r\n          return\r\n        })\r\n      }\r\n      catch(e) {\r\n        setRecoverError(e.toString())\r\n        setRecoverProcessing(false);\r\n      }\r\n  }, [account, recoverTarget, chain, recoverTxId, nnn]);\r\n\r\n  const mintedCurrencySymbol = toMintedCurrency(currency);\r\n  const mintedCurrencyConfig = getCurrencyConfig(mintedCurrencySymbol);\r\n  const { GreyIcon } = mintedCurrencyConfig;\r\n\r\n  const useStyles = makeStyles((theme) => ({\r\n    root: {\r\n      \"& .MuiInputBase-input\": {\r\n        background: \"rgb(232, 241, 250)\"\r\n      }\r\n    }\r\n  }));\r\n  const classes = useStyles()\r\n\r\n  \r\n  return (\r\n    <>\r\n      <PaperContent bottomPadding>\r\n        <AssetDropdownWrapper>\r\n          <AssetDropdown\r\n            label=\"Send\"\r\n            mode=\"send\"\r\n            available={supportedLockCurrencies}\r\n            value={currency}\r\n            onChange={handleCurrencyChange}\r\n          />\r\n        </AssetDropdownWrapper>\r\n        <AssetDropdownWrapper>\r\n          <AssetDropdown\r\n            label=\"Destination\"\r\n            mode=\"chain\"\r\n            available={supportedMintDestinationChains}\r\n            value={chain}\r\n            onChange={handleChainChange}\r\n          />\r\n        </AssetDropdownWrapper>\r\n      </PaperContent>\r\n      <Divider />\r\n      <PaperContent darker topPadding bottomPadding>         \r\n        <ActionButtonWrapper>\r\n          <ActionButton\r\n            onClick={handleNextStep}\r\n            disabled={walletConnected ? !enabled : false}\r\n          >\r\n            {walletConnected ? \"Next\" : \"Connect Wallet\"}\r\n          </ActionButton>\r\n        </ActionButtonWrapper>\r\n        <Typography\r\n          variant=\"subtitle2\"\r\n          align=\"center\"\r\n          color=\"textSecondary\"\r\n          gutterBottom\r\n        >\r\n        {walletConnected ? <Link href={'#'} onClick={handleRecover} color='textSecondary'>\r\n            Click here to recover an incomplete transaction\r\n        </Link> : \"\"}\r\n        </Typography>\r\n      </PaperContent>\r\n      <BridgeModal\r\n        open={recoverOpened}\r\n        title=\"Recovery\"\r\n        onClose={handleRecoverClose}\r\n      >\r\n      <DialogContent>\r\n          {recoverError!=\"\" ? <Box mb={2}><Alert severity=\"error\">{recoverError}</Alert></Box> : \"\"}\r\n          {recoverGood!=\"\" ? <Box mb={2}><Alert severity=\"success\">{recoverGood}</Alert></Box> : \"\"}\r\n          <Typography variant=\"h5\" align=\"center\" gutterBottom>\r\n            Transaction Recovery\r\n          </Typography>\r\n          <Typography variant=\"body2\" align=\"center\" gutterBottom>\r\n            If your transaction has got stuck, you can recover the last state by specifying the Defichain transaction id for your deposit. After clicking the recovery button, the last state of your deposit+mint transaction will be recovered.\r\n          </Typography>\r\n          {signatures == null ? <>\r\n          <Box mt={3} alignItems=\"center\" justifyContent=\"center\" display=\"flex\" >\r\n          <TextField autoFocus className={classes.root} style ={{width: '60%'}} \r\n            label=\"Enter your Defichain TxID\"\r\n            onChange={(e) => {\r\n              setRecoverTxId(e.target.value);\r\n            }}\r\n          />\r\n          </Box>\r\n          <Box mt={3} alignItems=\"center\" justifyContent=\"center\" display=\"flex\" >\r\n          <TextField autoFocus className={classes.root} style ={{width: '60%'}} \r\n            label=\"Enter your ERC20 target address\"\r\n            onChange={(e) => {\r\n              setRecoverTarget(e.target.value.toLowerCase());\r\n            }}\r\n          />\r\n          </Box>\r\n          <Box mt={5} alignItems=\"center\" justifyContent=\"center\" display=\"flex\" >\r\n             <ActionButton disabled={recoverProcessing} onClick={handleRecoverNext}>{!recoverProcessing ? \"Recover\" : \"Wait ... might take some time.\"}</ActionButton>\r\n          </Box></>\r\n          : <><Box mt={5} alignItems=\"center\" justifyContent=\"center\" display=\"flex\" >\r\n          <ActionButton color=\"secondary\" onClick={handleRecoverFinal}>Click here to mint on {chain.toString()==\"BSCC\" ? \"Binance\" : \"Ethereum\"}</ActionButton>\r\n       </Box></>}\r\n\r\n      </DialogContent>\r\n      </BridgeModal>\r\n      \r\n    </>\r\n  );\r\n};\r\n","import {\r\n  Button,\r\n  ButtonProps,\r\n  Theme,\r\n  Typography,\r\n  useTheme,\r\n} from \"@material-ui/core\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport AccountBalanceWalletIcon from \"@material-ui/icons/AccountBalanceWallet\";\r\nimport { WalletPickerProps } from \"@renproject/multiwallet-ui\";\r\nimport classNames from \"classnames\";\r\nimport React, { FunctionComponent, useCallback } from \"react\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport { useTimeout } from \"react-use\";\r\nimport { links } from \"../../constants/constants\";\r\nimport { useSubNetworkName } from \"../../features/ui/uiHooks\";\r\nimport { setWalletPickerOpened } from \"../../features/wallet/walletSlice\";\r\nimport { createPulseAnimation } from \"../../theme/animationUtils\";\r\nimport { defaultShadow } from \"../../theme/other\";\r\nimport { useAddBsc } from \"../../features/wallet/walletHooks\"\r\nimport {\r\n  BridgeChainConfig,\r\n  BridgeWallet,\r\n  BridgeWalletConfig,\r\n  getChainConfigByRentxName,\r\n  getNetworkConfigByRentxName,\r\n  getWalletConfig,\r\n  getWalletConfigByRentxName,\r\n} from \"../../utils/assetConfigs\";\r\nimport { trimAddress } from \"../../utils/strings\";\r\nimport { ActionButton, ActionButtonWrapper, ActionButtonWrapperGapped } from \"../buttons/Buttons\";\r\nimport { WalletIcon } from \"../icons/RenIcons\";\r\nimport { PaperContent, SpacedPaperContent } from \"../layout/Paper\";\r\nimport { Link } from \"../links/Links\";\r\nimport { BridgeModalTitle } from \"../modals/BridgeModal\";\r\nimport {\r\n  ProgressWithContent,\r\n  ProgressWrapper,\r\n} from \"../progress/ProgressHelpers\";\r\nimport { Debug, DebugComponentProps } from \"../utils/Debug\";\r\nimport { WalletConnectionStatusType, WalletStatus } from \"../utils/types\";\r\n\r\nexport const useWalletPickerStyles = makeStyles((theme) => ({\r\n  root: {\r\n    width: 400,\r\n  },\r\n  body: {\r\n    padding: 24,\r\n  },\r\n  header: {\r\n    display: \"flex\",\r\n    justifyContent: \"space-between\",\r\n    alignItems: \"stretch\",\r\n    borderBottom: `1px solid ${theme.palette.divider}`,\r\n    padding: `16px 16px 14px`,\r\n  },\r\n  headerTitle: {\r\n    flexGrow: 2,\r\n    paddingLeft: 16,\r\n    textAlign: \"center\",\r\n    lineHeight: 2,\r\n  },\r\n  headerCloseIcon: {\r\n    fontSize: 16,\r\n  },\r\n  button: {\r\n    border: `1px solid ${theme.palette.divider}`,\r\n  },\r\n  chainTitle: {\r\n    textTransform: \"capitalize\",\r\n    fontSize: 14,\r\n  },\r\n}));\r\n\r\nconst useWalletEntryButtonStyles = makeStyles({\r\n  root: {\r\n    marginTop: 20,\r\n    fontSize: 16,\r\n    padding: \"11px 20px 11px 20px\",\r\n  },\r\n  label: {\r\n    display: \"flex\",\r\n    justifyContent: \"space-between\",\r\n    alignContent: \"center\",\r\n  },\r\n  icon: {\r\n    fontSize: 36,\r\n    display: \"inline-flex\",\r\n  },\r\n});\r\n\r\nexport const WalletEntryButton: WalletPickerProps<\r\n  any,\r\n  any\r\n>[\"WalletEntryButton\"] = ({ onClick, name, logo }) => {\r\n  const { icon: iconClassName, ...classes } = useWalletEntryButtonStyles();\r\n  const walletConfig = getWalletConfigByRentxName(name);\r\n  const { MainIcon } = walletConfig;\r\n  return (\r\n    <Button\r\n      classes={classes}\r\n      variant=\"outlined\"\r\n      size=\"large\"\r\n      fullWidth\r\n      onClick={onClick}\r\n    >\r\n      <span>{walletConfig.full}</span>{\" \"}\r\n      <span className={iconClassName}>\r\n        <MainIcon fontSize=\"inherit\" />\r\n      </span>\r\n    </Button>\r\n  );\r\n};\r\n\r\nexport const WalletChainLabel: WalletPickerProps<\r\n  any,\r\n  any\r\n>[\"WalletChainLabel\"] = ({ chain }) => {\r\n  const chainConfig = getChainConfigByRentxName(chain);\r\n  return <span>{chainConfig.full}</span>;\r\n};\r\n\r\nconst getLabels = (\r\n  chainConfig: BridgeChainConfig,\r\n  walletConfig: BridgeWalletConfig\r\n) => {\r\n  return {\r\n    initialTitle: \"Connecting\",\r\n    actionTitle: `${walletConfig.short} action required`,\r\n    initialMessage: `Connecting to ${chainConfig.full}`,\r\n    actionMessage: `When prompted, connect securely via the ${walletConfig.full} browser extension.`,\r\n  };\r\n};\r\n\r\nexport const WalletConnectingInfo: WalletPickerProps<\r\n  any,\r\n  any\r\n>[\"ConnectingInfo\"] = ({ chain, onClose }) => {\r\n  const theme = useTheme();\r\n  const chainConfig = getChainConfigByRentxName(chain);\r\n\r\n  // TODO: There should be better mapping.\r\n  const walletSymbol =\r\n    chain === \"ethereum\" ? BridgeWallet.METAMASKW : BridgeWallet.BINANCESMARTW;\r\n  const walletConfig = getWalletConfig(walletSymbol);\r\n\r\n  const labels = getLabels(chainConfig, walletConfig);\r\n  const { MainIcon } = walletConfig;\r\n  const [isPassed] = useTimeout(3000);\r\n  const passed = isPassed();\r\n  return (\r\n    <>\r\n      <Debug it={{ chainConfig }} />\r\n      <BridgeModalTitle\r\n        title={passed ? labels.actionTitle : labels.initialTitle}\r\n        onClose={onClose}\r\n      />\r\n      <PaperContent bottomPadding>\r\n        <ProgressWrapper>\r\n          <ProgressWithContent\r\n            size={128}\r\n            color={theme.customColors.skyBlueLight}\r\n            fontSize=\"big\"\r\n            processing\r\n          >\r\n            <MainIcon fontSize=\"inherit\" />\r\n          </ProgressWithContent>\r\n        </ProgressWrapper>\r\n        <Typography variant=\"h6\" align=\"center\">\r\n          {passed ? labels.actionMessage : labels.initialMessage}\r\n        </Typography>\r\n      </PaperContent>\r\n    </>\r\n  );\r\n};\r\n\r\nconst useWalletConnectionProgressStyles = makeStyles((theme) => ({\r\n  iconWrapper: {\r\n    padding: 13,\r\n    backgroundColor: theme.palette.divider,\r\n    display: \"flex\",\r\n    justifyContent: \"center\",\r\n    alignItems: \"center\",\r\n    fontSize: 44,\r\n  },\r\n}));\r\n\r\nexport const WalletConnectionProgress: FunctionComponent = () => {\r\n  const theme = useTheme();\r\n  const styles = useWalletConnectionProgressStyles();\r\n  return (\r\n    <ProgressWithContent color={theme.customColors.redLighter} size={128}>\r\n      <div className={styles.iconWrapper}>\r\n        <WalletIcon fontSize=\"inherit\" color=\"secondary\" />\r\n      </div>\r\n    </ProgressWithContent>\r\n  );\r\n};\r\n\r\nexport const WalletWrongNetworkInfo: WalletPickerProps<\r\n  any,\r\n  any\r\n>[\"WrongNetworkInfo\"] = (props) => {\r\n  const { chain, targetNetwork, onClose } = props;\r\n  const theme = useTheme();\r\n  const subNetworkName = useSubNetworkName();\r\n  const chainName = getChainConfigByRentxName(chain).full;\r\n  const networkName = getNetworkConfigByRentxName(targetNetwork).full;\r\n  const {updateBsc} = useAddBsc(\"BSC\");\r\n  const {updateBsc : updateEth} = useAddBsc(\"Ethereum\");\r\n  const AddBscMetamask = async() => {\r\n    if (chainName==\"Ethereum\") {\r\n      const ret = await updateEth()\r\n      console.log(ret)\r\n    }else{\r\n      const ret = await updateBsc()\r\n      console.log(ret)\r\n    }\r\n    return true\r\n  }\r\n  return (\r\n    <>\r\n      <DebugComponentProps {...props} />\r\n      <BridgeModalTitle title=\"Wrong Network\" onClose={onClose} />\r\n      <PaperContent bottomPadding>\r\n        <ProgressWrapper>\r\n          <ProgressWithContent\r\n            size={128}\r\n            color={theme.customColors.redLighter}\r\n            fontSize=\"big\"\r\n          >\r\n            <AccountBalanceWalletIcon fontSize=\"inherit\" color=\"secondary\" />\r\n          </ProgressWithContent>\r\n        </ProgressWrapper>\r\n        <Typography variant=\"h5\" align=\"center\" gutterBottom>\r\n          Switch to {chainName} {networkName}\r\n          {subNetworkName && <span> ({subNetworkName})</span>}\r\n        </Typography>\r\n        <Typography variant=\"body1\" align=\"center\" color=\"textSecondary\">\r\n          Defichain-Bridge requires you to connect to the {chainName} {networkName}{\" \"}\r\n          {subNetworkName}\r\n        </Typography>\r\n        <ActionButtonWrapperGapped>\r\n          <ActionButton onClick={AddBscMetamask}>\r\n            Switch Metamask to {chainName}\r\n          </ActionButton>\r\n        </ActionButtonWrapperGapped>\r\n      </PaperContent>\r\n    </>\r\n  );\r\n};\r\n\r\nconst createIndicatorClass = (className: string, color: string) => {\r\n  const { pulsingStyles, pulsingKeyframes } = createPulseAnimation(\r\n    color,\r\n    3,\r\n    className\r\n  );\r\n\r\n  return {\r\n    ...pulsingKeyframes,\r\n    [className]: {\r\n      ...pulsingStyles,\r\n      backgroundColor: color,\r\n    },\r\n  };\r\n};\r\n\r\ntype WalletConnectionIndicatorStyles = Record<\r\n  \"root\" | \"connected\" | \"disconnected\" | \"wrongNetwork\" | \"connecting\",\r\n  string\r\n>;\r\nconst useWalletConnectionIndicatorStyles = makeStyles((theme) => {\r\n  return {\r\n    root: {\r\n      width: 8,\r\n      height: 8,\r\n      borderRadius: 4,\r\n      backgroundColor: theme.palette.divider,\r\n    },\r\n    ...createIndicatorClass(\"connected\", theme.palette.success.main),\r\n    ...createIndicatorClass(\"disconnected\", theme.palette.error.main),\r\n    ...createIndicatorClass(\"connecting\", theme.palette.info.main),\r\n    ...createIndicatorClass(\"wrongNetwork\", theme.palette.warning.main),\r\n  };\r\n});\r\n\r\ntype WalletConnectionIndicatorProps = {\r\n  status?: WalletConnectionStatusType;\r\n  className?: string; // TODO: find a better way\r\n};\r\n\r\nexport const WalletConnectionIndicator: FunctionComponent<WalletConnectionIndicatorProps> = ({\r\n  status,\r\n  className: classNameProp,\r\n}) => {\r\n  const styles = useWalletConnectionIndicatorStyles() as WalletConnectionIndicatorStyles;\r\n  const className = classNames(styles.root, classNameProp, {\r\n    [styles.connected]: status === WalletStatus.CONNECTED,\r\n    [styles.wrongNetwork]: status === WalletStatus.WRONG_NETWORK,\r\n    [styles.disconnected]: status === WalletStatus.DISCONNECTED,\r\n    [styles.connecting]: status === WalletStatus.CONNECTING,\r\n  });\r\n  return <div className={className} />;\r\n};\r\n\r\nconst getWalletConnectionLabel = (status: WalletConnectionStatusType) => {\r\n  switch (status) {\r\n    case \"disconnected\":\r\n      return \"Connect a Wallet\";\r\n    case \"connecting\":\r\n      return \"Connecting...\";\r\n    case \"connected\":\r\n      return \"Connected\";\r\n    case \"wrong_network\":\r\n      return \"Wrong Network!\";\r\n  }\r\n};\r\n\r\nconst useWalletConnectionStatusButtonStyles = makeStyles<Theme>((theme) => ({\r\n  root: {\r\n    backgroundColor: theme.palette.common.white,\r\n    borderColor: theme.palette.divider,\r\n    boxShadow: defaultShadow,\r\n    \"&:hover\": {\r\n      borderColor: theme.palette.divider,\r\n      backgroundColor: theme.palette.divider,\r\n    },\r\n  },\r\n  hoisted: {\r\n    zIndex: theme.zIndex.tooltip,\r\n  },\r\n  indicator: {\r\n    marginRight: 10,\r\n  },\r\n  indicatorMobile: {\r\n    marginLeft: 16,\r\n    marginRight: 30,\r\n  },\r\n  account: { marginLeft: 20 },\r\n}));\r\n\r\ntype WalletConnectionStatusButtonProps = ButtonProps & {\r\n  status: WalletConnectionStatusType;\r\n  wallet: BridgeWallet;\r\n  hoisted?: boolean;\r\n  account?: string;\r\n  mobile?: boolean;\r\n};\r\n\r\nexport const WalletConnectionStatusButton: FunctionComponent<WalletConnectionStatusButtonProps> = ({\r\n  status,\r\n  account,\r\n  wallet,\r\n  hoisted,\r\n  className,\r\n  mobile,\r\n  ...rest\r\n}) => {\r\n  const {\r\n    indicator: indicatorClassName,\r\n    indicatorMobile: indicatorMobileClassName,\r\n    account: accountClassName,\r\n    hoisted: hoistedClassName,\r\n    ...classes\r\n  } = useWalletConnectionStatusButtonStyles();\r\n\r\n  const label =\r\n    status === WalletStatus.CONNECTED\r\n      ? getWalletConfig(wallet).short\r\n      : getWalletConnectionLabel(status);\r\n  const trimmedAddress = trimAddress(account);\r\n  const resolvedClassName = classNames(className, {\r\n    [hoistedClassName]: hoisted,\r\n  });\r\n  const buttonProps: any = mobile\r\n    ? {}\r\n    : {\r\n        variant: \"outlined\",\r\n        color: \"secondary\",\r\n        classes,\r\n      };\r\n  return (\r\n    <>\r\n    <Button className={resolvedClassName} {...buttonProps} {...rest}>\r\n      <WalletConnectionIndicator\r\n        status={status}\r\n        className={mobile ? indicatorMobileClassName : indicatorClassName}\r\n      />\r\n      <span>{label}</span>\r\n      {trimmedAddress && (\r\n        <span className={accountClassName}>{trimmedAddress}</span>\r\n      )}\r\n    </Button>\r\n    </>\r\n  );\r\n};\r\n\r\nconst useResetWalletPicker = (onClose: () => void) => {\r\n  //TODO: not very elegant solution, Dialog should be extended with onBack/onPrev action\r\n  const dispatch = useDispatch();\r\n  const handleBackToWalletPicker = useCallback(() => {\r\n    onClose();\r\n    setTimeout(() => {\r\n      dispatch(setWalletPickerOpened(true));\r\n    }, 1);\r\n  }, [dispatch, onClose]);\r\n  return { handleBackToWalletPicker };\r\n};\r\n\r\n\r\nexport const BinanceConnectorInfo: WalletPickerProps<\r\n  any,\r\n  any\r\n>[\"DefaultInfo\"] = ({ acknowledge, onClose }) => {\r\n  const { handleBackToWalletPicker } = useResetWalletPicker(onClose);\r\n  return (\r\n    <>\r\n      <BridgeModalTitle\r\n        title=\" \"\r\n        onClose={onClose}\r\n        onPrev={handleBackToWalletPicker}\r\n      />\r\n      <SpacedPaperContent topPadding bottomPadding>\r\n        <Typography variant=\"h5\" align=\"center\" gutterBottom>\r\n          BSC Wallet\r\n        </Typography>\r\n        <Typography\r\n          variant=\"body1\"\r\n          align=\"center\"\r\n          color=\"textSecondary\"\r\n          gutterBottom\r\n        >\r\n          Some users experience issues with Binance Smart Wallet. We suggest you\r\n          connect to BSC via MetaMask instead. If you have already started a\r\n          transaction with Binance Smart Wallet, please use the support form{\" \"}\r\n          <Link href={links.BUGS_LOG} external>\r\n            here\r\n          </Link>{\" \"}\r\n          if you are experiencing issues.\r\n        </Typography>\r\n      </SpacedPaperContent>\r\n      <PaperContent bottomPadding>\r\n        <ActionButtonWrapper>\r\n          <Button\r\n            variant=\"text\"\r\n            color=\"primary\"\r\n            onClick={handleBackToWalletPicker}\r\n          >\r\n            Use another wallet\r\n          </Button>\r\n        </ActionButtonWrapper>\r\n        <ActionButtonWrapper>\r\n          <ActionButton onClick={acknowledge}>\r\n            Continue with Binance Smart Wallet\r\n          </ActionButton>\r\n        </ActionButtonWrapper>\r\n      </PaperContent>\r\n    </>\r\n  );\r\n};\r\n","import { useCallback, useState } from \"react\";\r\n\r\nexport const useBrowserNotifications = (onEnabled = () => {}) => {\r\n  let enabled = false;\r\n  if ((window as any).Notification) {\r\n    enabled = Notification.permission === \"granted\";\r\n  }\r\n\r\n  const handleEnable = useCallback(() => {\r\n    if (enabled) {\r\n      if (onEnabled) {\r\n        onEnabled();\r\n      }\r\n    } else {\r\n      Notification.requestPermission().then(() => {\r\n        if (onEnabled) {\r\n          onEnabled();\r\n        }\r\n      });\r\n    }\r\n  }, [enabled, onEnabled]);\r\n\r\n  const showBrowserNotification = useCallback((message) => {\r\n    if ((window as any).Notification) {\r\n      const notification = new Notification(message);\r\n      notification.onclick = () => {\r\n        // window.open(location.href); // TODO: TBD: redirect here?\r\n      };\r\n    }\r\n  }, []);\r\n\r\n  return {\r\n    enabled,\r\n    handleEnable,\r\n    Notification,\r\n    showBrowserNotification,\r\n  };\r\n};\r\n\r\nexport const useBrowserNotificationsConfirmation = () => {\r\n  const { enabled } = useBrowserNotifications();\r\n  const [modalOpened, setModalOpened] = useState(false);\r\n  const [tooltipOpened, setTooltipOpened] = useState(false);\r\n\r\n  const handleTooltipClose = useCallback(() => {\r\n    setTooltipOpened(false);\r\n  }, []);\r\n\r\n  const handleModalOpen = useCallback(() => {\r\n    if (!enabled) {\r\n      setModalOpened(true);\r\n    } else {\r\n      setTooltipOpened(!tooltipOpened);\r\n    }\r\n  }, [enabled, tooltipOpened]);\r\n\r\n  const handleModalClose = useCallback(() => {\r\n    setModalOpened(false);\r\n  }, []);\r\n\r\n  return {\r\n    modalOpened,\r\n    handleModalOpen,\r\n    handleModalClose,\r\n    tooltipOpened,\r\n    handleTooltipClose,\r\n  };\r\n};\r\n","import { Box, Grow, Typography, useTheme } from \"@material-ui/core\";\r\nimport { GatewaySession } from \"@renproject/ren-tx\";\r\nimport QRCode from \"qrcode.react\";\r\nimport React, {\r\n  FunctionComponent,\r\n  useCallback,\r\n  useEffect,\r\n  useState,\r\n} from \"react\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport { useEffectOnce } from \"react-use\";\r\nimport {\r\n  ActionButton,\r\n  ActionButtonWrapper,\r\n  BigQrCode,\r\n  CopyContentButton,\r\n  QrCodeIconButton,\r\n  TransactionDetailsButton,\r\n} from \"../../../components/buttons/Buttons\";\r\nimport { NumberFormatText } from \"../../../components/formatting/NumberFormatText\";\r\nimport {\r\n  BigTopWrapper,\r\n  CenteringSpacedBox,\r\n  MediumWrapper,\r\n  SmallWrapper,\r\n} from \"../../../components/layout/LayoutHelpers\";\r\nimport { Link } from \"../../../components/links/Links\";\r\nimport {\r\n  BigDoneIcon,\r\n  ProgressWithContent,\r\n  ProgressWrapper,\r\n  TransactionStatusInfo,\r\n} from \"../../../components/progress/ProgressHelpers\";\r\nimport { BigAssetAmount } from \"../../../components/typography/TypographyHelpers\";\r\nimport { paths } from \"../../../pages/routes\";\r\nimport { useNotifications } from \"../../../providers/Notifications\";\r\nimport {\r\n  usePaperTitle,\r\n  useSetActionRequired,\r\n  useSetPaperTitle,\r\n} from \"../../../providers/TitleProviders\";\r\nimport { DepositEntry } from \"../../../services/bridge\";\r\nimport { orangeLight } from \"../../../theme/colors\";\r\nimport { getChainConfigByRentxName } from \"../../../utils/assetConfigs\";\r\nimport { trimAddress } from \"../../../utils/strings\";\r\nimport { useFetchFees } from \"../../fees/feesHooks\";\r\nimport { getTransactionFees } from \"../../fees/feesUtils\";\r\nimport { useBrowserNotifications } from \"../../notifications/notificationsUtils\";\r\nimport {\r\n  HMSCountdown,\r\n  ProcessingTimeWrapper,\r\n  SubmitErrorDialog,\r\n} from \"../../transactions/components/TransactionsHelpers\";\r\nimport { getPaymentLink, txExpirySorter, TxType } from \"../../transactions/transactionsUtils\";\r\nimport { resetMint } from \"../mintSlice\";\r\nimport { getLockAndMintParams, getRemainingGatewayTime } from \"../mintUtils\";\r\nimport { AddressValidityMessage } from \"./MintHelpers\";\r\n\r\nexport type MintDepositToProps = {\r\n  tx: GatewaySession;\r\n};\r\n\r\nexport const MintDepositToStatus: FunctionComponent<MintDepositToProps> = ({\r\n  tx,\r\n}) => {\r\n  const {\r\n    lockCurrencyConfig,\r\n    lockChainConfig,\r\n    suggestedAmount,\r\n    mintAddressLink,\r\n  } = getLockAndMintParams(tx);\r\n  const { color } = lockCurrencyConfig;\r\n  const { MainIcon } = lockChainConfig;\r\n\r\n  useSetPaperTitle(`Send ${lockChainConfig.short}`);\r\n\r\n  return (\r\n    <>\r\n      <ProgressWrapper>\r\n        <ProgressWithContent color={color || orangeLight} size={64}>\r\n          <MainIcon fontSize=\"inherit\" color=\"inherit\" />\r\n        </ProgressWithContent>\r\n      </ProgressWrapper>\r\n      <MediumWrapper>\r\n        <BigAssetAmount\r\n          value={\r\n            <span>\r\n              Send {lockCurrencyConfig.short} to\r\n            </span>\r\n          }\r\n        />\r\n      </MediumWrapper>\r\n      {tx.gatewayAddress && (\r\n        <>\r\n            <CenteringSpacedBox>\r\n              <Grow in={true}>\r\n                <BigQrCode>\r\n                  <QRCode\r\n                    value={getPaymentLink(\r\n                      lockChainConfig.symbol,\r\n                      tx.gatewayAddress,\r\n                      suggestedAmount\r\n                    )}\r\n                  />\r\n                </BigQrCode>\r\n              </Grow>\r\n            </CenteringSpacedBox>\r\n          <CopyContentButton content={tx.gatewayAddress} />\r\n        </>\r\n      )}\r\n    </>\r\n  );\r\n};\r\n\r\ntype MintDepositConfirmationStatusProps = {\r\n  tx: GatewaySession;\r\n  depositHash: string;\r\n};\r\n\r\nexport const MintDepositConfirmationStatus: FunctionComponent<MintDepositConfirmationStatusProps> = ({\r\n  tx,\r\n  depositHash,\r\n}) => {\r\n  const [, setTitle] = usePaperTitle();\r\n  let {\r\n    lockCurrencyConfig,\r\n    lockChainConfig,\r\n    lockTxHash,\r\n    lockTxLink,\r\n    lockTxAmount,\r\n    lockConfirmations,\r\n    lockTargetConfirmations,\r\n    lockProcessingTime,\r\n  } = getLockAndMintParams(tx, depositHash);\r\n\r\n  const dep: DepositEntry = tx.transactions[depositHash]\r\n  lockTxHash = depositHash\r\n  lockTxLink = \"https://defiscan.live/transactions/\" + depositHash.split(\":\")[0]\r\n  lockConfirmations = dep?.confirmations || 0\r\n  const vout = dep?.vout?.value || \"???\"\r\n  const { MainIcon } = lockChainConfig;\r\n  lockTargetConfirmations = lockChainConfig?.targetConfirmations || 0\r\n\r\n  const confirmed = lockConfirmations >= lockTargetConfirmations;\r\n  useEffect(() => {\r\n    setTitle(confirmed ? \"Confirmed\" : \"Confirming\");\r\n  }, [setTitle, confirmed]);\r\n\r\n  return (\r\n    <>\r\n      <ProgressWrapper>\r\n        <ProgressWithContent\r\n          color={lockCurrencyConfig.color || orangeLight}\r\n          confirmations={lockConfirmations}\r\n          targetConfirmations={lockTargetConfirmations}\r\n        >\r\n          <MainIcon fontSize=\"inherit\" color=\"inherit\" />\r\n        </ProgressWithContent>\r\n      </ProgressWrapper>\r\n      <SmallWrapper>\r\n        <Typography variant=\"h5\" align=\"center\">\r\n          <b>Received {vout} DFI</b>\r\n        </Typography>\r\n        <Typography variant=\"body1\" align=\"center\">\r\n          {lockConfirmations} of {lockTargetConfirmations} confirmations\r\n        </Typography>\r\n      </SmallWrapper>\r\n      <MediumWrapper>\r\n        <BigAssetAmount\r\n          value={\r\n            <NumberFormatText\r\n              value={lockTxAmount}\r\n              spacedSuffix={lockCurrencyConfig.short}\r\n            />\r\n          }\r\n        />\r\n      </MediumWrapper>\r\n      <TransactionDetailsButton\r\n        label={lockChainConfig.short}\r\n        address={lockTxHash}\r\n        link={lockTxLink}\r\n      />\r\n      \r\n    </>\r\n  );\r\n};\r\n\r\nconst maxConfirmations = (actual: number, target: number) => {\r\n  if (actual > target) {\r\n    return target;\r\n  }\r\n  return actual;\r\n};\r\n\r\ntype MintDepositAcceptedStatusProps = {\r\n  tx: GatewaySession;\r\n  onSubmit?: () => void;\r\n  onReload?: () => void;\r\n  submitting: boolean;\r\n  submittingError: boolean;\r\n  depositHash: string;\r\n};\r\n\r\nexport const MintDepositAcceptedStatus: FunctionComponent<MintDepositAcceptedStatusProps> = ({\r\n  tx,\r\n  onSubmit,\r\n  onReload,\r\n  submitting,\r\n  submittingError,\r\n  depositHash,\r\n}) => {\r\n  useSetPaperTitle(\"Submit\");\r\n  useSetActionRequired(true);\r\n  const theme = useTheme();\r\n  let {\r\n    lockCurrencyConfig,\r\n    lockChainConfig,\r\n    lockTxHash,\r\n    lockTxAmount,\r\n    lockTxLink,\r\n    lockConfirmations,\r\n    lockTargetConfirmations,\r\n    mintChainConfig,\r\n  } = getLockAndMintParams(tx, depositHash);\r\n  const dep: DepositEntry = tx.transactions[depositHash]\r\n  lockTxHash = depositHash\r\n  lockTxLink = \"https://defiscan.live/transactions/\" + depositHash.split(\":\")[0]\r\n  lockConfirmations = dep?.confirmations || 0\r\n  const vout = dep?.vout?.value || \"???\"\r\n  lockTargetConfirmations = lockChainConfig?.targetConfirmations || 0\r\n\r\n  const notificationMessage = `${lockConfirmations>lockTargetConfirmations?lockTargetConfirmations:lockConfirmations}/${lockTargetConfirmations} confirmations, ready to submit ${\r\n    lockCurrencyConfig.short\r\n  } to ${mintChainConfig.full}?`;\r\n  const { showNotification } = useNotifications();\r\n  const { showBrowserNotification } = useBrowserNotifications();\r\n  useEffectOnce(() => {\r\n    showNotification(notificationMessage);\r\n    showBrowserNotification(notificationMessage);\r\n  });\r\n\r\n  const { MainIcon } = lockChainConfig;\r\n\r\n  return (\r\n    <>\r\n      <ProgressWrapper>\r\n        {submitting ? (\r\n          <ProgressWithContent color={theme.customColors.skyBlue} processing>\r\n            <MainIcon fontSize=\"inherit\" color=\"inherit\" />\r\n          </ProgressWithContent>\r\n        ) : (\r\n          <ProgressWithContent\r\n            color={lockCurrencyConfig.color || theme.customColors.skyBlue}\r\n            confirmations={lockConfirmations}\r\n            targetConfirmations={lockTargetConfirmations}\r\n          >\r\n            <MainIcon fontSize=\"inherit\" color=\"inherit\" />\r\n          </ProgressWithContent>\r\n        )}\r\n      </ProgressWrapper>\r\n      <Typography variant=\"h5\" align=\"center\">\r\n          <b>Received {vout} DFI</b>\r\n        </Typography>\r\n      <Typography variant=\"body1\" align=\"center\" gutterBottom>\r\n        <NumberFormatText\r\n          value={lockTxAmount}\r\n          spacedSuffix={lockCurrencyConfig.full}\r\n        />{\" \"}\r\n        Received {lockConfirmations>lockTargetConfirmations?lockTargetConfirmations:lockConfirmations}/{lockTargetConfirmations} Confirmations\r\n      </Typography>\r\n      <ActionButtonWrapper>\r\n        <ActionButton onClick={onSubmit} disabled={submitting}>\r\n          {submitting ? \"Submitting\" : \"Submit\"} to {mintChainConfig.full}\r\n          {submitting && \"...\"}\r\n        </ActionButton>\r\n      </ActionButtonWrapper>\r\n      <ActionButtonWrapper>\r\n        <TransactionDetailsButton\r\n          label={lockChainConfig.short}\r\n          address={lockTxHash}\r\n          link={lockTxLink}\r\n        />\r\n      </ActionButtonWrapper>\r\n      <SubmitErrorDialog open={submittingError} onAction={onReload} />\r\n    </>\r\n  );\r\n};\r\n\r\ntype DestinationPendingStatusProps = {\r\n  tx: GatewaySession;\r\n  onSubmit?: () => void;\r\n  submitting: boolean;\r\n  depositHash: string;\r\n};\r\n\r\nexport const DestinationPendingStatus: FunctionComponent<DestinationPendingStatusProps> = ({\r\n  tx,\r\n  onSubmit = () => {},\r\n  submitting,\r\n  depositHash,\r\n}) => {\r\n  const theme = useTheme();\r\n  let  {\r\n    lockCurrencyConfig,\r\n    lockChainConfig,\r\n    lockTxHash,\r\n    lockTxAmount,\r\n    lockTxLink,\r\n    mintTxLink,\r\n    mintTxHash,\r\n    mintChainConfig,\r\n  } = getLockAndMintParams(tx, depositHash);\r\n\r\n  const dep: DepositEntry = tx.transactions[depositHash]\r\n  lockTxHash = depositHash\r\n  lockTxLink = \"https://defiscan.live/transactions/\" + depositHash.split(\":\")[0]\r\n\r\n  return (\r\n    <>\r\n      <ProgressWrapper>\r\n        <ProgressWithContent color={theme.customColors.skyBlue} processing>\r\n          <TransactionStatusInfo\r\n            status=\"Pending\"\r\n            chain={mintChainConfig.full}\r\n            address={\r\n              <Link\r\n                color=\"primary\"\r\n                underline=\"hover\"\r\n                href={mintTxLink}\r\n                target=\"_blank\"\r\n              >\r\n                {mintTxHash}\r\n              </Link>\r\n            }\r\n          />\r\n        </ProgressWithContent>\r\n      </ProgressWrapper>\r\n      <Typography variant=\"body1\" align=\"center\" gutterBottom>\r\n        <NumberFormatText\r\n          value={lockTxAmount}\r\n          spacedSuffix={lockCurrencyConfig.full}\r\n        />\r\n      </Typography>\r\n      <ActionButtonWrapper>\r\n        <ActionButton onClick={onSubmit} disabled={submitting}>\r\n          {submitting ? \"Submitting\" : \"Submit\"} to {mintChainConfig.full}\r\n          {submitting && \"...\"}\r\n        </ActionButton>\r\n      </ActionButtonWrapper>\r\n      <ActionButtonWrapper>\r\n        <TransactionDetailsButton\r\n          label={lockChainConfig.short}\r\n          address={lockTxHash}\r\n          link={lockTxLink}\r\n        />\r\n      </ActionButtonWrapper>\r\n    </>\r\n  );\r\n};\r\n\r\ntype MintCompletedStatusProps = {\r\n  tx: GatewaySession;\r\n  depositHash: string;\r\n  mintHash: string;\r\n  chain: string;\r\n};\r\n\r\nexport const MintCompletedStatus: FunctionComponent<MintCompletedStatusProps> = ({\r\n  tx,\r\n  depositHash,\r\n  mintHash,\r\n  chain\r\n}) => {\r\n  useSetPaperTitle(\"Complete\");\r\n  const dispatch = useDispatch();\r\n  const history = useHistory();\r\n  let {\r\n    lockCurrencyConfig,\r\n    mintCurrencyConfig,\r\n    lockChainConfig,\r\n    lockTxLink,\r\n    lockTxAmount,\r\n    mintTxLink,\r\n    mintChainConfig,\r\n  } = getLockAndMintParams(tx, depositHash);\r\n\r\n  lockTxLink = \"https://defiscan.live/transactions/\" + depositHash.split(\":\")[0]\r\n  if(chain == \"ethereum\"){\r\n    mintTxLink=\"https://etherscan.io/tx/\" + mintHash\r\n  }else{\r\n    mintTxLink=\"https://bscscan.com/tx/\" + mintHash\r\n  }\r\n\r\n  const { fees, pending } = useFetchFees(\r\n    lockCurrencyConfig.symbol,\r\n    TxType.MINT\r\n  );\r\n  const { conversionTotal } = getTransactionFees({\r\n    fees,\r\n    type: TxType.MINT,\r\n  });\r\n  const handleReturn = useCallback(() => {\r\n    history.push(paths.MINT);\r\n    dispatch(resetMint());\r\n  }, [dispatch, history]);\r\n\r\n  const { showNotification } = useNotifications();\r\n  const { showBrowserNotification } = useBrowserNotifications();\r\n\r\n  const showNotifications = useCallback(() => {\r\n    if (!pending) {\r\n      const notificationMessage = `Successfully minted ${mintCurrencyConfig.short} on ${mintChainConfig.full}.`;\r\n      showNotification(\r\n        <span>\r\n          {notificationMessage}{\" \"}\r\n          <Link external href={mintTxLink}>\r\n            View {mintChainConfig.full} transaction\r\n          </Link>\r\n        </span>\r\n      );\r\n      showBrowserNotification(notificationMessage);\r\n    }\r\n  }, [\r\n    showNotification,\r\n    showBrowserNotification,\r\n    pending,\r\n    conversionTotal,\r\n    mintChainConfig,\r\n    mintCurrencyConfig,\r\n    mintTxLink,\r\n  ]);\r\n\r\n  useEffect(showNotifications, [pending]);\r\n\r\n  return (\r\n    <>\r\n      <ProgressWrapper>\r\n        <ProgressWithContent>\r\n          <BigDoneIcon />\r\n        </ProgressWithContent>\r\n      </ProgressWrapper>\r\n      <ActionButtonWrapper>\r\n        <ActionButton onClick={handleReturn}>Back to start</ActionButton>\r\n      </ActionButtonWrapper>\r\n      <Box display=\"flex\" justifyContent=\"space-between\" flexWrap=\"wrap\" py={2}>\r\n        <Link\r\n          external\r\n          color=\"primary\"\r\n          variant=\"button\"\r\n          underline=\"hover\"\r\n          href={lockTxLink}\r\n        >\r\n          {lockChainConfig.full} transaction\r\n        </Link>\r\n        <Link\r\n          external\r\n          color=\"primary\"\r\n          variant=\"button\"\r\n          underline=\"hover\"\r\n          href={mintTxLink}\r\n        >\r\n          {mintChainConfig.full} transaction\r\n        </Link>\r\n      </Box>\r\n    </>\r\n  );\r\n};\r\n","import { ButtonBase, ButtonProps, makeStyles, styled } from \"@material-ui/core\";\r\nimport classNames from \"classnames\";\r\nimport React, { FunctionComponent } from \"react\";\r\nimport {\r\n  NavigatePrevIcon,\r\n  NavigateNextIcon,\r\n} from \"../../../components/icons/RenIcons\";\r\n\r\nconst useBigNavButtonStyles = makeStyles((theme) => ({\r\n  root: {\r\n    color: theme.palette.primary.main,\r\n    fontSize: 90,\r\n    transition: \"all 1s\",\r\n    display: \"inline-flex\",\r\n    cursor: \"pointer\",\r\n    \"&:hover\": {\r\n      color: theme.palette.primary.dark,\r\n    },\r\n  },\r\n  disabled: {\r\n    opacity: 0.2,\r\n    cursor: \"default\",\r\n  },\r\n  hidden: {\r\n    display: \"none\",\r\n    opacity: 0,\r\n  },\r\n}));\r\n\r\ntype BigNavButtonProps = ButtonProps & {\r\n  direction: \"next\" | \"prev\";\r\n};\r\nexport const BigNavButton: FunctionComponent<BigNavButtonProps> = ({\r\n  direction,\r\n  disabled,\r\n  hidden,\r\n  className,\r\n  onClick,\r\n}) => {\r\n  const styles = useBigNavButtonStyles();\r\n  const rootClassName = classNames(styles.root, className, {\r\n    [styles.disabled]: disabled,\r\n    [styles.hidden]: hidden,\r\n  });\r\n  const Icon = direction === \"prev\" ? NavigatePrevIcon : NavigateNextIcon;\r\n  return (\r\n    <ButtonBase className={rootClassName} disabled={disabled} onClick={onClick}>\r\n      <Icon fontSize=\"inherit\" />\r\n    </ButtonBase>\r\n  );\r\n};\r\n\r\nexport const BigPrevButton: FunctionComponent<ButtonProps> = (props) => (\r\n  <BigNavButton direction=\"prev\" {...props} />\r\n);\r\n\r\nexport const BigNextButton: FunctionComponent<ButtonProps> = (props) => (\r\n  <BigNavButton direction=\"next\" {...props} />\r\n);\r\n\r\nconst offsetTop = 38;\r\nconst offsetHorizontal = -42;\r\nexport const DepositPrevButton = styled(BigPrevButton)({\r\n  position: \"absolute\",\r\n  top: offsetTop,\r\n  left: offsetHorizontal,\r\n});\r\n\r\nexport const DepositNextButton = styled(BigNextButton)({\r\n  position: \"absolute\",\r\n  top: offsetTop,\r\n  right: offsetHorizontal,\r\n});\r\n","import { Divider, IconButton } from \"@material-ui/core\";\r\nimport {\r\n  GatewaySession,\r\n} from \"@renproject/ren-tx\";\r\nimport {getDeposits, DepositEntry, Signature, SignatureMessage, getKeySignatures} from \"../../../services/bridge\"\r\nimport React, {\r\n  FunctionComponent,\r\n  useCallback,\r\n  useEffect,\r\n  useMemo,\r\n  useState,\r\n} from \"react\";\r\nimport { useLocalStorage } from 'usehooks-ts'\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { RouteComponentProps, useHistory, useLocation } from \"react-router-dom\";\r\nimport { Actor } from \"xstate\";\r\nimport {\r\n  ActionButton,\r\n  ToggleIconButton,\r\n} from \"../../../components/buttons/Buttons\";\r\nimport { BackArrowIcon } from \"../../../components/icons/RenIcons\";\r\nimport {\r\n  CenteringSpacedBox,\r\n  PaperSpacerWrapper,\r\n} from \"../../../components/layout/LayoutHelpers\";\r\nimport {\r\n  PaperActions,\r\n  PaperContent,\r\n  PaperHeader,\r\n  PaperNav,\r\n  PaperTitle,\r\n} from \"../../../components/layout/Paper\";\r\nimport { Debug } from \"../../../components/utils/Debug\";\r\nimport { WalletConnectionProgress } from \"../../../components/wallet/WalletHelpers\";\r\nimport { paths } from \"../../../pages/routes\";\r\nimport { useNotifications } from \"../../../providers/Notifications\";\r\nimport { usePageTitle, usePaperTitle } from \"../../../providers/TitleProviders\";\r\nimport {\r\n  BridgeChainConfig,\r\n  getChainConfigByRentxName,\r\n  getCurrencyConfigByRentxName,\r\n} from \"../../../utils/assetConfigs\";\r\nimport { $renNetwork } from \"../../network/networkSlice\";\r\nimport {\r\n  BrowserNotificationButton,\r\n  BrowserNotificationsDrawer,\r\n} from \"../../notifications/components/NotificationsHelpers\";\r\nimport {\r\n  useBrowserNotifications,\r\n  useBrowserNotificationsConfirmation,\r\n} from \"../../notifications/notificationsUtils\";\r\nimport { TransactionFees } from \"../../transactions/components/TransactionFees\";\r\nimport {\r\n  TransactionMenu,\r\n  UpdateTxFn,\r\n} from \"../../transactions/components/TransactionMenu\";\r\nimport {\r\n  BookmarkPageWarning,\r\n  ExpiredErrorDialog,\r\n  ProgressStatus,\r\n  WrongAddressWarningDialog,\r\n} from \"../../transactions/components/TransactionsHelpers\";\r\nimport {\r\n  useSetCurrentTxId,\r\n  useTransactionDeletion,\r\n} from \"../../transactions/transactionsHooks\";\r\nimport {\r\n  createTxQueryString,\r\n  getAddressExplorerLink,\r\n  getTxPageTitle,\r\n  isTxExpired,\r\n  parseTxQueryString,\r\n  TxConfigurationStep,\r\n  TxType,\r\n  useTxParam,\r\n} from \"../../transactions/transactionsUtils\";\r\nimport {\r\n  useAuthRequired,\r\n  useSelectedChainWallet,\r\n  useRedeem\r\n} from \"../../wallet/walletHooks\";\r\nimport {\r\n  $chain,\r\n  setChain,\r\n  setWalletPickerOpened,\r\n} from \"../../wallet/walletSlice\";\r\nimport {\r\n  DepositWrapper,\r\n  MultipleDepositsMessage,\r\n  GenericMessage\r\n} from \"../components/MintHelpers\";\r\nimport {\r\n  DestinationPendingStatus,\r\n  MintCompletedStatus,\r\n  MintDepositAcceptedStatus,\r\n  MintDepositConfirmationStatus,\r\n  MintDepositToStatus,\r\n} from \"../components/MintStatuses\";\r\nimport {\r\n  DepositNextButton,\r\n  DepositPrevButton,\r\n} from \"../components/MultipleDepositsHelpers\";\r\nimport { useDepositPagination, useMintMachine } from \"../mintHooks\";\r\nimport { resetMint } from \"../mintSlice\";\r\nimport { getLockAndMintParams, getRemainingGatewayTime } from \"../mintUtils\";\r\nimport { clearTimeout } from \"timers\";\r\n\r\n\r\nexport const MintProcessStep: FunctionComponent<RouteComponentProps> = ({\r\n  history,\r\n  location,\r\n}) => {\r\n  useAuthRequired(true);\r\n  const dispatch = useDispatch();\r\n  const chain = useSelector($chain);\r\n  var rdDict: { [id: string]: string; } = {\r\n    \"bcc207a0e3745b9b4394e0daa6c098edc4224cb28379505c70b8407d73738905:0\": \"skip\"\r\n  }\r\n\r\n  const [rdtx, setRdtx] = useLocalStorage('rdDict', rdDict)\r\n  const {getSignatures} = useRedeem()\r\n  \r\n  const { walletConnected } = useSelectedChainWallet();\r\n  const { tx: parsedTx, txState } = useTxParam();\r\n  const [depositHash, setDepositHash] = useState<string>(parsedTx?.depositHash !== undefined ? parsedTx.depositHash + \":\" + parsedTx.depositN : \"\");\r\n  const [reloading, setReloading] = useState(false);\r\n  const [tx, setTx] = useState<GatewaySession>(parsedTx as GatewaySession);\r\n\r\n  useSetCurrentTxId(tx.id);\r\n\r\n  usePageTitle(getTxPageTitle(tx));\r\n  const [paperTitle, setPaperTitle] = usePaperTitle();\r\n  useEffect(() => {\r\n    if (!walletConnected) {\r\n      setPaperTitle(\"Resume Transaction\");\r\n    }\r\n  }, [walletConnected, setPaperTitle]);\r\n\r\n  const handlePreviousStepClick = useCallback(() => {\r\n    history.goBack();\r\n  }, [history]);\r\n\r\n \r\n  const destChain = parsedTx?.destChain;\r\n  useEffect(() => {\r\n    if (destChain) {\r\n      const bridgeChainConfig = getChainConfigByRentxName(destChain);\r\n      dispatch(setChain(bridgeChainConfig.symbol));\r\n    }\r\n  }, [dispatch, destChain]);\r\n\r\n  const handleWalletPickerOpen = useCallback(() => {\r\n    dispatch(setWalletPickerOpened(true));\r\n  }, [dispatch]);\r\n\r\n  const onBookmarkWarningClosed = useCallback(() => {\r\n    history.replace({ ...location, state: undefined });\r\n  }, [history, location]);\r\n\r\n  const showTransactionStatus = !!tx && walletConnected;\r\n  const feeCurrency = getCurrencyConfigByRentxName(tx.sourceAsset).symbol;\r\n\r\n  const [counter, changeCounter] = useState(0);\r\n\r\n  const updateTx = () => {\r\n    if(!tx) return;\r\n    getDeposits(tx.userAddress, tx.destChain).then((jsonObj) => {\r\n    let txChange: GatewaySession = JSON.parse(JSON.stringify(tx));\r\n    if(jsonObj.status == 1) {\r\n        let changes = false;\r\n        if(jsonObj.result !== undefined && jsonObj.result.data !== undefined && jsonObj.result.data.length > 0) {\r\n            for(let i = 0; i<jsonObj.result.data.length; ++i) {\r\n              const key = jsonObj.result.data[i].vout?.txid + \":\" + jsonObj.result.data[i].vout?.n as string\r\n              if(key in rdtx) continue\r\n              const result = (key in txChange.transactions)\r\n              if(!result || JSON.stringify(txChange.transactions[key])!=JSON.stringify(jsonObj.result.data[i])){\r\n                (txChange as any).transactions[key] = jsonObj.result.data[i]\r\n                changes = true;\r\n              }\r\n            }\r\n            if(depositHash === \"\" && Object.keys(txChange.transactions).length > 0){\r\n              setDepositHash(Object.keys(txChange.transactions)[0])\r\n            }\r\n            if(changes){\r\n              setTx(txChange)\r\n            }\r\n        }\r\n    }})\r\n  }\r\n\r\n  const updateHash = ((hash: string) => {\r\n    setDepositHash(hash)\r\n  })\r\n\r\n  useEffect(() => {\r\n    const interval = setInterval(() => {\r\n      updateTx()\r\n    }, 3000);\r\n    return () => clearInterval(interval);\r\n  }, [depositHash]);\r\n\r\n\r\n\r\n   return (\r\n    <>\r\n      <PaperHeader>\r\n        <PaperNav>\r\n            <IconButton onClick={handlePreviousStepClick}>\r\n              <BackArrowIcon />\r\n            </IconButton>\r\n        </PaperNav>\r\n        <PaperTitle>{paperTitle}</PaperTitle>\r\n        <PaperActions>\r\n          \r\n        </PaperActions>\r\n      </PaperHeader>\r\n      <PaperContent bottomPadding>\r\n        {showTransactionStatus && (\r\n          <MintTransactionStatus\r\n            tx={tx}\r\n            depositHash={depositHash}\r\n            updateHash={updateHash}\r\n            rdtx={rdtx}\r\n            setRdtx={setRdtx}\r\n          />\r\n        )}\r\n        {!walletConnected && (\r\n          <>\r\n            <PaperSpacerWrapper>\r\n              <CenteringSpacedBox>\r\n                <WalletConnectionProgress />\r\n              </CenteringSpacedBox>\r\n            </PaperSpacerWrapper>\r\n            <ActionButton onClick={handleWalletPickerOpen}>\r\n              Connect Wallet\r\n            </ActionButton>\r\n          </>\r\n        )}\r\n      </PaperContent>\r\n      {walletConnected && (\r\n        <>\r\n          <Divider />\r\n          <PaperContent darker topPadding bottomPadding>\r\n            <TransactionFees\r\n              chain={chain}\r\n              currency={feeCurrency}\r\n              type={TxType.MINT}\r\n              address={tx.userAddress}\r\n            />\r\n          </PaperContent>\r\n        </>\r\n      )}\r\n      \r\n  \r\n      <Debug it={{ tx, txState: txState }} />\r\n    </>\r\n  );\r\n};\r\n\r\ntype OnMachineSendReadyFn = (\r\n  send: ReturnType<typeof useMintMachine>[1]\r\n) => void;\r\n\r\ntype MintTransactionStatusProps = {\r\n  tx: GatewaySession;\r\n  depositHash?: string;\r\n  updateHash: (arg0: string) => void\r\n  rdtx: any\r\n  setRdtx: any\r\n};\r\n\r\nconst MintTransactionStatus: FunctionComponent<MintTransactionStatusProps> = ({\r\n  tx,\r\n  depositHash = \"\",\r\n  updateHash,\r\n  rdtx,\r\n  setRdtx\r\n}) => {\r\n  const chain = useSelector($chain);\r\n  const renNetwork = useSelector($renNetwork);\r\n  const { account } = useSelectedChainWallet();\r\n\r\n  const [state, setState] = useState(\"restoringDeposit\" as string)\r\n  const {\r\n    currentIndex,\r\n    currentHash,\r\n    total,\r\n    handlePrev,\r\n    handleNext,\r\n  } = useDepositPagination(tx, depositHash, updateHash);\r\n\r\n\r\n\r\n  var SigDict: { [id: string]: SignatureMessage; } = {}\r\n\r\n  const { showNotification, closeNotification } = useNotifications();\r\n  const [signatures, setSignatures] = useState(SigDict)\r\n  const [timeOut, setTimeOut] = useState(0)\r\n  let timeoutTimer: any = undefined\r\n\r\n  const timeoutFunc = () =>\r\n  {\r\n    setTimeOut(timeOut+1)\r\n  }\r\n\r\n  useEffect(() => {\r\n    // here we decide on the transaction status\r\n    const dep: DepositEntry = tx.transactions[depositHash]\r\n    console.log(dep)\r\n    if(timeoutTimer!==undefined){\r\n      clearTimeout(timeoutTimer)\r\n      timeoutTimer = undefined\r\n    }\r\n\r\n    if(dep){\r\n      const confs = dep?.good || false\r\n      if(!confs) \r\n        setState(\"srcSettling\")\r\n      else {\r\n        if(depositHash in signatures){\r\n          console.log(rdtx)\r\n          console.log(depositHash)\r\n          if(depositHash in rdtx){\r\n            setState(\"completed\")\r\n          }else{\r\n            setState(\"accepted\")\r\n          }\r\n        }else{\r\n            setState(\"srcConfirmed\")\r\n            submitSignRequest()\r\n            timeoutTimer = setTimeout(timeoutFunc, 12000)\r\n        }\r\n        \r\n      }\r\n    }\r\n  },[tx, depositHash, signatures, rdtx, timeOut]);\r\n  \r\n\r\n\r\n  const submitToBridge = async() => {\r\n      console.log(\"Submitting via Wallet Provider\")\r\n      const siggy = signatures[depositHash]\r\n      if(siggy['signatures'] == undefined) return\r\n      const r = '0x' + siggy['signatures'][0]['r'] || ''\r\n      const s = '0x' + siggy['signatures'][0]['s'] || ''\r\n      const v = siggy['signatures'][0]['recovery_id']==\"00\" ? 0 : 1\r\n      console.log(tx.destAddress, depositHash.split(\":\")[0], parseInt(depositHash.split(\":\")[1]), activeDeposit?.vout?.value_satoshi || 0, tx.sourceAsset, r, s, v + 27)\r\n      let res: any = await getSignatures(tx.destAddress, depositHash.split(\":\")[0], parseInt(depositHash.split(\":\")[1]), activeDeposit?.vout?.value_satoshi || 0, tx.sourceAsset, r, s, v + 27)\r\n      if(res.err!==null && res.err?.code != 0) {\r\n        console.log(res.err?.message)\r\n        showNotification(res.err?.message as string || \"\", {\r\n          variant: \"error\",\r\n          persist: false,\r\n        });\r\n      }else{\r\n        console.log(res);\r\n        let rdCopy = JSON.parse(JSON.stringify(rdtx))\r\n        rdCopy[depositHash] = res.result\r\n        setRdtx(rdCopy)\r\n      }\r\n  }\r\n\r\n  const submitSignRequest = async() => {\r\n    console.log(\"Submitting Signing Request\")\r\n    getKeySignatures(tx.destAddress, (activeDeposit?.vout?.txid || \"\").replace(\"0x\",\"\"), activeDeposit?.vout?.n || 0, tx.destChain).then((sigs) => {\r\n      if(sigs && sigs?.status == 1){\r\n        let sigCopy = JSON.parse(JSON.stringify(signatures))\r\n        sigCopy[depositHash] = sigs\r\n        setSignatures(sigCopy)\r\n      }\r\n    }).catch((err) => {})\r\n  }\r\n\r\n  useEffect(() => {\r\n    let key = 0;\r\n    if (total > 1) {\r\n      key = showNotification(<MultipleDepositsMessage />, {\r\n        variant: \"warning\",\r\n        persist: true,\r\n      }) as number;\r\n    }\r\n    return () => {\r\n      if (key) {\r\n        closeNotification(key);\r\n      }\r\n    };\r\n  }, [showNotification, closeNotification, total]);\r\n\r\n  const [wrongAddressDialogOpened, setWrongAddressDialogOpened] = useState(\r\n    false\r\n  );\r\n  const handleCloseWrongAddressDialog = useCallback(() => {\r\n    setWrongAddressDialogOpened(false);\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    if (\r\n      account &&\r\n      tx.userAddress &&\r\n      account.toLowerCase() !== tx.userAddress.toLowerCase()\r\n    ) {\r\n      setWrongAddressDialogOpened(true);\r\n    } else {\r\n      setWrongAddressDialogOpened(false);\r\n    }\r\n  }, [account, tx.userAddress, tx]);\r\n\r\n  const activeDeposit = useMemo<\r\n    DepositEntry\r\n   | null>(() => {\r\n    if ((tx?.transactions === undefined)) {\r\n      return null;\r\n    }\r\n    const deposit = tx.transactions[currentHash || depositHash];\r\n    if (!deposit){\r\n      return null;\r\n    }\r\n    return deposit;\r\n  }, [currentHash, tx, depositHash]);\r\n\r\n  const {getSignatures} = useRedeem()\r\n\r\n\r\n  // In order to enable quick restoration, we need to persist the deposit transaction\r\n  // We persist via querystring, so lets check if the transaction is present\r\n  // and update otherwise\r\n  const location = useLocation();\r\n  const history = useHistory();\r\n\r\n  useEffect(() => {\r\n    if (!location.search) return;\r\n    const queryTx = parseTxQueryString(location.search);\r\n    const deposit = (queryTx?.transactions || {})[currentHash];\r\n    // If we have detected a deposit, but there is no deposit in the querystring\r\n    // update the queryString to have the deposit\r\n    // TODO: to enable quick resume, we may want to ask users to update their bookmarks\r\n    if (activeDeposit && !deposit) {\r\n      history.replace({\r\n        pathname: paths.MINT_TRANSACTION,\r\n        search: \"?\" + createTxQueryString(tx),\r\n      });\r\n    }\r\n  }, [currentHash, depositHash, location, activeDeposit, tx, history]);\r\n\r\n  const { mintCurrencyConfig } = getLockAndMintParams(\r\n    tx,\r\n    currentHash\r\n  );\r\n  const accountExplorerLink = getAddressExplorerLink(\r\n    chain,\r\n    renNetwork,\r\n    account\r\n  );\r\n\r\n  return (\r\n    <>\r\n      {activeDeposit ? (\r\n        <DepositWrapper>\r\n          <MintTransactionDepositStatus\r\n            tx={tx}\r\n            deposit={activeDeposit}\r\n            depositHash={depositHash}\r\n            state={state}\r\n            submitter={submitToBridge}\r\n            mintHash={rdtx[depositHash]}\r\n          />\r\n          {total > 1 && (\r\n            <>\r\n              <DepositPrevButton\r\n                onClick={handlePrev}\r\n                disabled={currentIndex === 0}\r\n              />\r\n              <DepositNextButton\r\n                onClick={handleNext}\r\n                disabled={currentIndex === total - 1}\r\n              />\r\n            </>\r\n          )}\r\n        </DepositWrapper>\r\n      ) : (\r\n        <MintDepositToStatus tx={tx} />\r\n      )}\r\n    \r\n\r\n      <WrongAddressWarningDialog\r\n        open={wrongAddressDialogOpened}\r\n        address={account}\r\n        addressExplorerLink={accountExplorerLink}\r\n        currency={mintCurrencyConfig.short}\r\n        onAlternativeAction={handleCloseWrongAddressDialog}\r\n      />\r\n      <Debug\r\n        it={{\r\n          depositHash,\r\n          pagination: { currentIndex, currentHash, total },\r\n          activeDeposit,\r\n          total,\r\n          currentIndex,\r\n          currentHash,\r\n        }}\r\n      />\r\n    </>\r\n  );\r\n};\r\n\r\ntype MintTransactionDepositStatusProps = {\r\n  tx: GatewaySession;\r\n  deposit: DepositEntry;\r\n  depositHash: string;\r\n  state: string;\r\n  submitter: ()=>void\r\n  mintHash: string;\r\n};\r\n\r\n\r\nexport const MintTransactionDepositStatus: FunctionComponent<MintTransactionDepositStatusProps> = ({\r\n  tx,\r\n  deposit,\r\n  depositHash,\r\n  state,\r\n  submitter,\r\n  mintHash,\r\n}) => {\r\n  const history = useHistory();\r\n  const location = useLocation();\r\n \r\n\r\n  console.debug(tx.id, depositHash, state);\r\n  switch (state) {\r\n    case \"srcSettling\":\r\n      return (\r\n        <MintDepositConfirmationStatus tx={tx} depositHash={depositHash} />\r\n      );\r\n    case \"srcConfirmed\": // source sourceChain confirmations ok, but renVM still doesn't accept it\r\n      return <ProgressStatus reason=\"Generating Signatures\" />;\r\n    case \"errorAccepting\":\r\n    case \"errorSubmitting\":\r\n    case \"claiming\":\r\n    case \"accepted\": // RenVM accepted it, it can be submitted to ethereum\r\n      return (\r\n        <MintDepositAcceptedStatus\r\n          tx={tx}\r\n          depositHash={depositHash}\r\n          submitting={state === \"claiming\"}\r\n          submittingError={\r\n            state === \"errorSubmitting\" || state === \"errorAccepting\"\r\n          }\r\n          onSubmit={submitter}\r\n        />\r\n      );\r\n    case \"destInitiated\": // final txHash means its done or check if wallet balances went up\r\n      return (\r\n        <DestinationPendingStatus\r\n          tx={tx}\r\n          depositHash={depositHash}\r\n          submitting={true}\r\n        />\r\n      );\r\n    case \"completed\":\r\n      return <MintCompletedStatus tx={tx} depositHash={depositHash} mintHash={mintHash} chain={tx.destChain}/>;\r\n    case \"restoringDeposit\":\r\n      return <ProgressStatus reason=\"Restoring deposit\" />;\r\n    default:\r\n      return <ProgressStatus reason=\"This is just weird\" />;\r\n  }\r\n};\r\n","import { useMultiwallet } from \"@renproject/multiwallet-ui\";\r\nimport {\r\n  DepositMachineSchema,\r\n  GatewayMachineContext,\r\n  GatewayMachineEvent,\r\n  GatewaySession,\r\n  mintMachine,\r\n} from \"@renproject/ren-tx\";\r\nimport { useMachine } from \"@xstate/react\";\r\nimport { useCallback, useEffect, useState } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { Interpreter, State } from \"xstate\";\r\nimport { env } from \"../../constants/environmentVariables\";\r\nimport { db } from \"../../services/database/database\";\r\nimport { getRenJs } from \"../../services/renJs\";\r\nimport { lockChainMap, mintChainMap } from \"../../services/rentx\";\r\nimport { $renNetwork } from \"../network/networkSlice\";\r\nimport { updateTransaction } from \"../transactions/transactionsSlice\";\r\nimport { cloneTx } from \"../transactions/transactionsUtils\";\r\nimport { depositSorter } from \"./mintUtils\";\r\n\r\nexport const useMintMachine = (mintTransaction: GatewaySession) => {\r\n  const tx = cloneTx(mintTransaction);\r\n  const { enabledChains } = useMultiwallet();\r\n  const network = useSelector($renNetwork);\r\n  const providers = Object.entries(enabledChains).reduce(\r\n    (c, n) => ({\r\n      ...c,\r\n      [n[0]]: n[1].provider,\r\n    }),\r\n    {}\r\n  );\r\n  const machineHook = useMachine(mintMachine, {\r\n    context: {\r\n      tx,\r\n      providers,\r\n      sdk: getRenJs(network),\r\n      fromChainMap: lockChainMap,\r\n      toChainMap: mintChainMap,\r\n    },\r\n    devTools: env.XSTATE_DEVTOOLS,\r\n  });\r\n\r\n  return machineHook;\r\n};\r\n\r\nexport type DepositMachineSchemaState = keyof DepositMachineSchema[\"states\"];\r\n\r\n\r\n\r\nexport const useDepositPagination = (\r\n  tx: GatewaySession,\r\n  depositSourceHash = \"\",\r\n  updateHash: (arg0: string) => void\r\n) => {\r\n  const sortedDeposits = tx.transactions;\r\n  const orderedHashes = Object.keys(sortedDeposits).map((deposit) => deposit);\r\n\r\n  const total = orderedHashes.length;\r\n  const initial = depositSourceHash || total > 0 ? orderedHashes[0] : \"\";\r\n  const [currentHash, setCurrentHash] = useState(initial);\r\n  useEffect(() => {\r\n    setCurrentHash(initial);\r\n  }, [initial]);\r\n\r\n  const currentIndex = orderedHashes.indexOf(currentHash);\r\n  const nextIndex =\r\n    total > 0 && currentIndex + 1 < total ? currentIndex + 1 : 0;\r\n  const nextHash = orderedHashes[nextIndex];\r\n  const prevIndex = total > 0 && currentIndex - 1 >= 0 ? currentIndex - 1 : 0;\r\n  const prevHash = orderedHashes[prevIndex];\r\n\r\n  const handleNext = useCallback(() => {\r\n    console.log(orderedHashes)\r\n    console.log(\"next:\",nextHash)\r\n    setCurrentHash(nextHash);\r\n    updateHash(nextHash)\r\n  }, [nextHash]);\r\n\r\n  const handlePrev = useCallback(() => {\r\n    console.log(\"prev:\",prevHash)\r\n    setCurrentHash(prevHash);\r\n    updateHash(prevHash)\r\n  }, [prevHash]);\r\n\r\n\r\n  return {\r\n    currentHash,\r\n    currentIndex,\r\n    handleNext,\r\n    handlePrev,\r\n    total  };\r\n};\r\n","import React, { FunctionComponent, useCallback, useState } from \"react\";\r\nimport { RouteComponentProps } from \"react-router\";\r\nimport { Route } from \"react-router-dom\";\r\nimport { paths } from \"../../pages/routes\";\r\nimport { usePageTitle } from \"../../providers/TitleProviders\";\r\nimport { TransactionTypeTabs } from \"../transactions/components/TransactionTypeTabs\";\r\nimport { useSetCurrentTxId } from \"../transactions/transactionsHooks\";\r\nimport { TxConfigurationStep } from \"../transactions/transactionsUtils\";\r\nimport { MintFeesStep } from \"./steps/MintFeesStep\";\r\nimport { MintInitialStep } from \"./steps/MintInitialStep\";\r\nimport { MintProcessStep } from \"./steps/MintProcessStep\";\r\n\r\nconst MintConfiguration: FunctionComponent<RouteComponentProps> = () => {\r\n  const [step, setStep] = useState(TxConfigurationStep.INITIAL);\r\n\r\n  // clear the current tx so that history starts processing again\r\n  useSetCurrentTxId(\"\");\r\n\r\n  const onInitialNext = useCallback(() => {\r\n    setStep(TxConfigurationStep.FEES);\r\n  }, []);\r\n  const onFeesPrev = useCallback(() => {\r\n    setStep(TxConfigurationStep.INITIAL);\r\n  }, []);\r\n\r\n  return (\r\n    <>\r\n      {step === TxConfigurationStep.INITIAL && (\r\n        <>\r\n          <TransactionTypeTabs />\r\n          <MintInitialStep onNext={onInitialNext} />\r\n        </>\r\n      )}\r\n      {step === TxConfigurationStep.FEES && (\r\n        <MintFeesStep onPrev={onFeesPrev} />\r\n      )}\r\n    </>\r\n  );\r\n};\r\n\r\nexport const MintFlow: FunctionComponent<RouteComponentProps> = ({ match }) => {\r\n  usePageTitle(\"Minting\");\r\n  return (\r\n    <>\r\n      <Route exact path={paths.MINT} component={MintConfiguration} />\r\n      <Route exact path={paths.MINT_TRANSACTION} component={MintProcessStep} />\r\n    </>\r\n  );\r\n};\r\n","import { Box, Typography, useTheme } from \"@material-ui/core\";\r\nimport { GatewaySession } from \"@renproject/ren-tx\";\r\nimport React, { FunctionComponent, useCallback } from \"react\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport { useEffectOnce } from \"react-use\";\r\nimport {\r\n  ActionButton,\r\n  ActionButtonWrapper,\r\n} from \"../../../components/buttons/Buttons\";\r\nimport { Link } from \"../../../components/links/Links\";\r\nimport {\r\n  BigDoneIcon,\r\n  ProgressWithContent,\r\n  ProgressWrapper,\r\n  TransactionStatusInfo,\r\n} from \"../../../components/progress/ProgressHelpers\";\r\nimport { Debug } from \"../../../components/utils/Debug\";\r\nimport { paths } from \"../../../pages/routes\";\r\nimport { useNotifications } from \"../../../providers/Notifications\";\r\nimport { useSetPaperTitle } from \"../../../providers/TitleProviders\";\r\nimport { useBrowserNotifications } from \"../../notifications/notificationsUtils\";\r\nimport {\r\n  GeneralErrorDialog,\r\n  SubmitErrorDialog,\r\n} from \"../../transactions/components/TransactionsHelpers\";\r\nimport { resetRelease } from \"../releaseSlice\";\r\nimport { getBurnAndReleaseParams } from \"../releaseUtils\";\r\n\r\nexport const a = 1;\r\n\r\ntype ReleaseProgressStatusProps = {\r\n  tx: GatewaySession;\r\n  onSubmit?: () => void;\r\n  onReload?: () => void;\r\n  submittingError?: boolean;\r\n  generalError?: boolean;\r\n  submitting?: boolean;\r\n  pending?: boolean;\r\n};\r\n\r\nexport const ReleaseProgressStatus: FunctionComponent<ReleaseProgressStatusProps> = ({\r\n  tx,\r\n  onSubmit,\r\n  onReload,\r\n  submitting = false,\r\n  submittingError,\r\n  generalError,\r\n  pending = false,\r\n}) => {\r\n  useSetPaperTitle(\"Submit\");\r\n  const theme = useTheme();\r\n  const {\r\n    burnChainConfig,\r\n    releaseCurrencyConfig,\r\n    burnTxHash,\r\n    burnTxLink,\r\n  } = getBurnAndReleaseParams(tx);\r\n  const { MainIcon } = burnChainConfig;\r\n\r\n  const handleSubmit = useCallback(() => {\r\n    if (onSubmit) {\r\n      onSubmit();\r\n    }\r\n  }, [onSubmit]);\r\n\r\n  const buttonSubmitting = pending || submitting;\r\n\r\n  return (\r\n    <>\r\n      <ProgressWrapper>\r\n        <ProgressWithContent\r\n          color={theme.customColors.skyBlue}\r\n          processing={buttonSubmitting}\r\n        >\r\n          {pending ? (\r\n            <TransactionStatusInfo\r\n              status=\"Pending\"\r\n              chain={burnChainConfig.full}\r\n              address={\r\n                <Link\r\n                  color=\"primary\"\r\n                  underline=\"hover\"\r\n                  href={burnTxLink}\r\n                  target=\"_blank\"\r\n                >\r\n                  {burnTxHash}\r\n                </Link>\r\n              }\r\n            />\r\n          ) : (\r\n            <MainIcon fontSize=\"inherit\" color=\"inherit\" />\r\n          )}\r\n        </ProgressWithContent>\r\n      </ProgressWrapper>\r\n      {!pending && (\r\n        <Typography variant=\"body1\" align=\"center\" gutterBottom>\r\n          To receive your {releaseCurrencyConfig.short}, submit a release\r\n          transaction to {burnChainConfig.full} via your Web3 Wallet.\r\n        </Typography>\r\n      )}\r\n      <ActionButtonWrapper>\r\n        <ActionButton onClick={handleSubmit} disabled={buttonSubmitting}>\r\n          {buttonSubmitting ? \"Submitting\" : \"Submit\"} to {burnChainConfig.full}\r\n          {buttonSubmitting && \"...\"}\r\n        </ActionButton>\r\n      </ActionButtonWrapper>\r\n      <SubmitErrorDialog open={Boolean(submittingError)} onAction={onReload} />\r\n      <GeneralErrorDialog open={Boolean(generalError)} onAction={onReload} />\r\n    </>\r\n  );\r\n};\r\n\r\ntype ReleaseCompletedStatusProps = {\r\n  tx: GatewaySession;\r\n  onReturn?: () => void;\r\n};\r\n\r\ntype ReleaseShortcutCompletedStatusProps = {\r\n  txid: string;\r\n  amount: number;\r\n  chain: string;\r\n  onPrev?: () => void;\r\n  onReturn?: () => void;\r\n};\r\n\r\nexport const ReleaseCompletedStatus: FunctionComponent<ReleaseCompletedStatusProps> = ({\r\n  tx,\r\n}) => {\r\n  useSetPaperTitle(\"Completed\");\r\n  const dispatch = useDispatch();\r\n  const history = useHistory();\r\n  const {\r\n    releaseChainConfig,\r\n    releaseCurrencyConfig,\r\n    burnChainConfig,\r\n    burnTxLink,\r\n    releaseTxLink,\r\n    releaseAddressLink,\r\n  } = getBurnAndReleaseParams(tx);\r\n  const handleReturn = useCallback(() => {\r\n    history.push(paths.RELEASE);\r\n    dispatch(resetRelease());\r\n  }, [dispatch, history]);\r\n\r\n  const notificationMessage = `Successfully released ${tx.targetAmount} ${releaseCurrencyConfig.short}`;\r\n  const { showNotification } = useNotifications();\r\n  const { showBrowserNotification } = useBrowserNotifications();\r\n  useEffectOnce(() => {\r\n    showNotification(\r\n      <span>\r\n        {notificationMessage}{\" \"}\r\n        <Link external href={releaseTxLink || releaseAddressLink}>\r\n          View {releaseChainConfig.full}{\" \"}\r\n          {releaseTxLink ? \"transaction\" : \"address\"}\r\n        </Link>\r\n      </span>\r\n    );\r\n    showBrowserNotification(notificationMessage);\r\n  });\r\n\r\n  return (\r\n    <>\r\n      <ProgressWrapper>\r\n        <ProgressWithContent>\r\n          <BigDoneIcon />\r\n        </ProgressWithContent>\r\n      </ProgressWrapper>\r\n      <ActionButtonWrapper>\r\n        <ActionButton onClick={handleReturn}>Back to Start</ActionButton>\r\n      </ActionButtonWrapper>\r\n      <Box display=\"flex\" justifyContent=\"space-between\" flexWrap=\"wrap\" py={2}>\r\n        <Link\r\n          external\r\n          color=\"primary\"\r\n          variant=\"button\"\r\n          underline=\"hover\"\r\n          href={releaseTxLink || releaseAddressLink}\r\n        >\r\n          {releaseChainConfig.full} {releaseTxLink ? \"transaction\" : \"address\"}\r\n        </Link>\r\n        <Link\r\n          external\r\n          color=\"primary\"\r\n          variant=\"button\"\r\n          underline=\"hover\"\r\n          href={burnTxLink}\r\n        >\r\n          {burnChainConfig.full} transaction\r\n        </Link>\r\n      </Box>\r\n      <Debug it={{ tx }} />\r\n    </>\r\n  );\r\n};\r\n\r\n\r\nexport const ReleaseShortcutCompletedStatus: FunctionComponent<ReleaseShortcutCompletedStatusProps> = ({\r\n  txid,\r\n  amount,\r\n  chain,\r\n  onPrev\r\n}) => {\r\n  useSetPaperTitle(\"Completed\");\r\n  const dispatch = useDispatch();\r\n  const history = useHistory();\r\n  const handleReturn = useCallback(() => {\r\n    if(onPrev)\r\n    \tonPrev();\r\n    dispatch(resetRelease());\r\n  }, [dispatch, history]);\r\n  const notificationMessage = `Successfully released`;\r\n  const { showNotification } = useNotifications();\r\n  const { showBrowserNotification } = useBrowserNotifications();\r\n  let releaseTxLink: string;\r\n  if(chain == \"ethereum\"){\r\n    releaseTxLink=\"https://etherscan.io/tx/\" + txid\r\n  }else{\r\n    releaseTxLink=\"https://bscscan.com/tx/\" + txid\r\n  }  \r\n  useEffectOnce(() => {\r\n    showNotification(\r\n      <span>\r\n        {notificationMessage}{\" \"}\r\n        <Link external href={releaseTxLink}>\r\n          View Transaction\r\n        </Link>\r\n      </span>\r\n    );\r\n    showBrowserNotification(notificationMessage);\r\n  });\r\n\r\n  return (\r\n    <>\r\n      <ProgressWrapper>\r\n        <ProgressWithContent>\r\n          <BigDoneIcon />\r\n        </ProgressWithContent>\r\n      </ProgressWrapper>\r\n      <ActionButtonWrapper>\r\n        <ActionButton onClick={handleReturn}>Back to Start</ActionButton>\r\n      </ActionButtonWrapper>\r\n      <Box display=\"flex\" justifyContent=\"space-between\" flexWrap=\"wrap\" py={2}>\r\n        <Link\r\n          external\r\n          color=\"primary\"\r\n          variant=\"button\"\r\n          underline=\"hover\"\r\n          href={releaseTxLink}\r\n        >\r\n          View Transaction on Block Explorer\r\n        </Link>\r\n      </Box>\r\n\r\n    </>\r\n  );\r\n};\r\n","export const releaseTooltips = {\r\n  releasing: \"The amount and asset you're releasing before fees are applied.\",\r\n  from: \"The blockchain you are releasing the asset from.\",\r\n  to: \"The wallet address you're receiving the assets to.\",\r\n};\r\n","import { Divider, IconButton, Typography } from \"@material-ui/core\";\r\nimport React, {\r\n  FunctionComponent,\r\n  useCallback,\r\n  useEffect,\r\n  useMemo,\r\n  useState,\r\n} from \"react\";\r\nimport {getLogs} from \"../../../services/bridge\"\r\n\r\nimport {\r\n  ReleaseShortcutCompletedStatus,\r\n  ReleaseProgressStatus,\r\n} from '../components/ReleaseStatuses'\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport { useNotifications } from \"../../../providers/Notifications\";\r\n\r\nimport {\r\n  ActionButton,\r\n  ActionButtonWrapper,\r\n  TransactionDetailsButton,\r\n} from \"../../../components/buttons/Buttons\";\r\nimport { NumberFormatText } from \"../../../components/formatting/NumberFormatText\";\r\nimport { BackArrowIcon } from \"../../../components/icons/RenIcons\";\r\nimport {\r\n  PaperActions,\r\n  PaperContent,\r\n  PaperHeader,\r\n  PaperNav,\r\n  PaperTitle,\r\n} from \"../../../components/layout/Paper\";\r\nimport { CenteredProgress, ProgressWithContent, ProgressWrapper } from \"../../../components/progress/ProgressHelpers\";\r\nimport {validate, Network} from '../releaseAddressValidator'\r\nimport {\r\n  AssetInfo,\r\n  BigAssetAmount,\r\n  BigAssetAmountWrapper,\r\n  LabelWithValue,\r\n  MiddleEllipsisText,\r\n  SpacedDivider,\r\n} from \"../../../components/typography/TypographyHelpers\";\r\nimport { paths } from \"../../../pages/routes\";\r\nimport { db } from \"../../../services/database/database\";\r\nimport {\r\n  getChainConfig,\r\n  getCurrencyConfig,\r\n  toReleasedCurrency,\r\n} from \"../../../utils/assetConfigs\";\r\nimport { useFetchFees } from \"../../fees/feesHooks\";\r\nimport { getTransactionFees } from \"../../fees/feesUtils\";\r\nimport { $renNetwork } from \"../../network/networkSlice\";\r\nimport { TransactionFees } from \"../../transactions/components/TransactionFees\";\r\nimport {\r\n  addTransaction,\r\n  setCurrentTxId,\r\n} from \"../../transactions/transactionsSlice\";\r\nimport {useBurn, useToken} from \"../../wallet/walletHooks\"\r\nimport {\r\n  createTxQueryString,\r\n  LocationTxState,\r\n  TxConfigurationStepProps,\r\n  TxType,\r\n} from \"../../transactions/transactionsUtils\";\r\nimport {\r\n  useAuthRequired,\r\n  useSelectedChainWallet,\r\n} from \"../../wallet/walletHooks\";\r\nimport {\r\n  $multiwalletChain,\r\n  $wallet,\r\n  setWalletPickerOpened,\r\n} from \"../../wallet/walletSlice\";\r\nimport { releaseTooltips } from \"../components/ReleaseHelpers\";\r\nimport { $release } from \"../releaseSlice\";\r\nimport {\r\n  createReleaseTransaction,\r\n  preValidateReleaseTransaction,\r\n} from \"../releaseUtils\";\r\nimport { releaseChainClassMap } from \"../../../services/rentx\";\r\nimport { SmallWrapper, MediumWrapper } from \"../../../components/layout/LayoutHelpers\";\r\nimport { orangeLight } from \"../../../theme/colors\";\r\n\r\nexport const ReleaseFeesStep: FunctionComponent<TxConfigurationStepProps> = ({\r\n  onPrev,\r\n}) => {\r\n  useAuthRequired(true);\r\n  const dispatch = useDispatch();\r\n  const history = useHistory();\r\n  const { account, walletConnected } = useSelectedChainWallet();\r\n  const [releasingInitialized, setReleasingInitialized] = useState(false);\r\n  const [releaseTxId, setReleaseTxId] = useState(\"\");\r\n  const [ethconf, setEthconf] = useState({});\r\n  const { currency, address, amount } = useSelector($release);\r\n  const network = useSelector($renNetwork);\r\n  const {\r\n    chain,\r\n    signatures: { signature },\r\n  } = useSelector($wallet);\r\n  const renChain = useSelector($multiwalletChain);\r\n  const { fees, pending } = useFetchFees(currency, TxType.BURN);\r\n  const {getBurn} = useBurn()\r\n\r\n  const currencyConfig = getCurrencyConfig(currency);\r\n  const chainConfig = getChainConfig(chain);\r\n  const destinationCurrency = toReleasedCurrency(currency);\r\n  \r\n  const destinationCurrencyConfig = getCurrencyConfig(destinationCurrency);\r\n  const { MainIcon } = destinationCurrencyConfig;\r\n  const tx = useMemo(\r\n    () =>\r\n      createReleaseTransaction({\r\n        currency: currency,\r\n        destAddress: address,\r\n        userAddress: account,\r\n        sourceChain: renChain,\r\n        network: network,\r\n      }),\r\n    [currency, address, account, renChain, network]\r\n  );\r\n  const canInitializeReleasing = preValidateReleaseTransaction(tx);\r\n  const { showNotification, closeNotification } = useNotifications();\r\n\r\n  const handleConfirm = useCallback(async() => {\r\n    setReleasingInitialized(true);\r\n    if (walletConnected) {\r\n      let res: any = await getBurn(address, amount, tx.sourceAsset)\r\n      console.log(res)\r\n      if(res.err!==null && res.err?.code != 0) {\r\n        setReleasingInitialized(false);\r\n        showNotification(res.err?.message as string || \"\", {\r\n          variant: \"error\",\r\n          persist: false,\r\n        });\r\n      }else{\r\n        setReleasingInitialized(false);\r\n        setReleaseTxId(res.result); // TODO: DO METAFUCK MAGIC HERE!\r\n      }\r\n    } else {\r\n      setReleasingInitialized(false);\r\n      dispatch(setWalletPickerOpened(true));\r\n    }\r\n  }, [dispatch, canInitializeReleasing, walletConnected]);\r\n  const targetCurrency = toReleasedCurrency(currency);\r\n  const releaseCurrencyConfig = getCurrencyConfig(targetCurrency);\r\n  const releaseChainConfig = getChainConfig(releaseCurrencyConfig.sourceChain);\r\n  const validateAddress = useMemo(() => {\r\n     // TODO: improve this\r\n     return validate(address, Network.mainnet)\r\n\r\n  }, [releaseChainConfig.rentxName, network, address]);\r\n\r\n  var getter = () => { \r\n    if (releaseTxId!=\"\" && ((ethconf as any)?.Executed || false) == false) {\r\n      getLogs(releaseTxId, chain==\"BSCC\"?\"binance\":\"ethereum\").then((jsonObj) => {\r\n        setEthconf(jsonObj)\r\n        const intervalObj = setTimeout(() => getter(), 3000);\r\n      }).catch(() => {\r\n        const intervalObj = setTimeout(() => getter(), 3000);\r\n      })\r\n      \r\n    }\r\n  }\r\n  useEffect(() => {\r\n    if (releaseTxId!=\"\") {\r\n      getter()\r\n    }\r\n  }, [releaseTxId]);\r\n\r\n if (releaseTxId!=\"\")\r\n  if (((ethconf as any)?.Executed || false) == true) {\r\n  return (\r\n    <>\r\n    <PaperHeader>\r\n        <PaperNav>\r\n          <IconButton onClick={onPrev}>\r\n            <BackArrowIcon />\r\n          </IconButton>\r\n        </PaperNav>\r\n        <PaperTitle>All Done</PaperTitle>\r\n        <PaperActions />\r\n      </PaperHeader>\r\n      <PaperContent bottomPadding>\r\n      <ReleaseShortcutCompletedStatus txid={releaseTxId} amount={amount} chain={tx.sourceChain} onPrev={onPrev}/>\r\n      </PaperContent>\r\n    </>)\r\n  } else {\r\n    return (\r\n      <>\r\n      <PaperHeader>\r\n          \r\n        </PaperHeader>\r\n        <PaperContent bottomPadding>\r\n\r\n      <ProgressWrapper>\r\n        <ProgressWithContent\r\n          color={orangeLight}\r\n          confirmations={(ethconf as any)?.Confirmations || 0}\r\n          targetConfirmations={5}\r\n        >\r\n          <MainIcon fontSize=\"inherit\" color=\"inherit\" />\r\n        </ProgressWithContent>\r\n      </ProgressWrapper>\r\n      <SmallWrapper>\r\n        <Typography variant=\"body1\" align=\"center\">\r\n          {(ethconf as any)?.Confirmations || 0} of {5} confirmations\r\n        </Typography>\r\n      </SmallWrapper>\r\n      <MediumWrapper>\r\n      <Typography variant=\"body1\" align=\"center\">\r\n      Please wait until your transaction has been confirmed on the {chain==\"BSCC\"?\"Binance\":\"Ethereum\"} Blockchain. Do not close this window, as your DFI  will be released after this step has completed.\r\n      </Typography>\r\n      </MediumWrapper>\r\n      </PaperContent>\r\n      </>)\r\n  }\r\n else return (\r\n     <>\r\n      <PaperHeader>\r\n        <PaperNav>\r\n          <IconButton onClick={onPrev}>\r\n            <BackArrowIcon />\r\n          </IconButton>\r\n        </PaperNav>\r\n        <PaperTitle>Fees & Confirm</PaperTitle>\r\n        <PaperActions />\r\n      </PaperHeader>\r\n\r\n      <PaperContent bottomPadding>\r\n        <BigAssetAmountWrapper>\r\n          <BigAssetAmount\r\n            value={\r\n              <NumberFormatText\r\n                value={amount}\r\n                spacedSuffix={currencyConfig.short}\r\n              />\r\n            }\r\n          />\r\n        </BigAssetAmountWrapper>\r\n        <Typography variant=\"body1\" gutterBottom>\r\n          Details\r\n        </Typography>\r\n        <LabelWithValue\r\n          label=\"Releasing\"\r\n          labelTooltip={releaseTooltips.releasing}\r\n          value={\r\n            <NumberFormatText\r\n              value={amount}\r\n              spacedSuffix={currencyConfig.short}\r\n            />\r\n          }\r\n        />\r\n        <LabelWithValue\r\n          label=\"From\"\r\n          labelTooltip={releaseTooltips.from}\r\n          value={chainConfig.full}\r\n        />\r\n        <LabelWithValue\r\n          label=\"To\"\r\n          labelTooltip={releaseTooltips.to}\r\n          value={<MiddleEllipsisText hoverable>{address}</MiddleEllipsisText>}\r\n        />\r\n        <SpacedDivider />\r\n        <Typography variant=\"body1\" gutterBottom>\r\n          Fees\r\n        </Typography>\r\n        <TransactionFees\r\n          chain={chain}\r\n          currency={currency}\r\n          type={TxType.BURN}\r\n          hideButton={true}\r\n        />\r\n      </PaperContent>\r\n      <Divider />\r\n      <PaperContent darker topPadding bottomPadding>\r\n        <ActionButtonWrapper>\r\n          <ActionButton onClick={handleConfirm} disabled={releasingInitialized || amount<=0.01 || !validateAddress}>\r\n            {!walletConnected\r\n              ? \"Connect Wallet\"\r\n              : releasingInitialized\r\n              ? \"Confirming...\"\r\n              : \"Confirm\"}\r\n          </ActionButton>\r\n        </ActionButtonWrapper>\r\n      </PaperContent>\r\n    </>\r\n  );\r\n};\r\n","import {\r\n  OutlinedInputProps,\r\n  styled,\r\n  TextField,\r\n  TextFieldProps,\r\n} from \"@material-ui/core\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport React, { FunctionComponent } from \"react\";\r\n\r\nexport const useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    fontSize: 13,\r\n    // border: `1px solid ${theme.palette.primary.main}`,\r\n    // borderRadius: 20,\r\n    // padding: 18,\r\n  },\r\n  input: {\r\n    paddingTop: 10,\r\n    fontSize: 13,\r\n  },\r\n}));\r\n\r\nexport const OutlinedTextField: FunctionComponent<TextFieldProps> = (props) => {\r\n  const { input, ...classes } = useStyles();\r\n  return (\r\n    <TextField\r\n      classes={classes}\r\n      variant=\"outlined\"\r\n      InputProps={\r\n        { notched: false, classes: { root: input } } as OutlinedInputProps\r\n      }\r\n      fullWidth\r\n      {...props}\r\n    />\r\n  );\r\n};\r\n\r\nexport const OutlinedTextFieldWrapper = styled(\"div\")({\r\n  minHeight: 75,\r\n});\r\n\r\nexport const BigOutlinedTextFieldWrapper = styled(\"div\")({\r\n  marginTop: 40,\r\n  marginBottom: 10,\r\n});\r\n\r\nexport const SmallOutlinedTextFieldWrapper = styled(\"div\")({\r\n  marginTop: 0,\r\n  marginBottom: 25,\r\n});\r\n","import { Divider,   DialogActions,\r\n  Fade, Typography, Box,\r\n  Button,\r\n  DialogContent,\r\n  TextField,\r\n  makeStyles, } from \"@material-ui/core\";\r\nimport React, { FunctionComponent, useCallback, useMemo, useState } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport {\r\n  ActionButton,\r\n  ActionButtonWrapper,\r\n} from \"../../../components/buttons/Buttons\";\r\nimport {\r\n  AssetDropdown,\r\n  AssetDropdownWrapper,\r\n} from \"../../../components/dropdowns/AssetDropdown\";\r\nimport { NumberFormatText } from \"../../../components/formatting/NumberFormatText\";\r\nimport {\r\n  OutlinedTextField,\r\n  BigOutlinedTextFieldWrapper,SmallOutlinedTextFieldWrapper\r\n} from \"../../../components/inputs/OutlinedTextField\";\r\nimport {\r\n  BigCurrencyInput,\r\n  BigCurrencyInputWrapper,\r\n} from \"../../../components/inputs/BigCurrencyInput\";\r\nimport { PaperContent } from \"../../../components/layout/Paper\";\r\nimport { Link } from \"../../../components/links/Links\";\r\nimport { CenteredProgress } from \"../../../components/progress/ProgressHelpers\";\r\nimport { TooltipWithIcon } from \"../../../components/tooltips/TooltipWithIcon\";\r\nimport {\r\n  AssetInfo,\r\n  LabelWithValue,\r\n} from \"../../../components/typography/TypographyHelpers\";\r\nimport { releaseChainClassMap } from \"../../../services/rentx\";\r\nimport {\r\n  getChainConfig,\r\n  getCurrencyConfig,\r\n  supportedBurnChains,\r\n  supportedReleaseCurrencies,\r\n  toReleasedCurrency,\r\n} from \"../../../utils/assetConfigs\";\r\nimport { useFetchFees } from \"../../fees/feesHooks\";\r\nimport { getTransactionFees } from \"../../fees/feesUtils\";\r\nimport { $renNetwork } from \"../../network/networkSlice\";\r\nimport { useRenNetworkTracker } from \"../../transactions/transactionsHooks\";\r\nimport {\r\n  isMinimalAmount,\r\n  TxConfigurationStepProps,\r\n  TxType,\r\n} from \"../../transactions/transactionsUtils\";\r\nimport { useSelectedChainWallet } from \"../../wallet/walletHooks\";\r\nimport {\r\n  $wallet,\r\n  setChain,\r\n  setWalletPickerOpened,\r\n} from \"../../wallet/walletSlice\";\r\nimport { getAssetBalance, useFetchBalances } from \"../../wallet/walletUtils\";\r\nimport {\r\n  $release,\r\n  setReleaseAddress,\r\n  setReleaseCurrency,\r\n  setReleaseAmount,\r\n} from \"../releaseSlice\";\r\nimport validate, { Network } from \"../releaseAddressValidator\";\r\nimport { BridgeModal } from \"../../../components/modals/BridgeModal\";\r\nimport { Alert } from \"@material-ui/lab\";\r\nimport { getLogs } from \"../../../services/bridge\";\r\n\r\nexport const ReleaseInitialStep: FunctionComponent<TxConfigurationStepProps> = ({\r\n  onNext,\r\n}) => {\r\n  const dispatch = useDispatch();\r\n  const { walletConnected } = useSelectedChainWallet();\r\n  const { chain, balances } = useSelector($wallet);\r\n  const network = useSelector($renNetwork);\r\n  const { currency, address, amount } = useSelector($release);\r\n  const balance = getAssetBalance(balances, currency);\r\n  const [recoverProcessing, setRecoverProcessing] = useState(false);\r\n\r\n  useRenNetworkTracker(currency);\r\n  useFetchBalances(supportedReleaseCurrencies);\r\n  const { fees, pending } = useFetchFees(currency, TxType.BURN);\r\n \r\n\r\n  const handleChainChange = useCallback(\r\n    (event) => {\r\n      dispatch(setChain(event.target.value));\r\n    },\r\n    [dispatch]\r\n  );\r\n  const handleCurrencyChange = useCallback(\r\n    (event) => {\r\n      dispatch(setReleaseCurrency(event.target.value));\r\n    },\r\n    [dispatch]\r\n  );\r\n \r\n  const handleAddressChange = useCallback(\r\n    (event) => {\r\n      dispatch(setReleaseAddress(event.target.value));\r\n    },\r\n    [dispatch]\r\n  );\r\n  \r\n  const handleAmountChange = useCallback(\r\n    (event) => {\r\n      dispatch(setReleaseAmount(event.target.value));\r\n    },\r\n    [dispatch]\r\n  );\r\n\r\n  const [recoverOpened, setRecoverOpened] = useState(false);\r\n  const handleRecover = useCallback((e) => {\r\n    setRecoverOpened(true);\r\n    setRecoverError(\"\");\r\n    setRecoverGood(\"\");\r\n    setRecoverProcessing(false);\r\n    e.preventDefault();\r\n  }, []);\r\n  const handleRecoverClose = useCallback(() => {\r\n    setRecoverOpened(false);\r\n  }, []);\r\n \r\n\r\n  \r\n\r\n  const targetCurrency = toReleasedCurrency(currency);\r\n  const currencyConfig = getCurrencyConfig(currency);\r\n  const releaseCurrencyConfig = getCurrencyConfig(targetCurrency);\r\n  const { MainIcon } = releaseCurrencyConfig;\r\n  const releaseChainConfig = getChainConfig(releaseCurrencyConfig.sourceChain);\r\n  const [recoverError, setRecoverError] = useState(\"\");\r\n  const [recoverGood, setRecoverGood] = useState(\"\");\r\n  const [recoverTxId, setRecoverTxId] = useState(\"\");\r\n\r\n  const validateAddress = useMemo(() => {\r\n    // TODO: improve this\r\n    return validate(address, Network.mainnet)\r\n\r\n }, [releaseChainConfig.rentxName, network, address]);\r\n  \r\n  const basicCondition =\r\n    address &&\r\n    validateAddress &&\r\n    !pending;\r\n  const hasBalance = balance !== null;\r\n  let enabled;\r\n  if (walletConnected) {\r\n    enabled = basicCondition && amount>0.1; // TODO: also check balance here\r\n  } else {\r\n    enabled = basicCondition && amount>0.1;\r\n  }\r\n  const showMinimalAmountError =\r\n    walletConnected && !pending;\r\n\r\n  const handleRecoverNext = useCallback(() => {\r\n    setRecoverError(\"\") \r\n    setRecoverGood(\"\")\r\n      setRecoverProcessing(true);\r\n      try {\r\n        getLogs(recoverTxId, chain==\"BSCC\"?\"binance\":\"ethereum\").then((jsonObj) => {\r\n          if(jsonObj.status == 2) {\r\n            setRecoverError(jsonObj.blame?.fail_reason || \"unknown error\")\r\n            setRecoverProcessing(false);\r\n          }else{\r\n            console.log(jsonObj)\r\n            setRecoverGood(\"Broadcasted raw tx: \" + jsonObj.DefiTx)\r\n            setRecoverProcessing(false);\r\n          }\r\n        }).catch((e) => {\r\n          setRecoverError(e.toString())\r\n          setRecoverProcessing(false);\r\n        })\r\n      }\r\n      catch(e) {\r\n        setRecoverError(e.toString())\r\n        setRecoverProcessing(false);\r\n      }\r\n\r\n  }, [recoverTxId, chain])\r\n\r\n  const handleNextStep = useCallback(() => {\r\n    if (!walletConnected) {\r\n      dispatch(setWalletPickerOpened(true));\r\n    }\r\n    if (onNext && basicCondition && hasBalance) {\r\n      onNext();\r\n    }\r\n  }, [dispatch, onNext, walletConnected, basicCondition, hasBalance]);\r\n\r\n\r\n  const useStyles = makeStyles((theme) => ({\r\n    root: {\r\n      \"& .MuiInputBase-input\": {\r\n        background: \"rgb(232, 241, 250)\"\r\n      },\r\n      \"& .MuiAlert-message\": { \r\n        overflowWrap: \"anywhere\"\r\n     }\r\n    }\r\n  }));\r\n  const classes = useStyles()\r\n  return (\r\n    <>\r\n      <PaperContent>\r\n        <AssetDropdownWrapper>\r\n          <AssetDropdown\r\n            label=\"Chain\"\r\n            mode=\"chain\"\r\n            available={supportedBurnChains}\r\n            value={chain}\r\n            onChange={handleChainChange}\r\n          />\r\n        </AssetDropdownWrapper>\r\n        <AssetDropdownWrapper>\r\n          <AssetDropdown\r\n            label=\"Asset\"\r\n            mode=\"send\"\r\n            available={supportedReleaseCurrencies}\r\n            balances={balances}\r\n            value={currency}\r\n            onChange={handleCurrencyChange}\r\n          />\r\n        </AssetDropdownWrapper>\r\n       \r\n        <BigOutlinedTextFieldWrapper>\r\n          <OutlinedTextField\r\n            error={!!address && !validateAddress}\r\n            placeholder={`Enter a Destination ${releaseChainConfig.full} Address`}\r\n            label=\"Releasing to\"\r\n            onChange={handleAddressChange}\r\n            value={address}\r\n          />\r\n        </BigOutlinedTextFieldWrapper>\r\n        <SmallOutlinedTextFieldWrapper>\r\n          <OutlinedTextField\r\n            error={!!address && !validateAddress}\r\n            placeholder={`Enter an Amount`}\r\n            label=\"Amount to Burn/Transfer\"\r\n            onChange={handleAmountChange}\r\n            \r\n\r\n          />\r\n        </SmallOutlinedTextFieldWrapper>\r\n      </PaperContent>\r\n      <Divider />\r\n      <PaperContent darker topPadding bottomPadding>\r\n        <ActionButtonWrapper>\r\n          <ActionButton\r\n            onClick={handleNextStep}\r\n            disabled={walletConnected ? !enabled : false}\r\n          >\r\n            {walletConnected ? \"Next\" : \"Connect Wallet\"}\r\n          </ActionButton>\r\n        </ActionButtonWrapper>\r\n        <Typography\r\n          variant=\"subtitle2\"\r\n          align=\"center\"\r\n          color=\"textSecondary\"\r\n          gutterBottom\r\n        >\r\n        {walletConnected ? <Link href={'#'} onClick={handleRecover} color='textSecondary'>\r\n            Click here to recover an incomplete transaction\r\n        </Link> : \"\"}\r\n        </Typography>\r\n      </PaperContent>\r\n      <BridgeModal\r\n        open={recoverOpened}\r\n        title=\"Recovery\"\r\n        onClose={handleRecoverClose}\r\n      >\r\n      <DialogContent>\r\n          {recoverError!=\"\" ? <Box mb={2}><Alert severity=\"error\">{recoverError}</Alert></Box> : \"\"}\r\n          {recoverGood!=\"\" ? <Box mb={2}><Alert className={classes.root} severity=\"success\">{recoverGood}</Alert></Box> : \"\"}\r\n          <Typography variant=\"h5\" align=\"center\" gutterBottom>\r\n            Transaction Recovery\r\n          </Typography>\r\n          <Typography variant=\"body2\" align=\"center\" gutterBottom>\r\n            If you haven't received your native DFI after burning them on {chain.toString()==\"BSCC\" ? \"Binance\" : \"Ethereum\"}, you can use this recovery form to re-request them. Let's start with the transaction id of your burn transaction.\r\n          </Typography>\r\n          <Box mt={3} alignItems=\"center\" justifyContent=\"center\" display=\"flex\" >\r\n          <TextField autoFocus className={classes.root} style ={{width: '60%'}} \r\n            label={chain.toString()==\"BSCC\" ? \"Enter your Binance TxID\" : \"Enter your Ethereum TxID\"}\r\n            onChange={(e) => {\r\n              setRecoverTxId(e.target.value);\r\n            }}\r\n          />\r\n          </Box>\r\n          <Box mt={5} alignItems=\"center\" justifyContent=\"center\" display=\"flex\" >\r\n             <ActionButton disabled={recoverProcessing} onClick={handleRecoverNext}>{!recoverProcessing ? \"Recover\" : \"Wait ... might take some time.\"}</ActionButton>\r\n          </Box>\r\n      </DialogContent>\r\n      </BridgeModal>\r\n    </>\r\n  );\r\n};\r\n","import {\r\n  Button,\r\n  ClickAwayListener,\r\n  Tooltip,\r\n  Typography,\r\n} from \"@material-ui/core\";\r\nimport React, { FunctionComponent } from \"react\";\r\nimport {\r\n  ActionButton,\r\n  ActionButtonWrapper,\r\n  ToggleIconButton,\r\n  ToggleIconButtonProps,\r\n} from \"../../../components/buttons/Buttons\";\r\nimport { PaperContent } from \"../../../components/layout/Paper\";\r\nimport {\r\n  NestedDrawer,\r\n  NestedDrawerActions,\r\n  NestedDrawerContent,\r\n  NestedDrawerWrapper,\r\n} from \"../../../components/modals/BridgeModal\";\r\n\r\ntype BrowserNotificationsDrawerProps = {\r\n  open: boolean;\r\n  onClose: () => void;\r\n  onEnable: () => void;\r\n};\r\n\r\nexport const BrowserNotificationsDrawer: FunctionComponent<BrowserNotificationsDrawerProps> = ({\r\n  open,\r\n  onClose,\r\n  onEnable,\r\n}) => {\r\n  return (\r\n    <NestedDrawer title=\" \" open={open} onClose={onClose}>\r\n      <NestedDrawerWrapper>\r\n        <NestedDrawerContent>\r\n          <PaperContent topPadding>\r\n            <Typography variant=\"h5\" align=\"center\" gutterBottom>\r\n              Enable browser notifications\r\n            </Typography>\r\n            <Typography\r\n              variant=\"subtitle1\"\r\n              align=\"center\"\r\n              color=\"textSecondary\"\r\n              gutterBottom\r\n            >\r\n              It will let you track transaction progress.\r\n            </Typography>\r\n          </PaperContent>\r\n        </NestedDrawerContent>\r\n        <NestedDrawerActions>\r\n          <PaperContent bottomPadding>\r\n            <ActionButtonWrapper>\r\n              <Button variant=\"text\" color=\"primary\" onClick={onClose}>\r\n                Do not enable\r\n              </Button>\r\n            </ActionButtonWrapper>\r\n            <ActionButtonWrapper>\r\n              <ActionButton onClick={onEnable}>\r\n                Enable Browser Notifications\r\n              </ActionButton>\r\n            </ActionButtonWrapper>\r\n          </PaperContent>\r\n        </NestedDrawerActions>\r\n      </NestedDrawerWrapper>\r\n    </NestedDrawer>\r\n  );\r\n};\r\n\r\ntype BrowserNotificationButtonProps = ToggleIconButtonProps & {\r\n  onTooltipClose: () => void;\r\n  tooltipOpened: boolean;\r\n};\r\n\r\nexport const BrowserNotificationButton: FunctionComponent<BrowserNotificationButtonProps> = ({\r\n  pressed,\r\n  onClick,\r\n  onTooltipClose,\r\n  tooltipOpened,\r\n}) => {\r\n  return (\r\n    <ClickAwayListener onClickAway={onTooltipClose}>\r\n      <Tooltip\r\n        onClose={onTooltipClose}\r\n        open={tooltipOpened}\r\n        disableFocusListener\r\n        disableHoverListener\r\n        disableTouchListener\r\n        title=\"Turn off browser notifications in your browser settings.\"\r\n      >\r\n        <span>\r\n          <ToggleIconButton\r\n            pressed={pressed}\r\n            variant=\"notifications\"\r\n            onClick={onClick}\r\n          />\r\n        </span>\r\n      </Tooltip>\r\n    </ClickAwayListener>\r\n  );\r\n};\r\n","import {\r\n  Button,\r\n  Divider,\r\n  ListItemIcon,\r\n  makeStyles,\r\n  MenuItem,\r\n  MenuItemProps,\r\n  Typography,\r\n} from \"@material-ui/core\";\r\nimport { GatewaySession } from \"@renproject/ren-tx\";\r\nimport classNames from \"classnames\";\r\nimport React, { FunctionComponent, useCallback, useState } from \"react\";\r\nimport {\r\n  ActionButton,\r\n  ActionButtonWrapper,\r\n  RedButton,\r\n} from \"../../../components/buttons/Buttons\";\r\nimport { CircleIcon } from \"../../../components/icons/IconHelpers\";\r\nimport {\r\n  AddIcon,\r\n  CustomSvgIconComponent,\r\n  DeleteIcon,\r\n  TxSettingsIcon,\r\n} from \"../../../components/icons/RenIcons\";\r\nimport {\r\n  OutlinedTextField,\r\n  OutlinedTextFieldWrapper,\r\n} from \"../../../components/inputs/OutlinedTextField\";\r\nimport { PaperContent } from \"../../../components/layout/Paper\";\r\nimport { externalLinkAttributes } from \"../../../components/links/Links\";\r\nimport {\r\n  BridgeModalTitle,\r\n  NestedDrawer,\r\n  NestedDrawerActions,\r\n  NestedDrawerContent,\r\n  NestedDrawerWrapper,\r\n} from \"../../../components/modals/BridgeModal\";\r\n\r\nconst useTransactionMenuItemStyles = makeStyles((theme) => ({\r\n  root: {\r\n    padding: \"8px 20px\",\r\n    fontSize: 12,\r\n  },\r\n  iconWrapper: {\r\n    minWidth: 32,\r\n  },\r\n}));\r\n\r\ntype TransactionMenuItemProps = MenuItemProps & {\r\n  Icon: CustomSvgIconComponent;\r\n};\r\n\r\nexport const TransactionMenuItem: FunctionComponent<TransactionMenuItemProps> = ({\r\n  onClick,\r\n  Icon,\r\n  children,\r\n  className,\r\n  button,\r\n  ...rest\r\n}) => {\r\n  const styles = useTransactionMenuItemStyles();\r\n  return (\r\n    <MenuItem\r\n      dense\r\n      onClick={onClick}\r\n      className={classNames(styles.root, className)}\r\n      {...rest}\r\n    >\r\n      <ListItemIcon className={styles.iconWrapper}>\r\n        <CircleIcon Icon={Icon} fontSize=\"small\" variant=\"outlined\" />\r\n      </ListItemIcon>\r\n      <Typography variant=\"inherit\">{children}</Typography>\r\n    </MenuItem>\r\n  );\r\n};\r\n\r\nconst useTransactionMenuStyles = makeStyles((theme) => ({\r\n  root: {\r\n    fontSize: 12,\r\n  },\r\n  modalTitle: {\r\n    padding: `12px 20px`,\r\n  },\r\n  titleIconWrapper: {\r\n    minWidth: 32,\r\n  },\r\n  menuItems: {\r\n    paddingTop: 6,\r\n    minHeight: 150,\r\n  },\r\n  transferId: {\r\n    paddingBottom: 10,\r\n  },\r\n}));\r\n\r\nexport type UpdateTxFn = (amount: number, vOut: number, txHash: string) => void;\r\n\r\ntype TransactionMenuProps = {\r\n  open: boolean;\r\n  onClose: () => void;\r\n  onDeleteTx: () => void;\r\n  onUpdateTx?: UpdateTxFn;\r\n  tx: GatewaySession;\r\n};\r\n\r\nexport const TransactionMenu: FunctionComponent<TransactionMenuProps> = ({\r\n  open,\r\n  onClose,\r\n  onDeleteTx,\r\n  onUpdateTx,\r\n  tx,\r\n}) => {\r\n  const styles = useTransactionMenuStyles();\r\n  const handleClose = useCallback(() => {\r\n    if (onClose) {\r\n      onClose();\r\n    }\r\n  }, [onClose]);\r\n  const [confirmOpen, setConfirmOpen] = useState(false);\r\n  const handleConfirmClose = useCallback(() => {\r\n    setConfirmOpen(false);\r\n  }, []);\r\n  const handleDeleteWithConfirm = useCallback(() => {\r\n    setConfirmOpen(true);\r\n  }, []);\r\n\r\n  const [updateOpen, setUpdateOpen] = useState(false);\r\n  const handleUpdateClose = useCallback(() => {\r\n    setUpdateOpen(false);\r\n  }, []);\r\n  const handleUpdateOpen = useCallback(() => {\r\n    setUpdateOpen(true);\r\n  }, []);\r\n\r\n  return (\r\n    <>\r\n      <NestedDrawer open={open} onClose={handleClose} className={styles.root}>\r\n        <BridgeModalTitle className={styles.modalTitle} onClose={handleClose}>\r\n          <ListItemIcon className={styles.titleIconWrapper}>\r\n            <CircleIcon\r\n              Icon={TxSettingsIcon}\r\n              fontSize=\"small\"\r\n              variant=\"solid\"\r\n            />\r\n          </ListItemIcon>\r\n          <Typography variant=\"inherit\">Transaction Menu</Typography>\r\n        </BridgeModalTitle>\r\n        <NestedDrawerWrapper>\r\n          <NestedDrawerContent>\r\n            <div className={styles.menuItems}>\r\n              <TransactionMenuItem Icon={AddIcon} onClick={handleUpdateOpen}>\r\n                Insert/update transaction\r\n              </TransactionMenuItem>\r\n              <TransactionMenuItem\r\n                Icon={DeleteIcon}\r\n                onClick={handleDeleteWithConfirm}\r\n              >\r\n                Delete transaction\r\n              </TransactionMenuItem>\r\n            </div>\r\n          </NestedDrawerContent>\r\n          <NestedDrawerActions>\r\n            <PaperContent paddingVariant=\"medium\" className={styles.transferId}>\r\n              <Typography variant=\"inherit\">Transfer ID: {tx.id}</Typography>\r\n            </PaperContent>\r\n            <Divider />\r\n            <PaperContent bottomPadding topPadding paddingVariant=\"medium\">\r\n              <Button\r\n                variant=\"outlined\"\r\n                size=\"small\"\r\n                href=\"https://renprotocol.typeform.com/to/YdmFyB\"\r\n                {...externalLinkAttributes}\r\n              >\r\n                Report an Issue\r\n              </Button>\r\n            </PaperContent>\r\n          </NestedDrawerActions>\r\n        </NestedDrawerWrapper>\r\n      </NestedDrawer>\r\n      <ConfirmTransactionDeletionDrawer\r\n        open={confirmOpen}\r\n        onClose={handleConfirmClose as any}\r\n        onDeleteTx={onDeleteTx}\r\n      />\r\n      {onUpdateTx && (\r\n        <UpdateTransactionDrawer\r\n          open={updateOpen}\r\n          onClose={handleUpdateClose}\r\n          onUpdateTx={onUpdateTx}\r\n        />\r\n      )}\r\n    </>\r\n  );\r\n};\r\n\r\ntype ConfirmTransactionDeletionDrawerProps = {\r\n  open: boolean;\r\n  onClose: () => void;\r\n  onDeleteTx: () => void;\r\n};\r\n\r\nexport const ConfirmTransactionDeletionDrawer: FunctionComponent<ConfirmTransactionDeletionDrawerProps> = ({\r\n  open,\r\n  onClose,\r\n  onDeleteTx,\r\n}) => {\r\n  const [deleting, setDeleting] = useState(false);\r\n  const handleDeleteTx = useCallback(() => {\r\n    setDeleting(true);\r\n    onDeleteTx();\r\n  }, [onDeleteTx]);\r\n  return (\r\n    <NestedDrawer title=\"Delete a Transaction\" open={open} onClose={onClose}>\r\n      <NestedDrawerWrapper>\r\n        <NestedDrawerContent>\r\n          <PaperContent topPadding>\r\n            <Typography variant=\"h5\" align=\"center\" gutterBottom>\r\n              Are you sure?\r\n            </Typography>\r\n            <Typography\r\n              variant=\"body2\"\r\n              align=\"center\"\r\n              color=\"textSecondary\"\r\n              gutterBottom\r\n            >\r\n              If you have already sent your assets you will lose them forever if\r\n              you remove the transaction.\r\n            </Typography>\r\n          </PaperContent>\r\n        </NestedDrawerContent>\r\n        <NestedDrawerActions>\r\n          <PaperContent bottomPadding>\r\n            <ActionButtonWrapper>\r\n              <RedButton\r\n                variant=\"text\"\r\n                color=\"inherit\"\r\n                startIcon={<DeleteIcon />}\r\n                onClick={handleDeleteTx}\r\n                disabled={deleting}\r\n              >\r\n                {deleting ? \"Removing...\" : \"Remove\"} Transaction\r\n              </RedButton>\r\n            </ActionButtonWrapper>\r\n            <ActionButtonWrapper>\r\n              <ActionButton onClick={onClose} disabled={deleting}>\r\n                Cancel\r\n              </ActionButton>\r\n            </ActionButtonWrapper>\r\n          </PaperContent>\r\n        </NestedDrawerActions>\r\n      </NestedDrawerWrapper>\r\n    </NestedDrawer>\r\n  );\r\n};\r\n\r\ntype UpdateTransactionDrawerProps = {\r\n  open: boolean;\r\n  onClose: () => void;\r\n  onUpdateTx: UpdateTxFn;\r\n};\r\n\r\nconst isValidInteger = (amount: string) => {\r\n  return Number.isInteger(Number(amount));\r\n};\r\n\r\nexport const UpdateTransactionDrawer: FunctionComponent<UpdateTransactionDrawerProps> = ({\r\n  open,\r\n  onClose,\r\n  onUpdateTx,\r\n}) => {\r\n  const [amount, setAmount] = useState(\"\");\r\n  const [vout, setVout] = useState(\"\");\r\n  const [hash, setHash] = useState(\"\");\r\n  const [updating, setUpdating] = useState(false);\r\n  const valid = amount && vout && hash;\r\n  const handleAmountChange = useCallback((event) => {\r\n    const newValue = event.target.value;\r\n    if (isValidInteger(newValue)) {\r\n      setAmount(newValue);\r\n    }\r\n  }, []);\r\n  const handleVoutChange = useCallback((event) => {\r\n    const newValue = event.target.value;\r\n    if (isValidInteger(newValue)) {\r\n      setVout(newValue);\r\n    }\r\n  }, []);\r\n  const handleHashChange = useCallback((event) => {\r\n    setHash(event.target.value);\r\n  }, []);\r\n\r\n  const handleUpdateTx = useCallback(() => {\r\n    setUpdating(true);\r\n    onUpdateTx(Number(amount), Number(vout), hash);\r\n  }, [onUpdateTx, hash, vout, amount]);\r\n\r\n  return (\r\n    <NestedDrawer title=\"Update Transaction Hash\" open={open} onClose={onClose}>\r\n      <NestedDrawerWrapper>\r\n        <NestedDrawerContent>\r\n          <PaperContent topPadding>\r\n            <OutlinedTextFieldWrapper>\r\n              <OutlinedTextField\r\n                label=\"Amount (sats)\"\r\n                value={amount}\r\n                onChange={handleAmountChange}\r\n                placeholder=\"Enter amount in sats\"\r\n              />\r\n            </OutlinedTextFieldWrapper>\r\n            <OutlinedTextFieldWrapper>\r\n              <OutlinedTextField\r\n                label=\"Transaction Hash\"\r\n                value={hash}\r\n                onChange={handleHashChange}\r\n                placeholder=\"Enter transaction hash\"\r\n              />\r\n            </OutlinedTextFieldWrapper>\r\n            <OutlinedTextFieldWrapper>\r\n              <OutlinedTextField\r\n                label=\"vOut\"\r\n                value={vout}\r\n                onChange={handleVoutChange}\r\n                placeholder=\"Enter transaction vOut\"\r\n              />\r\n            </OutlinedTextFieldWrapper>\r\n          </PaperContent>\r\n        </NestedDrawerContent>\r\n        <NestedDrawerActions>\r\n          <PaperContent bottomPadding>\r\n            <ActionButtonWrapper>\r\n              <RedButton\r\n                variant=\"text\"\r\n                color=\"inherit\"\r\n                onClick={handleUpdateTx}\r\n                disabled={updating || !valid}\r\n              >\r\n                {updating ? \"Updating...\" : \"Update\"} transaction\r\n              </RedButton>\r\n            </ActionButtonWrapper>\r\n            <ActionButtonWrapper>\r\n              <ActionButton onClick={onClose} disabled={updating}>\r\n                Cancel\r\n              </ActionButton>\r\n            </ActionButtonWrapper>\r\n          </PaperContent>\r\n        </NestedDrawerActions>\r\n      </NestedDrawerWrapper>\r\n    </NestedDrawer>\r\n  );\r\n};\r\n","import { useMultiwallet } from \"@renproject/multiwallet-ui\";\r\nimport {\r\n  burnMachine,\r\n  BurnMachineContext,\r\n  BurnMachineEvent,\r\n  BurnMachineSchema,\r\n  GatewaySession,\r\n} from \"@renproject/ren-tx\";\r\nimport { useMachine } from \"@xstate/react\";\r\nimport { useCallback, useEffect } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { Interpreter, State } from \"xstate\";\r\nimport { env } from \"../../constants/environmentVariables\";\r\nimport { db } from \"../../services/database/database\";\r\nimport { getRenJs } from \"../../services/renJs\";\r\nimport { burnChainMap, releaseChainMap } from \"../../services/rentx\";\r\nimport { $renNetwork } from \"../network/networkSlice\";\r\nimport { updateTransaction } from \"../transactions/transactionsSlice\";\r\nimport { cloneTx } from \"../transactions/transactionsUtils\";\r\n\r\nexport const useBurnMachine = (burnTransaction: GatewaySession) => {\r\n  const tx = cloneTx(burnTransaction);\r\n  const { enabledChains } = useMultiwallet();\r\n  const network = useSelector($renNetwork);\r\n  const providers = Object.entries(enabledChains).reduce(\r\n    (c, n) => ({\r\n      ...c,\r\n      [n[0]]: n[1].provider,\r\n    }),\r\n    {}\r\n  );\r\n  const machineHook = useMachine(burnMachine, {\r\n    context: {\r\n      tx,\r\n      providers,\r\n      sdk: getRenJs(network),\r\n      fromChainMap: burnChainMap,\r\n      toChainMap: releaseChainMap,\r\n      // If we already have a transaction, we need to autoSubmit\r\n      // to check the tx status\r\n      autoSubmit: !!Object.values(burnTransaction.transactions)[0],\r\n    },\r\n    devTools: env.XSTATE_DEVTOOLS,\r\n  });\r\n\r\n  useReleaseTransactionPersistence(machineHook[2]);\r\n\r\n  return machineHook;\r\n};\r\n\r\nexport type BurnMachineSchemaState = keyof BurnMachineSchema[\"states\"];\r\n\r\nexport const useReleaseTransactionPersistence = (\r\n  service: Interpreter<BurnMachineContext, any, BurnMachineEvent>\r\n) => {\r\n\r\n};\r\n","import { Divider, IconButton, } from '@material-ui/core'\r\nimport { BurnMachineSchema, GatewaySession } from '@renproject/ren-tx'\r\nimport React, {\r\n  FunctionComponent,\r\n  useCallback,\r\n  useEffect,\r\n  useState,\r\n} from 'react'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { RouteComponentProps, useHistory, useLocation } from 'react-router-dom'\r\nimport {\r\n  ActionButton,\r\n  ToggleIconButton,\r\n} from '../../../components/buttons/Buttons'\r\nimport { NumberFormatText } from '../../../components/formatting/NumberFormatText'\r\nimport { BackArrowIcon } from '../../../components/icons/RenIcons'\r\nimport {\r\n  CenteringSpacedBox,\r\n  PaperSpacerWrapper,\r\n} from '../../../components/layout/LayoutHelpers'\r\nimport {\r\n  PaperActions,\r\n  PaperContent,\r\n  PaperHeader,\r\n  PaperNav,\r\n  PaperTitle,\r\n} from '../../../components/layout/Paper'\r\nimport {\r\n  LabelWithValue,\r\n  MiddleEllipsisText,\r\n  SpacedDivider,\r\n} from '../../../components/typography/TypographyHelpers'\r\nimport { Debug } from '../../../components/utils/Debug'\r\nimport { WalletStatus } from '../../../components/utils/types'\r\nimport { WalletConnectionProgress } from '../../../components/wallet/WalletHelpers'\r\nimport { paths } from '../../../pages/routes'\r\nimport { usePageTitle, usePaperTitle } from '../../../providers/TitleProviders'\r\nimport { getChainConfigByRentxName } from '../../../utils/assetConfigs'\r\n\r\nimport {\r\n  BrowserNotificationButton,\r\n  BrowserNotificationsDrawer,\r\n} from '../../notifications/components/NotificationsHelpers'\r\nimport {\r\n  useBrowserNotifications,\r\n  useBrowserNotificationsConfirmation,\r\n} from '../../notifications/notificationsUtils'\r\nimport { TransactionFees } from '../../transactions/components/TransactionFees'\r\nimport { TransactionMenu } from '../../transactions/components/TransactionMenu'\r\nimport { ProgressStatus } from '../../transactions/components/TransactionsHelpers'\r\nimport {\r\n  useSetCurrentTxId,\r\n  useTransactionDeletion,\r\n} from '../../transactions/transactionsHooks'\r\nimport {\r\n  createTxQueryString,\r\n  getTxPageTitle,\r\n  TxType,\r\n  useTxParam,\r\n} from '../../transactions/transactionsUtils'\r\nimport {\r\n  useAuthRequired,\r\n  useSelectedChainWallet,\r\n} from '../../wallet/walletHooks'\r\nimport {\r\n  $chain,\r\n  setChain,\r\n  setWalletPickerOpened,\r\n} from '../../wallet/walletSlice'\r\nimport {\r\n  ReleaseCompletedStatus,\r\n  ReleaseProgressStatus,\r\n} from '../components/ReleaseStatuses'\r\nimport { useBurnMachine } from '../releaseHooks'\r\nimport { getBurnAndReleaseParams } from '../releaseUtils'\r\n\r\nexport const ReleaseProcessStep: FunctionComponent<RouteComponentProps> = ({\r\n  history,\r\n  location,\r\n}) => {\r\n  useAuthRequired(true);\r\n  const dispatch = useDispatch();\r\n  const { status } = useSelectedChainWallet();\r\n  const walletConnected = status === WalletStatus.CONNECTED;\r\n  const chain = useSelector($chain);\r\n  const [reloading, setReloading] = useState(false);\r\n  const { tx: parsedTx, txState } = useTxParam();\r\n  const [tx, setTx] = useState<GatewaySession>(parsedTx as GatewaySession); // TODO Partial<GatewaySession>\r\n  useSetCurrentTxId(tx.id);\r\n\r\n  usePageTitle(getTxPageTitle(tx));\r\n  const [paperTitle, setPaperTitle] = usePaperTitle();\r\n  useEffect(() => {\r\n    if (!walletConnected) {\r\n      setPaperTitle(\"Resume Transaction\");\r\n    }\r\n  }, [walletConnected, setPaperTitle]);\r\n\r\n  useEffect(() => {\r\n    if (txState?.reloadTx) {\r\n      setTx(parsedTx as GatewaySession);\r\n      setReloading(true);\r\n      history.replace({ ...location, state: undefined });\r\n      setTimeout(() => {\r\n        setReloading(false);\r\n      }, 1000);\r\n    }\r\n  }, [history, location, txState, parsedTx]);\r\n\r\n  const handlePreviousStepClick = useCallback(() => {\r\n    history.goBack();\r\n  }, [history]);\r\n  const sourceChain = parsedTx?.sourceChain;\r\n\r\n  const {\r\n    menuOpened,\r\n    handleMenuOpen,\r\n    handleMenuClose,\r\n    handleDeleteTx,\r\n  } = useTransactionDeletion(tx);\r\n\r\n  const {\r\n    modalOpened,\r\n    handleModalOpen,\r\n    handleModalClose,\r\n    tooltipOpened,\r\n    handleTooltipClose,\r\n  } = useBrowserNotificationsConfirmation();\r\n\r\n  const { enabled, handleEnable } = useBrowserNotifications(handleModalClose);\r\n\r\n  useEffect(() => {\r\n    if (sourceChain) {\r\n      const bridgeChainConfig = getChainConfigByRentxName(sourceChain);\r\n      dispatch(setChain(bridgeChainConfig.symbol));\r\n    }\r\n  }, [dispatch, sourceChain]);\r\n\r\n  const handleWalletPickerOpen = useCallback(() => {\r\n    dispatch(setWalletPickerOpened(true));\r\n  }, [dispatch]);\r\n\r\n  const {\r\n    burnCurrencyConfig,\r\n    burnChainConfig,\r\n    releaseCurrencyConfig,\r\n  } = getBurnAndReleaseParams(tx);\r\n  \r\n\r\n  return (\r\n    <>\r\n      <PaperHeader>\r\n        <PaperNav>\r\n          {txState?.newTx && (\r\n            <IconButton onClick={handlePreviousStepClick}>\r\n              <BackArrowIcon />\r\n            </IconButton>\r\n          )}\r\n        </PaperNav>\r\n        <PaperTitle>{paperTitle}</PaperTitle>\r\n        <PaperActions>\r\n          <BrowserNotificationButton\r\n            pressed={enabled}\r\n            onClick={handleModalOpen}\r\n            tooltipOpened={tooltipOpened}\r\n            onTooltipClose={handleTooltipClose}\r\n          />\r\n          <ToggleIconButton\r\n            variant=\"settings\"\r\n            onClick={handleMenuOpen}\r\n            pressed={menuOpened}\r\n          />\r\n        </PaperActions>\r\n      </PaperHeader>\r\n      <PaperContent bottomPadding>\r\n        {reloading && <ProgressStatus processing />}\r\n        {walletConnected && !reloading && <ReleaseTransactionStatus tx={tx} />}\r\n        {!walletConnected && (\r\n          <>\r\n            <PaperSpacerWrapper>\r\n              <CenteringSpacedBox>\r\n                <WalletConnectionProgress />\r\n              </CenteringSpacedBox>\r\n            </PaperSpacerWrapper>\r\n            <ActionButton onClick={handleWalletPickerOpen}>\r\n              Connect Wallet\r\n            </ActionButton>\r\n          </>\r\n        )}\r\n      </PaperContent>\r\n      {walletConnected && (\r\n        <>\r\n          <Divider />\r\n          <PaperContent darker topPadding bottomPadding>\r\n            <LabelWithValue\r\n              label=\"Releasing\"\r\n              value={\r\n                <NumberFormatText\r\n                  value={0}\r\n                  spacedSuffix={burnCurrencyConfig.short}\r\n                />\r\n              }\r\n              valueEquivalent={\r\n                <NumberFormatText\r\n                  value={0}\r\n                  prefix=\"$\"\r\n                  decimalScale={2}\r\n                  fixedDecimalScale\r\n                />\r\n              }\r\n            />\r\n            <LabelWithValue label=\"From\" value={burnChainConfig.full} />\r\n            <LabelWithValue\r\n              label=\"To\"\r\n              value={\r\n                <MiddleEllipsisText hoverable>\r\n                  {tx.destAddress}\r\n                </MiddleEllipsisText>\r\n              }\r\n            />\r\n            <SpacedDivider />\r\n            <TransactionFees\r\n              chain={chain}\r\n              currency={burnCurrencyConfig.symbol}\r\n              type={TxType.BURN}\r\n            />\r\n            <Debug it={{ parsedTx, txState: txState }} />\r\n          </PaperContent>\r\n        </>\r\n      )}\r\n      <BrowserNotificationsDrawer\r\n        open={modalOpened}\r\n        onClose={handleModalClose}\r\n        onEnable={handleEnable}\r\n      />\r\n      <TransactionMenu\r\n        tx={tx}\r\n        open={menuOpened}\r\n        onClose={handleMenuClose}\r\n        onDeleteTx={handleDeleteTx}\r\n      />\r\n      <Debug it={{ tooltipOpened, parsedTx, txState: txState }} />\r\n    </>\r\n  );\r\n};\r\n\r\ntype ReleaseTransactionStatusProps = {\r\n  tx: GatewaySession;\r\n};\r\n\r\nconst ReleaseTransactionStatus: FunctionComponent<ReleaseTransactionStatusProps> = ({\r\n  tx,\r\n}) => {\r\n  const history = useHistory();\r\n  const location = useLocation();\r\n  const [current, send, service] = useBurnMachine(tx);\r\n  useEffect(\r\n    () => () => {\r\n      console.info(\"stopping tx machine\");\r\n      service.stop();\r\n    },\r\n    [service]\r\n  );\r\n\r\n  const [submitting, setSubmitting] = useState(false);\r\n  const [timeoutError, setTimeoutError] = useState(false);\r\n  const handleSubmit = useCallback(() => {\r\n    setSubmitting(true);\r\n    send({ type: \"SUBMIT\" });\r\n  }, [send]);\r\n  const handleReload = useCallback(() => {\r\n    history.replace({\r\n      ...location,\r\n      state: {\r\n        txState: {\r\n          reloadTx: true,\r\n        },\r\n      },\r\n    });\r\n  }, [history, location]);\r\n\r\n  useEffect(() => {\r\n    if (current.value === \"srcSettling\") {\r\n      history.replace({\r\n        pathname: paths.RELEASE_TRANSACTION,\r\n        search: \"?\" + createTxQueryString(current.context.tx),\r\n      });\r\n    }\r\n  }, [history, current.value, current.context.tx]);\r\n\r\n  // const forceState = \"errorReleasing\";\r\n  const state = current.value as keyof BurnMachineSchema[\"states\"];\r\n  console.debug(tx.id, state);\r\n  switch (state) {\r\n    // switch (forceState as keyof BurnMachineSchema[\"states\"]) {\r\n    case \"created\":\r\n      return (\r\n        <ReleaseProgressStatus\r\n          tx={tx}\r\n          onSubmit={handleSubmit}\r\n          submitting={submitting}\r\n          submittingError={timeoutError}\r\n          onReload={handleReload}\r\n        />\r\n      );\r\n    case \"errorBurning\":\r\n    case \"errorReleasing\":\r\n    case \"srcSettling\":\r\n      return (\r\n        <ReleaseProgressStatus\r\n          tx={current.context.tx}\r\n          pending\r\n          generalError={state !== \"srcSettling\"}\r\n          onReload={handleReload}\r\n        />\r\n      );\r\n    case \"srcConfirmed\":\r\n      return <ProgressStatus reason=\"Submitting to RenVM\" />;\r\n    case \"accepted\":\r\n      return <ProgressStatus reason=\"Releasing from RenVM\" />;\r\n    case \"destInitiated\":\r\n      return <ReleaseCompletedStatus tx={current.context.tx} />;\r\n    default:\r\n      return <ProgressStatus />;\r\n  }\r\n};\r\n","import React, { FunctionComponent, useCallback, useState } from 'react'\r\nimport { RouteComponentProps } from 'react-router'\r\nimport { Route } from 'react-router-dom'\r\nimport { paths } from '../../pages/routes'\r\nimport { usePageTitle } from '../../providers/TitleProviders'\r\nimport { TransactionTypeTabs } from '../transactions/components/TransactionTypeTabs'\r\nimport { TxConfigurationStep } from '../transactions/transactionsUtils'\r\nimport { ReleaseFeesStep } from './steps/ReleaseFeesStep'\r\nimport { ReleaseInitialStep } from './steps/ReleaseInitialStep'\r\nimport { ReleaseProcessStep } from './steps/ReleaseProcessStep'\r\n\r\nconst ReleaseConfiguration: FunctionComponent<RouteComponentProps> = () => {\r\n  const [step, setStep] = useState(TxConfigurationStep.INITIAL);\r\n  const onInitialNext = useCallback(() => {\r\n    setStep(TxConfigurationStep.FEES);\r\n  }, []);\r\n  const onFeesPrev = useCallback(() => {\r\n    setStep(TxConfigurationStep.INITIAL);\r\n  }, []);\r\n\r\n  return (\r\n    <>\r\n      {step === TxConfigurationStep.INITIAL && (\r\n        <>\r\n          <TransactionTypeTabs />\r\n          <ReleaseInitialStep onNext={onInitialNext} />\r\n        </>\r\n      )}\r\n      {step === TxConfigurationStep.FEES && (\r\n        <ReleaseFeesStep onPrev={onFeesPrev} />\r\n      )}\r\n    </>\r\n  );\r\n};\r\n\r\nexport const ReleaseFlow: FunctionComponent = () => {\r\n  usePageTitle(\"Releasing\");\r\n  return (\r\n    <>\r\n      <Route exact path={paths.RELEASE} component={ReleaseConfiguration} />\r\n      <Route\r\n        exact\r\n        path={paths.RELEASE_TRANSACTION}\r\n        component={ReleaseProcessStep}\r\n      />\r\n    </>\r\n  );\r\n};\r\n","import { RenNetwork } from \"@renproject/interfaces\";\r\nimport queryString from \"query-string\";\r\nimport { useEffect } from \"react\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport { useLocation } from \"react-router-dom\";\r\nimport { setRenNetwork } from \"./networkSlice\";\r\n\r\nexport const supportedParamNetworks = [\r\n  RenNetwork.Mainnet,\r\n  RenNetwork.Testnet,\r\n  RenNetwork.TestnetVDot3,\r\n  RenNetwork.MainnetVDot3,\r\n];\r\n\r\nexport const useSetNetworkFromParam = () => {\r\n  const location = useLocation();\r\n  const dispatch = useDispatch();\r\n  const parsed = queryString.parse(location.search);\r\n\r\n  useEffect(() => {\r\n    const network = parsed.network as RenNetwork;\r\n    if (network) {\r\n      if (supportedParamNetworks.indexOf(network) > -1)\r\n        dispatch(setRenNetwork(parsed.network as RenNetwork));\r\n    }\r\n  }, [dispatch, parsed.network]);\r\n};\r\n","import queryString from \"query-string\";\r\n\r\nimport { env } from \"./environmentVariables\";\r\n\r\nexport const featureFlags = {\r\n  enableBSCMetamask:\r\n    env.BSC_MM_ENABLED ||\r\n    queryString.parse(window.location.search).bscMetamaskEnabled,\r\n  enableMEWConnect:\r\n    env.MEWCONNECT_ENABLED ||\r\n    queryString.parse(window.location.search).MEWConnectEnabled,\r\n  enableWalletConnect:\r\n    env.WALLETCONNECT_ENABLED ||\r\n    queryString.parse(window.location.search).walletConnectEnabled,\r\n};\r\n","import { RenNetwork } from \"@renproject/interfaces\";\r\nimport { BinanceSmartChainInjectedConnector } from \"@renproject/multiwallet-binancesmartchain-injected-connector\";\r\nimport { EthereumInjectedConnector } from \"@renproject/multiwallet-ethereum-injected-connector\";\r\nimport { EthereumMEWConnectConnector } from \"@renproject/multiwallet-ethereum-mewconnect-connector\";\r\nimport { EthereumWalletConnectConnector } from \"@renproject/multiwallet-ethereum-walletconnect-connector\";\r\nimport { MultiwalletProvider as RenMultiwalletProvider } from \"@renproject/multiwallet-ui\";\r\nimport React, { FunctionComponent } from \"react\";\r\nimport {\r\n  BinanceConnectorInfo,\r\n} from \"../../components/wallet/WalletHelpers\";\r\nimport { env } from \"../../constants/environmentVariables\";\r\nimport { featureFlags } from \"../../constants/featureFlags\";\r\nimport { RenChain } from \"../../utils/assetConfigs\";\r\n\r\nconst networkMapping: Record<number, RenNetwork[]> = {\r\n  1: [RenNetwork.Mainnet],\r\n  42: [RenNetwork.Testnet, RenNetwork.TestnetVDot3],\r\n};\r\n\r\nexport const renNetworkToEthNetwork = (id: RenNetwork): number | undefined => {\r\n  const entry = Object.entries(networkMapping).find(([_, x]) => x.includes(id));\r\n  if (!entry) return entry;\r\n  return parseInt(entry[0]);\r\n};\r\n\r\nexport const ethNetworkToRenNetwork = (id: string | number): RenNetwork => {\r\n  const index = Number(id);\r\n  return networkMapping[index]?.[0] || RenNetwork.Testnet;\r\n};\r\n\r\nexport const walletPickerModalConfig = (targetEthChainId: number) => ({\r\n  chains: {\r\n    [RenChain.ethereum]: [\r\n      {\r\n        name: \"Metamask\",\r\n        logo: \"https://avatars1.githubusercontent.com/u/11744586?s=60&v=4s\",\r\n        connector: new EthereumInjectedConnector({\r\n          debug: env.DEV,\r\n          networkIdMapper: ethNetworkToRenNetwork,\r\n        }),\r\n      },\r\n      ...(featureFlags.enableMEWConnect\r\n        ? [\r\n            {\r\n              name: \"MEW\",\r\n              logo:\r\n                \"https://avatars1.githubusercontent.com/u/24321658?s=60&v=4s\",\r\n              connector: new EthereumMEWConnectConnector({\r\n                debug: env.DEV,\r\n                rpc: {\r\n                  42: `wss://kovan.infura.io/ws/v3/${env.INFURA_ID}`,\r\n                  1: `wss://mainnet.infura.io/ws/v3/${env.INFURA_ID}`,\r\n                },\r\n                chainId: targetEthChainId,\r\n              }),\r\n            },\r\n          ]\r\n        : []),\r\n      ...(featureFlags.enableWalletConnect\r\n        ? [\r\n            {\r\n              name: \"WalletConnect\",\r\n              logo:\r\n                \"https://avatars0.githubusercontent.com/u/37784886?s=60&v=4\",\r\n              connector: new EthereumWalletConnectConnector({\r\n                rpc: {\r\n                  42: `https://kovan.infura.io/v3/${env.INFURA_ID}`,\r\n                  1: `wss://mainnet.infura.io/ws/v3/${env.INFURA_ID}`,\r\n                },\r\n                qrcode: true,\r\n                debug: true,\r\n              }),\r\n            },\r\n          ]\r\n        : []),\r\n    ],\r\n    [RenChain.binanceSmartChain]: [\r\n      ...(featureFlags.enableBSCMetamask\r\n        ? [\r\n            {\r\n              name: \"Metamask\",\r\n              logo:\r\n                \"https://avatars2.githubusercontent.com/u/45615063?s=60&v=4\",\r\n              connector: (() => {\r\n                const connector = new BinanceSmartChainInjectedConnector({\r\n                  debug: true,\r\n                });\r\n                connector.getProvider = () => (window as any).ethereum;\r\n                return connector;\r\n              })(),\r\n            },\r\n          ]\r\n        : []),\r\n    ],\r\n  },\r\n});\r\n\r\nexport const MultiwalletProvider: FunctionComponent = ({ children }) => {\r\n  return <RenMultiwalletProvider>{children}</RenMultiwalletProvider>;\r\n};\r\n","import {\r\n  Button,\r\n  Divider,\r\n  Drawer,\r\n  ListItem,\r\n  Menu,\r\n  Box,\r\n  MenuItem,\r\n  Typography,\r\n  useTheme,\r\n} from \"@material-ui/core\";\r\nimport IconButton from \"@material-ui/core/IconButton\";\r\nimport CloseIcon from \"@material-ui/icons/Close\";\r\nimport MenuIcon from \"@material-ui/icons/Menu\";\r\nimport {\r\n  MultiwalletProvider,\r\n  useMultiwallet,\r\n  WalletPickerModal,\r\n  WalletPickerProps,\r\n} from \"@renproject/multiwallet-ui\";\r\nimport classNames from \"classnames\";\r\nimport React, {\r\n  FunctionComponent,\r\n  useCallback,\r\n  useEffect,\r\n  useMemo,\r\n  useState,\r\n} from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { useDebounce, useWindowSize } from \"react-use\";\r\nimport { env } from \"../constants/environmentVariables\";\r\nimport { $renNetwork } from \"../features/network/networkSlice\";\r\nimport { useSetNetworkFromParam } from \"../features/network/networkUtils\";\r\nimport { TransactionHistory } from \"../features/transactions/TransactionHistory\";\r\nimport {\r\n  $transactionsData,\r\n  $transactionsNeedsAction,\r\n  setTxHistoryOpened,\r\n} from \"../features/transactions/transactionsSlice\";\r\nimport { useSubNetworkName } from \"../features/ui/uiHooks\";\r\n\r\nimport {\r\n  useAuthentication,\r\n  useSelectedChainWallet,\r\n  useSyncMultiwalletNetwork,\r\n  useWallet,\r\n  useWeb3Signatures,\r\n} from \"../features/wallet/walletHooks\";\r\nimport { copyToClipboard } from \"../utils/copyToClipboard\";\r\n\r\nimport {\r\n  $authRequired,\r\n  $multiwalletChain,\r\n  $walletPickerOpened,\r\n  setWalletPickerOpened,\r\n} from \"../features/wallet/walletSlice\";\r\nimport {\r\n  renNetworkToEthNetwork,\r\n  walletPickerModalConfig,\r\n} from \"../providers/multiwallet/Multiwallet\";\r\nimport { TransactionHistoryMenuIconButton } from \"../components/buttons/Buttons\";\r\nimport { Debug } from \"../components/utils/Debug\";\r\nimport {\r\n  useWalletPickerStyles,\r\n  WalletChainLabel,\r\n  WalletConnectingInfo,\r\n  WalletConnectionStatusButton,\r\n  WalletEntryButton,\r\n  WalletWrongNetworkInfo,\r\n} from \"../components/wallet/WalletHelpers\";\r\nimport { Footer } from \"../components/layout/Footer\";\r\nimport {\r\n  MobileLayout,\r\n  MainLayoutVariantProps,\r\n  useMobileLayoutStyles,\r\n} from \"../components/layout/MobileLayout\";\r\nimport { BridgeLogoIcon } from \"../components/icons/RenIcons\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nexport const MainLayout: FunctionComponent<MainLayoutVariantProps> = ({\r\n  children,\r\n}) => {\r\n  const styles = useMobileLayoutStyles();\r\n  const dispatch = useDispatch();\r\n  useSetNetworkFromParam();\r\n  useSyncMultiwalletNetwork();\r\n  useWeb3Signatures();\r\n  const {\r\n    authenticate,\r\n    isAuthenticated,\r\n    isAuthenticating,\r\n  } = useAuthentication();\r\n  const {\r\n    status,\r\n    account,\r\n    walletConnected,\r\n    deactivateConnector,\r\n    symbol,\r\n  } = useSelectedChainWallet();\r\n  const { txHistoryOpened } = useSelector($transactionsData);\r\n  const txsNeedsAction = useSelector($transactionsNeedsAction);\r\n\r\n  const authRequired = useSelector($authRequired);\r\n  const [authWarningOpened, setAuthWarningOpened] = useState(false);\r\n  useDebounce(\r\n    () => {\r\n      const shouldAuthWarningOpened =\r\n        walletConnected &&\r\n        !isAuthenticated &&\r\n        !isAuthenticating &&\r\n        (authRequired || txHistoryOpened);\r\n\r\n      setAuthWarningOpened(shouldAuthWarningOpened);\r\n    },\r\n    1000, // the authentication process takes a few seconds\r\n    [walletConnected, isAuthenticated, authRequired, txHistoryOpened]\r\n  );\r\n  // const authWarningOpened =\r\n  //   walletConnected && !isAuthenticated && (authRequired || txHistoryOpened);\r\n\r\n  const [mobileMenuOpen, setMobileMenuOpen] = useState(true);\r\n  const handleMobileMenuClose = useCallback(() => {\r\n    setMobileMenuOpen(false);\r\n  }, []);\r\n  const handleMobileMenuOpen = useCallback(() => {\r\n    setMobileMenuOpen(true);\r\n  }, []);\r\n  const { width } = useWindowSize();\r\n  const theme = useTheme();\r\n  useEffect(() => {\r\n    if (width > theme.breakpoints.values[\"sm\"]) {\r\n      setMobileMenuOpen(false);\r\n    }\r\n  }, [width, theme.breakpoints]);\r\n\r\n  const handleTxHistoryToggle = useCallback(() => {\r\n    dispatch(setTxHistoryOpened(!txHistoryOpened));\r\n  }, [dispatch, txHistoryOpened]);\r\n\r\n  const multiwalletChain = useSelector($multiwalletChain);\r\n  const walletPickerOpen = useSelector($walletPickerOpened);\r\n  const renNetwork = useSelector($renNetwork);\r\n  const pickerClasses = useWalletPickerStyles();\r\n  const [\r\n    walletMenuAnchor,\r\n    setWalletMenuAnchor,\r\n  ] = React.useState<null | HTMLElement>(null);\r\n  const handleWalletPickerClose = useCallback(() => {\r\n    dispatch(setWalletPickerOpened(false));\r\n  }, [dispatch]);\r\n  const handleWalletMenuClose = useCallback(() => {\r\n    setWalletMenuAnchor(null);\r\n  }, []);\r\n\r\n  const handleWalletButtonClick = useCallback(\r\n    (event: React.MouseEvent<HTMLElement>) => {\r\n      if (walletConnected) {\r\n        setWalletMenuAnchor(event.currentTarget);\r\n      } else {\r\n        dispatch(setWalletPickerOpened(true));\r\n      }\r\n    },\r\n    [dispatch, walletConnected]\r\n  );\r\n\r\n  const handleDisconnectWallet = useCallback(() => {\r\n    deactivateConnector();\r\n    handleWalletMenuClose();\r\n  }, [deactivateConnector, handleWalletMenuClose]);\r\n  const walletPickerOptions = useMemo(() => {\r\n    const options: WalletPickerProps<any, any> = {\r\n      targetNetwork: renNetwork,\r\n      chain: multiwalletChain,\r\n      onClose: handleWalletPickerClose,\r\n      pickerClasses,\r\n      // DefaultInfo: DebugComponentProps,\r\n      ConnectingInfo: WalletConnectingInfo,\r\n      WrongNetworkInfo: WalletWrongNetworkInfo,\r\n      WalletEntryButton,\r\n      WalletChainLabel,\r\n      config: walletPickerModalConfig(renNetworkToEthNetwork(renNetwork) || 1),\r\n    };\r\n    return options;\r\n  }, [multiwalletChain, handleWalletPickerClose, pickerClasses, renNetwork]);\r\n\r\n  const debugWallet = useWallet(multiwalletChain); //remove\r\n  const debugMultiwallet = useMultiwallet(); //remove\r\n  const debugNetworkName = useSubNetworkName();\r\n\r\n  const drawerId = \"main-menu-mobile\";\r\n  const showTxIndicator = walletConnected && txsNeedsAction;\r\n  const [copied, setCopied] = useState(false);\r\n  const handleClick = useCallback(() => {\r\n    if (!copied) {\r\n      copyToClipboard(\"0x361C60b7c2828fCAb80988d00D1D542c83387b50\");\r\n      setCopied(true);\r\n      setTimeout(() => {\r\n        setCopied(false);\r\n      }, 2000);\r\n    }\r\n  }, [copied]);\r\n\r\n  const handleClick2 = useCallback(() => {\r\n    \r\n  }, []);\r\n\r\n  const ToolbarMenu = (\r\n    <>\r\n      <div className={styles.desktopMenu}>\r\n      <Button onClick={()=> window.open(\"https://pancakeswap.finance/swap?inputCurrency=0x361c60b7c2828fcab80988d00d1d542c83387b50&outputCurrency=BNB\", \"_blank\")} color=\"secondary\" className={styles.rightMargin}>\r\n          <span>{\"Pancake Swap\"}</span>\r\n        </Button>\r\n        <Button onClick={()=> window.open(\"https://bscscan.com/address/0x3961a7B7d2CeB33ad5740624901f6264023C9aC0#code\", \"_blank\")} color=\"secondary\" className={styles.rightMargin}>\r\n          <span>{\"Smart Contract\"}</span>\r\n        </Button>\r\n        <Button onClick={handleClick} color=\"secondary\" className={styles.rightMargin}>\r\n          <span>{!copied ? \"DFI Token Address\" : \"Copied to Clipboard\"}</span>\r\n        </Button>\r\n        <WalletConnectionStatusButton\r\n          onClick={handleWalletButtonClick}\r\n          hoisted={txHistoryOpened}\r\n          status={status}\r\n          account={account}\r\n          wallet={symbol}\r\n        />\r\n        <WalletPickerModal\r\n          open={walletPickerOpen}\r\n          options={walletPickerOptions}\r\n        />\r\n      </div>\r\n      <div className={styles.mobileMenu}>\r\n        <IconButton\r\n          aria-label=\"show more\"\r\n          aria-controls={drawerId}\r\n          aria-haspopup=\"true\"\r\n          onClick={handleMobileMenuOpen}\r\n          color=\"inherit\"\r\n        >\r\n          <MenuIcon />\r\n        </IconButton>\r\n      </div>\r\n    </>\r\n  );\r\n  const DrawerMenu = (\r\n    <Drawer\r\n      anchor=\"right\"\r\n      id={drawerId}\r\n      keepMounted\r\n      open={mobileMenuOpen}\r\n      onClose={handleMobileMenuClose}\r\n      PaperProps={{ className: styles.drawerPaper }}\r\n    >\r\n      <div className={styles.drawerHeader}>\r\n        <IconButton\r\n          aria-label=\"close\"\r\n          className={styles.drawerClose}\r\n          onClick={handleMobileMenuClose}\r\n        >\r\n          <CloseIcon />\r\n        </IconButton>\r\n      </div>\r\n      <Divider />\r\n      <ListItem\r\n        divider\r\n        className={styles.drawerListItem}\r\n        button\r\n        onClick={handleWalletButtonClick}\r\n      >\r\n        <WalletConnectionStatusButton\r\n          className={styles.mobileMenuButton}\r\n          mobile\r\n          status={status}\r\n          account={account}\r\n          wallet={symbol}\r\n        />\r\n      </ListItem>\r\n\r\n      <ListItem\r\n        className={classNames(\r\n          styles.drawerListItem,\r\n          styles.drawerFooterListItem\r\n        )}\r\n      >\r\n        <Footer mobile />\r\n      </ListItem>\r\n    </Drawer>\r\n  );\r\n\r\n  const WalletLogo = (\r\n    <Link to=\"/\" style={{ color: 'black' }}><Box display=\"inline-block\" p={3}>\r\n          <BridgeLogoIcon width=\"auto\" height=\"auto\"/>\r\n    </Box></Link>\r\n  );\r\n\r\n  const WalletMenu = (\r\n    <Menu\r\n      id=\"wallet-menu\"\r\n      getContentAnchorEl={null}\r\n      anchorEl={walletMenuAnchor}\r\n      keepMounted\r\n      open={Boolean(walletMenuAnchor)}\r\n      onClose={handleWalletMenuClose}\r\n      anchorOrigin={{ vertical: \"bottom\", horizontal: \"left\" }}\r\n      transformOrigin={{ vertical: \"top\", horizontal: \"left\" }}\r\n    >\r\n      <MenuItem onClick={handleDisconnectWallet}>\r\n        <Typography color=\"error\">Disconnect wallet</Typography>\r\n      </MenuItem>\r\n    </Menu>\r\n  );\r\n\r\n  return (\r\n    <MobileLayout\r\n      ToolbarMenu={ToolbarMenu}\r\n      DrawerMenu={DrawerMenu}\r\n      WalletMenu={WalletMenu}\r\n      Logo={WalletLogo}\r\n    >\r\n      {children}\r\n      <Debug\r\n        it={{\r\n          isAuthenticated,\r\n          debugNetworkName,\r\n          debugWallet,\r\n          debugMultiwallet,\r\n          env,\r\n        }}\r\n      />\r\n    </MobileLayout>\r\n  );\r\n};\r\n\r\nexport const ConnectedMainLayout: FunctionComponent = ({ children }) => (\r\n  <MultiwalletProvider>\r\n    <MainLayout>{children}</MainLayout>\r\n  </MultiwalletProvider>\r\n);\r\n","import React, { FunctionComponent } from 'react'\r\nimport { useSelector } from 'react-redux'\r\nimport { RouteComponentProps } from 'react-router'\r\nimport { Route } from 'react-router-dom'\r\nimport { BridgePaperWrapper, BridgePurePaper, } from '../components/layout/Paper'\r\nimport { storageKeys } from '../constants/constants'\r\nimport { MintFlow } from '../features/mint/MintFlow'\r\nimport { ReleaseFlow } from '../features/release/ReleaseFlow'\r\nimport { $ui } from '../features/ui/uiSlice'\r\nimport { PaperTitleProvider } from '../providers/TitleProviders'\r\nimport { ConnectedMainLayout } from './MainLayout'\r\nimport { paths } from './routes'\r\n\r\nconst MainPage: FunctionComponent<RouteComponentProps> = ({\r\n  history,\r\n  location,\r\n}) => {\r\n  if (!localStorage.getItem(storageKeys.TERMS_AGREED)) {\r\n    history.replace(paths.WELCOME);\r\n  }\r\n  if (location.pathname === \"/\") {\r\n    history.replace(paths.WELCOME);\r\n  }\r\n  //useExchangeRates();\r\n  //useGasPrices(); TODODO\r\n  const { paperShaking } = useSelector($ui);\r\n  return (\r\n    <>\r\n      <ConnectedMainLayout>\r\n        <PaperTitleProvider>\r\n          <BridgePaperWrapper>\r\n            <BridgePurePaper shaking={paperShaking}>\r\n              <Route path={paths.MINT} component={MintFlow} />\r\n              <Route path={paths.RELEASE} component={ReleaseFlow} />\r\n            </BridgePurePaper>\r\n          </BridgePaperWrapper>\r\n        </PaperTitleProvider>\r\n      </ConnectedMainLayout>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default MainPage;\r\n"],"sourceRoot":""}